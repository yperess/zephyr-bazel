/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   preprocessed.dts
 *
 * Directories with bindings:
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /adc
 *   2   /aliases
 *   3   /can
 *   4   /can_loopback0
 *   5   /chosen
 *   6   /counter
 *   7   /dma
 *   8   /eeprom
 *   9   /espi@300
 *   10  /i2c@100
 *   11  /input-sdl-touch
 *   12  /lvgl_pointer
 *   13  /non-deprecated-label
 *   14  /rng
 *   15  /rtc
 *   16  /sdl_dc
 *   17  /spi@200
 *   18  /uart
 *   19  /uart_1
 *   20  /udc0
 *   21  /test
 *   22  /test/interrupt-controller
 *   23  /test/interrupt-controller@bbbbcccc
 *   24  /test/gpio@deadbeef
 *   25  /zephyr,user
 *   26  /cpus
 *   27  /cpus/cpu@0
 *   28  /flash-controller@0
 *   29  /flash-controller@0/flash@0
 *   30  /flash-controller@0/flash@0/partitions
 *   31  /flash-controller@0/flash@0/partitions/partition@0
 *   32  /flash-controller@0/flash@0/partitions/partition@c000
 *   33  /flash-controller@0/flash@0/partitions/partition@75000
 *   34  /flash-controller@0/flash@0/partitions/partition@de000
 *   35  /flash-controller@0/flash@0/partitions/partition@fc000
 *   36  /gpio@800
 *   37  /leds
 *   38  /leds/led_0
 *   39  /test/array-holder
 *   40  /test/can-phy0
 *   41  /test/can@55553333
 *   42  /test/device-with-props-0
 *   43  /test/device-with-props-1
 *   44  /test/device-with-props-2
 *   45  /test/disabled-node@0
 *   46  /test/enum-0
 *   47  /test/enum-1
 *   48  /test/enum-4
 *   49  /test/enum-5
 *   50  /test/enum-6
 *   51  /test/enum-7
 *   52  /test/gpio@0
 *   53  /test/gpio@1
 *   54  /test/i2c@77778888
 *   55  /test/intc_no_status@0
 *   56  /test/interrupt-holder
 *   57  /test/gpio@1234abcd
 *   58  /test/interrupt-holder-extended
 *   59  /test/enum-2
 *   60  /test/enum-3
 *   61  /test/gpio@1234
 *   62  /test/gpio@abcd1234
 *   63  /test/i2c@11112222
 *   64  /test/pwm@55551111
 *   65  /test/pwm@55552222
 *   66  /test/spi@33334444
 *   67  /test/phandle-holder-0
 *   68  /test/reg-holder@9999aaaa
 *   69  /test/reserved-node@0
 *   70  /test/string-array-token-0
 *   71  /test/string-array-token-1
 *   72  /test/string-array-unquoted-f0
 *   73  /test/string-array-unquoted-f1
 *   74  /test/string-array-unquoted-t
 *   75  /test/string-token-0
 *   76  /test/string-token-1
 *   77  /test/string-token-2
 *   78  /test/string-unquoted-f0
 *   79  /test/string-unquoted-f1
 *   80  /test/string-unquoted-t
 *   81  /test/adc@10002000
 *   82  /test/adc@10003000
 *   83  /test/dma@44442222
 *   84  /test/dma@44443333
 *   85  /test/mbox
 *   86  /test/mbox_zero_cell
 *   87  /test/test-clock
 *   88  /test/test-fixed-clock
 *   89  /test/test-reset@abcd1234
 *   90  /test/pin-controller
 *   91  /test/pin-controller/pincfg-a
 *   92  /test/pin-controller/pincfg-b
 *   93  /test/pin-controller/pincfg-c
 *   94  /test/pin-controller/pincfg-d
 *   95  /test/temperature-sensor
 *   96  /test/vendor
 *   97  /test/can@55554444
 *   98  /test/can@55554444/can-transceiver
 *   99  /test/gpio@abcd1234/test_gpio_hog_3
 *   100 /test/gpio@deadbeef/test_gpio_hog_1
 *   101 /test/gpio@deadbeef/test_gpio_hog_2
 *   102 /test/i2c
 *   103 /test/i2c/test-i2c-dev@12
 *   104 /test/i2c@11112222/gpio@11
 *   105 /test/i2c@11112222/test-i2c-dev@10
 *   106 /test/i2c@11112222/i2c-mux@12
 *   107 /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1
 *   108 /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1/muxed-i2c-dev@10
 *   109 /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2
 *   110 /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2/muxed-i2c-dev@10
 *   111 /test/i3c@88889999
 *   112 /test/i3c@88889999/test-i3c-dev@420000ABCD12345678
 *   113 /test/i3c@88889999/test-i3c-i2c-dev@380000000000000050
 *   114 /test/spi@33334444/gpio@2
 *   115 /test/spi@33334444/test-spi-dev@0
 *   116 /test/spi@33334444/test-spi-dev@1
 *   117 /test/spi@55556666
 *   118 /test/spi@55556666/test-spi-dev@0
 *   119 /test/test-children
 *   120 /test/test-children/child-a
 *   121 /test/test-children/child-b
 *   122 /test/test-children/child-c
 *   123 /test/test-great-grandchildren
 *   124 /test/test-great-grandchildren/child
 *   125 /test/test-great-grandchildren/child/grandchild
 *   126 /test/test-great-grandchildren/child/grandchild/great-grandchild
 *   127 /test/test-mtd@33221100
 *   128 /test/test-mtd@33221100/partitions
 *   129 /test/test-mtd@33221100/partitions/partition@6ff80
 *   130 /test/test-mtd@ffeeddcc
 *   131 /test/test-mtd@ffeeddcc/flash@20000000
 *   132 /test/test-mtd@ffeeddcc/flash@20000000/partitions
 *   133 /test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@0
 *   134 /test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@c0
 *   135 /test/test-ranges
 *   136 /test/test-ranges/empty@2
 *   137 /test/test-ranges/other@1
 *   138 /test/test-ranges/pcie@0
 *   139 /test_64
 *   140 /test_64/reg-holder-64@ffffffff11223344
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_flash_controller_0) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can_loopback0) fn(DT_N_S_can) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_zephyr_user) fn(DT_N_S_test) fn(DT_N_S_test_64) fn(DT_N_S_non_deprecated_label)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can_loopback0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_zephyr_user) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_64) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_non_deprecated_label)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can_loopback0, __VA_ARGS__) fn(DT_N_S_can, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_zephyr_user, __VA_ARGS__) fn(DT_N_S_test, __VA_ARGS__) fn(DT_N_S_test_64, __VA_ARGS__) fn(DT_N_S_non_deprecated_label, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can_loopback0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_zephyr_user, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_64, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_non_deprecated_label, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_flash_controller_0) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can_loopback0) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_zephyr_user) fn(DT_N_S_test) fn(DT_N_S_test_64) fn(DT_N_S_non_deprecated_label)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can_loopback0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_zephyr_user) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_64) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_non_deprecated_label)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can_loopback0, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_zephyr_user, __VA_ARGS__) fn(DT_N_S_test, __VA_ARGS__) fn(DT_N_S_test_64, __VA_ARGS__) fn(DT_N_S_non_deprecated_label, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can_loopback0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_zephyr_user, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_64, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_non_deprecated_label, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /adc */ \
	2, /* /aliases */ \
	3, /* /can */ \
	4, /* /can_loopback0 */ \
	5, /* /chosen */ \
	6, /* /counter */ \
	7, /* /dma */ \
	8, /* /eeprom */ \
	9, /* /espi@300 */ \
	10, /* /i2c@100 */ \
	11, /* /input-sdl-touch */ \
	12, /* /lvgl_pointer */ \
	13, /* /non-deprecated-label */ \
	14, /* /rng */ \
	15, /* /rtc */ \
	16, /* /sdl_dc */ \
	17, /* /spi@200 */ \
	18, /* /uart */ \
	19, /* /uart_1 */ \
	20, /* /udc0 */ \
	21, /* /test */ \
	25, /* /zephyr,user */ \
	26, /* /cpus */ \
	28, /* /flash-controller@0 */ \
	36, /* /gpio@800 */ \
	37, /* /leds */ \
	139, /* /test_64 */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_zephyr_posix DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_IRQ_LEVEL 0
#define DT_N_COMPAT_MATCHES_zephyr_posix 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"zephyr,posix"}
#define DT_N_P_compatible_IDX_0 "zephyr,posix"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED zephyr,posix
#define DT_N_P_compatible_IDX_0_STRING_TOKEN zephyr_posix
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_POSIX
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /adc
 *
 * Node identifier: DT_N_S_adc
 *
 * Binding (compatible = zephyr,adc-emul):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/adc/zephyr,adc-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_adc_PATH "/adc"

/* Node's name with unit-address: */
#define DT_N_S_adc_FULL_NAME "adc"

/* Node parent (/) identifier: */
#define DT_N_S_adc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_adc_CHILD_IDX 21

/* Helper macros for child nodes of this node. */
#define DT_N_S_adc_FOREACH_CHILD(fn) 
#define DT_N_S_adc_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_adc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_adc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_adc_ORD 1
#define DT_N_S_adc_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_adc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_adc_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_adc_EXISTS 1
#define DT_N_INST_0_zephyr_adc_emul DT_N_S_adc
#define DT_N_NODELABEL_adc0         DT_N_S_adc

/* Macros for properties that are special in the specification: */
#define DT_N_S_adc_REG_NUM 0
#define DT_N_S_adc_RANGES_NUM 0
#define DT_N_S_adc_FOREACH_RANGE(fn) 
#define DT_N_S_adc_IRQ_NUM 0
#define DT_N_S_adc_IRQ_LEVEL 0
#define DT_N_S_adc_COMPAT_MATCHES_zephyr_adc_emul 1
#define DT_N_S_adc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_adc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_adc_P_nchannels 2
#define DT_N_S_adc_P_nchannels_EXISTS 1
#define DT_N_S_adc_P_ref_internal_mv 0
#define DT_N_S_adc_P_ref_internal_mv_EXISTS 1
#define DT_N_S_adc_P_ref_vdd_mv 0
#define DT_N_S_adc_P_ref_vdd_mv_EXISTS 1
#define DT_N_S_adc_P_ref_external0_mv 0
#define DT_N_S_adc_P_ref_external0_mv_EXISTS 1
#define DT_N_S_adc_P_ref_external1_mv 0
#define DT_N_S_adc_P_ref_external1_mv_EXISTS 1
#define DT_N_S_adc_P_status "okay"
#define DT_N_S_adc_P_status_STRING_UNQUOTED okay
#define DT_N_S_adc_P_status_STRING_TOKEN okay
#define DT_N_S_adc_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_adc_P_status_IDX_0 "okay"
#define DT_N_S_adc_P_status_IDX_0_EXISTS 1
#define DT_N_S_adc_P_status_ENUM_IDX 1
#define DT_N_S_adc_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_adc_P_status_ENUM_TOKEN okay
#define DT_N_S_adc_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_adc, status, 0)
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_adc, status, 0)
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_adc, status, 0, __VA_ARGS__)
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_adc, status, 0, __VA_ARGS__)
#define DT_N_S_adc_P_status_LEN 1
#define DT_N_S_adc_P_status_EXISTS 1
#define DT_N_S_adc_P_compatible {"zephyr,adc-emul"}
#define DT_N_S_adc_P_compatible_IDX_0 "zephyr,adc-emul"
#define DT_N_S_adc_P_compatible_IDX_0_STRING_UNQUOTED zephyr,adc-emul
#define DT_N_S_adc_P_compatible_IDX_0_STRING_TOKEN zephyr_adc_emul
#define DT_N_S_adc_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_ADC_EMUL
#define DT_N_S_adc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_adc, compatible, 0)
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_adc, compatible, 0)
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_adc, compatible, 0, __VA_ARGS__)
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_adc, compatible, 0, __VA_ARGS__)
#define DT_N_S_adc_P_compatible_LEN 1
#define DT_N_S_adc_P_compatible_EXISTS 1
#define DT_N_S_adc_P_wakeup_source 0
#define DT_N_S_adc_P_wakeup_source_EXISTS 1
#define DT_N_S_adc_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_adc_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 2
#define DT_N_S_aliases_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_IRQ_LEVEL 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /can
 *
 * Node identifier: DT_N_S_can
 *
 * Binding (compatible = zephyr,native-linux-can):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/can/zephyr,native-linux-can.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_can_PATH "/can"

/* Node's name with unit-address: */
#define DT_N_S_can_FULL_NAME "can"

/* Node parent (/) identifier: */
#define DT_N_S_can_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_can_CHILD_IDX 19

/* Helper macros for child nodes of this node. */
#define DT_N_S_can_FOREACH_CHILD(fn) 
#define DT_N_S_can_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_can_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_can_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_can_ORD 3
#define DT_N_S_can_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_can_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_can_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_can_EXISTS 1
#define DT_N_INST_0_zephyr_native_linux_can DT_N_S_can
#define DT_N_NODELABEL_can0                 DT_N_S_can

/* Macros for properties that are special in the specification: */
#define DT_N_S_can_REG_NUM 0
#define DT_N_S_can_RANGES_NUM 0
#define DT_N_S_can_FOREACH_RANGE(fn) 
#define DT_N_S_can_IRQ_NUM 0
#define DT_N_S_can_IRQ_LEVEL 0
#define DT_N_S_can_COMPAT_MATCHES_zephyr_native_linux_can 1
#define DT_N_S_can_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_can_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_can_P_host_interface "zcan0"
#define DT_N_S_can_P_host_interface_STRING_UNQUOTED zcan0
#define DT_N_S_can_P_host_interface_STRING_TOKEN zcan0
#define DT_N_S_can_P_host_interface_STRING_UPPER_TOKEN ZCAN0
#define DT_N_S_can_P_host_interface_IDX_0 "zcan0"
#define DT_N_S_can_P_host_interface_IDX_0_EXISTS 1
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can, host_interface, 0)
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can, host_interface, 0)
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can, host_interface, 0, __VA_ARGS__)
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can, host_interface, 0, __VA_ARGS__)
#define DT_N_S_can_P_host_interface_LEN 1
#define DT_N_S_can_P_host_interface_EXISTS 1
#define DT_N_S_can_P_bus_speed 125000
#define DT_N_S_can_P_bus_speed_EXISTS 1
#define DT_N_S_can_P_sample_point 875
#define DT_N_S_can_P_sample_point_EXISTS 1
#define DT_N_S_can_P_sjw 1
#define DT_N_S_can_P_sjw_EXISTS 1
#define DT_N_S_can_P_status "disabled"
#define DT_N_S_can_P_status_STRING_UNQUOTED disabled
#define DT_N_S_can_P_status_STRING_TOKEN disabled
#define DT_N_S_can_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_can_P_status_IDX_0 "disabled"
#define DT_N_S_can_P_status_IDX_0_EXISTS 1
#define DT_N_S_can_P_status_ENUM_IDX 2
#define DT_N_S_can_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_can_P_status_ENUM_TOKEN disabled
#define DT_N_S_can_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can, status, 0)
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can, status, 0)
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can, status, 0, __VA_ARGS__)
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can, status, 0, __VA_ARGS__)
#define DT_N_S_can_P_status_LEN 1
#define DT_N_S_can_P_status_EXISTS 1
#define DT_N_S_can_P_compatible {"zephyr,native-linux-can"}
#define DT_N_S_can_P_compatible_IDX_0 "zephyr,native-linux-can"
#define DT_N_S_can_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-linux-can
#define DT_N_S_can_P_compatible_IDX_0_STRING_TOKEN zephyr_native_linux_can
#define DT_N_S_can_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_LINUX_CAN
#define DT_N_S_can_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can, compatible, 0)
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can, compatible, 0)
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_P_compatible_LEN 1
#define DT_N_S_can_P_compatible_EXISTS 1
#define DT_N_S_can_P_wakeup_source 0
#define DT_N_S_can_P_wakeup_source_EXISTS 1
#define DT_N_S_can_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_can_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /can_loopback0
 *
 * Node identifier: DT_N_S_can_loopback0
 *
 * Binding (compatible = zephyr,can-loopback):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/can/zephyr,can-loopback.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_can_loopback0_PATH "/can_loopback0"

/* Node's name with unit-address: */
#define DT_N_S_can_loopback0_FULL_NAME "can_loopback0"

/* Node parent (/) identifier: */
#define DT_N_S_can_loopback0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_can_loopback0_CHILD_IDX 18

/* Helper macros for child nodes of this node. */
#define DT_N_S_can_loopback0_FOREACH_CHILD(fn) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_can_loopback0_ORD 4
#define DT_N_S_can_loopback0_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_can_loopback0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_can_loopback0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_can_loopback0_EXISTS 1
#define DT_N_INST_0_zephyr_can_loopback DT_N_S_can_loopback0
#define DT_N_NODELABEL_can_loopback0    DT_N_S_can_loopback0

/* Macros for properties that are special in the specification: */
#define DT_N_S_can_loopback0_REG_NUM 0
#define DT_N_S_can_loopback0_RANGES_NUM 0
#define DT_N_S_can_loopback0_FOREACH_RANGE(fn) 
#define DT_N_S_can_loopback0_IRQ_NUM 0
#define DT_N_S_can_loopback0_IRQ_LEVEL 0
#define DT_N_S_can_loopback0_COMPAT_MATCHES_zephyr_can_loopback 1
#define DT_N_S_can_loopback0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_can_loopback0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_can_loopback0_P_bus_speed 125000
#define DT_N_S_can_loopback0_P_bus_speed_EXISTS 1
#define DT_N_S_can_loopback0_P_sample_point 875
#define DT_N_S_can_loopback0_P_sample_point_EXISTS 1
#define DT_N_S_can_loopback0_P_sjw 1
#define DT_N_S_can_loopback0_P_sjw_EXISTS 1
#define DT_N_S_can_loopback0_P_status "okay"
#define DT_N_S_can_loopback0_P_status_STRING_UNQUOTED okay
#define DT_N_S_can_loopback0_P_status_STRING_TOKEN okay
#define DT_N_S_can_loopback0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_can_loopback0_P_status_IDX_0 "okay"
#define DT_N_S_can_loopback0_P_status_IDX_0_EXISTS 1
#define DT_N_S_can_loopback0_P_status_ENUM_IDX 1
#define DT_N_S_can_loopback0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_can_loopback0_P_status_ENUM_TOKEN okay
#define DT_N_S_can_loopback0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can_loopback0, status, 0)
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can_loopback0, status, 0)
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can_loopback0, status, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can_loopback0, status, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_status_LEN 1
#define DT_N_S_can_loopback0_P_status_EXISTS 1
#define DT_N_S_can_loopback0_P_compatible {"zephyr,can-loopback"}
#define DT_N_S_can_loopback0_P_compatible_IDX_0 "zephyr,can-loopback"
#define DT_N_S_can_loopback0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,can-loopback
#define DT_N_S_can_loopback0_P_compatible_IDX_0_STRING_TOKEN zephyr_can_loopback
#define DT_N_S_can_loopback0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_CAN_LOOPBACK
#define DT_N_S_can_loopback0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can_loopback0, compatible, 0)
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can_loopback0, compatible, 0)
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can_loopback0, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can_loopback0, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_compatible_LEN 1
#define DT_N_S_can_loopback0_P_compatible_EXISTS 1
#define DT_N_S_can_loopback0_P_wakeup_source 0
#define DT_N_S_can_loopback0_P_wakeup_source_EXISTS 1
#define DT_N_S_can_loopback0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_can_loopback0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 5
#define DT_N_S_chosen_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_IRQ_LEVEL 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /counter
 *
 * Node identifier: DT_N_S_counter
 *
 * Binding (compatible = zephyr,native-posix-counter):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/counter/zephyr,native-posix-counter.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_counter_PATH "/counter"

/* Node's name with unit-address: */
#define DT_N_S_counter_FULL_NAME "counter"

/* Node parent (/) identifier: */
#define DT_N_S_counter_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_counter_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_counter_FOREACH_CHILD(fn) 
#define DT_N_S_counter_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_counter_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_counter_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_counter_ORD 6
#define DT_N_S_counter_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_counter_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_counter_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_counter_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_counter DT_N_S_counter
#define DT_N_NODELABEL_counter0                 DT_N_S_counter

/* Macros for properties that are special in the specification: */
#define DT_N_S_counter_REG_NUM 0
#define DT_N_S_counter_RANGES_NUM 0
#define DT_N_S_counter_FOREACH_RANGE(fn) 
#define DT_N_S_counter_IRQ_NUM 0
#define DT_N_S_counter_IRQ_LEVEL 0
#define DT_N_S_counter_COMPAT_MATCHES_zephyr_native_posix_counter 1
#define DT_N_S_counter_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_counter_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_counter_P_status "okay"
#define DT_N_S_counter_P_status_STRING_UNQUOTED okay
#define DT_N_S_counter_P_status_STRING_TOKEN okay
#define DT_N_S_counter_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_counter_P_status_IDX_0 "okay"
#define DT_N_S_counter_P_status_IDX_0_EXISTS 1
#define DT_N_S_counter_P_status_ENUM_IDX 1
#define DT_N_S_counter_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_counter_P_status_ENUM_TOKEN okay
#define DT_N_S_counter_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_counter, status, 0)
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_counter, status, 0)
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_counter, status, 0, __VA_ARGS__)
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_counter, status, 0, __VA_ARGS__)
#define DT_N_S_counter_P_status_LEN 1
#define DT_N_S_counter_P_status_EXISTS 1
#define DT_N_S_counter_P_compatible {"zephyr,native-posix-counter"}
#define DT_N_S_counter_P_compatible_IDX_0 "zephyr,native-posix-counter"
#define DT_N_S_counter_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-counter
#define DT_N_S_counter_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_counter
#define DT_N_S_counter_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_COUNTER
#define DT_N_S_counter_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_counter, compatible, 0)
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_counter, compatible, 0)
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_counter, compatible, 0, __VA_ARGS__)
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_counter, compatible, 0, __VA_ARGS__)
#define DT_N_S_counter_P_compatible_LEN 1
#define DT_N_S_counter_P_compatible_EXISTS 1
#define DT_N_S_counter_P_wakeup_source 0
#define DT_N_S_counter_P_wakeup_source_EXISTS 1
#define DT_N_S_counter_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_counter_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /dma
 *
 * Node identifier: DT_N_S_dma
 *
 * Binding (compatible = zephyr,dma-emul):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/dma/zephyr,dma-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_dma_PATH "/dma"

/* Node's name with unit-address: */
#define DT_N_S_dma_FULL_NAME "dma"

/* Node parent (/) identifier: */
#define DT_N_S_dma_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_dma_CHILD_IDX 22

/* Helper macros for child nodes of this node. */
#define DT_N_S_dma_FOREACH_CHILD(fn) 
#define DT_N_S_dma_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_dma_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_dma_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_dma_ORD 7
#define DT_N_S_dma_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_dma_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_dma_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_dma_EXISTS 1
#define DT_N_INST_0_zephyr_dma_emul DT_N_S_dma
#define DT_N_NODELABEL_dma          DT_N_S_dma

/* Macros for properties that are special in the specification: */
#define DT_N_S_dma_REG_NUM 0
#define DT_N_S_dma_RANGES_NUM 0
#define DT_N_S_dma_FOREACH_RANGE(fn) 
#define DT_N_S_dma_IRQ_NUM 0
#define DT_N_S_dma_IRQ_LEVEL 0
#define DT_N_S_dma_COMPAT_MATCHES_zephyr_dma_emul 1
#define DT_N_S_dma_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_dma_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_dma_P_stack_size 4096
#define DT_N_S_dma_P_stack_size_EXISTS 1
#define DT_N_S_dma_P_compatible {"zephyr,dma-emul"}
#define DT_N_S_dma_P_compatible_IDX_0 "zephyr,dma-emul"
#define DT_N_S_dma_P_compatible_IDX_0_STRING_UNQUOTED zephyr,dma-emul
#define DT_N_S_dma_P_compatible_IDX_0_STRING_TOKEN zephyr_dma_emul
#define DT_N_S_dma_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_DMA_EMUL
#define DT_N_S_dma_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_dma, compatible, 0)
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_dma, compatible, 0)
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_dma, compatible, 0, __VA_ARGS__)
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_dma, compatible, 0, __VA_ARGS__)
#define DT_N_S_dma_P_compatible_LEN 1
#define DT_N_S_dma_P_compatible_EXISTS 1
#define DT_N_S_dma_P_wakeup_source 0
#define DT_N_S_dma_P_wakeup_source_EXISTS 1
#define DT_N_S_dma_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_dma_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /eeprom
 *
 * Node identifier: DT_N_S_eeprom
 *
 * Binding (compatible = zephyr,sim-eeprom):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/mtd/zephyr,sim-eeprom.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_eeprom_PATH "/eeprom"

/* Node's name with unit-address: */
#define DT_N_S_eeprom_FULL_NAME "eeprom"

/* Node parent (/) identifier: */
#define DT_N_S_eeprom_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_eeprom_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_eeprom_FOREACH_CHILD(fn) 
#define DT_N_S_eeprom_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_eeprom_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_eeprom_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_eeprom_ORD 8
#define DT_N_S_eeprom_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_eeprom_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_eeprom_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_eeprom_EXISTS 1
#define DT_N_ALIAS_eeprom_0           DT_N_S_eeprom
#define DT_N_INST_0_zephyr_sim_eeprom DT_N_S_eeprom
#define DT_N_NODELABEL_eeprom0        DT_N_S_eeprom

/* Macros for properties that are special in the specification: */
#define DT_N_S_eeprom_REG_NUM 0
#define DT_N_S_eeprom_RANGES_NUM 0
#define DT_N_S_eeprom_FOREACH_RANGE(fn) 
#define DT_N_S_eeprom_IRQ_NUM 0
#define DT_N_S_eeprom_IRQ_LEVEL 0
#define DT_N_S_eeprom_COMPAT_MATCHES_zephyr_sim_eeprom 1
#define DT_N_S_eeprom_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_eeprom_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_eeprom_P_size 32768
#define DT_N_S_eeprom_P_size_EXISTS 1
#define DT_N_S_eeprom_P_read_only 0
#define DT_N_S_eeprom_P_read_only_EXISTS 1
#define DT_N_S_eeprom_P_status "okay"
#define DT_N_S_eeprom_P_status_STRING_UNQUOTED okay
#define DT_N_S_eeprom_P_status_STRING_TOKEN okay
#define DT_N_S_eeprom_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_eeprom_P_status_IDX_0 "okay"
#define DT_N_S_eeprom_P_status_IDX_0_EXISTS 1
#define DT_N_S_eeprom_P_status_ENUM_IDX 1
#define DT_N_S_eeprom_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_eeprom_P_status_ENUM_TOKEN okay
#define DT_N_S_eeprom_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom, status, 0)
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom, status, 0)
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_status_LEN 1
#define DT_N_S_eeprom_P_status_EXISTS 1
#define DT_N_S_eeprom_P_compatible {"zephyr,sim-eeprom"}
#define DT_N_S_eeprom_P_compatible_IDX_0 "zephyr,sim-eeprom"
#define DT_N_S_eeprom_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sim-eeprom
#define DT_N_S_eeprom_P_compatible_IDX_0_STRING_TOKEN zephyr_sim_eeprom
#define DT_N_S_eeprom_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SIM_EEPROM
#define DT_N_S_eeprom_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom, compatible, 0)
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom, compatible, 0)
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_compatible_LEN 1
#define DT_N_S_eeprom_P_compatible_EXISTS 1
#define DT_N_S_eeprom_P_wakeup_source 0
#define DT_N_S_eeprom_P_wakeup_source_EXISTS 1
#define DT_N_S_eeprom_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_eeprom_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /espi@300
 *
 * Node identifier: DT_N_S_espi_300
 *
 * Binding (compatible = zephyr,espi-emul-controller):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/espi/zephyr,espi-emul-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_espi_300_PATH "/espi@300"

/* Node's name with unit-address: */
#define DT_N_S_espi_300_FULL_NAME "espi@300"

/* Node parent (/) identifier: */
#define DT_N_S_espi_300_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_espi_300_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_espi_300_FOREACH_CHILD(fn) 
#define DT_N_S_espi_300_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_espi_300_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_espi_300_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_espi_300_ORD 9
#define DT_N_S_espi_300_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_espi_300_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_espi_300_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_espi_300_EXISTS 1
#define DT_N_INST_0_zephyr_espi_emul_controller DT_N_S_espi_300
#define DT_N_NODELABEL_espi0                    DT_N_S_espi_300

/* Macros for properties that are special in the specification: */
#define DT_N_S_espi_300_REG_NUM 1
#define DT_N_S_espi_300_REG_IDX_0_EXISTS 1
#define DT_N_S_espi_300_REG_IDX_0_VAL_ADDRESS 768 /* 0x300 */
#define DT_N_S_espi_300_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_espi_300_RANGES_NUM 0
#define DT_N_S_espi_300_FOREACH_RANGE(fn) 
#define DT_N_S_espi_300_IRQ_NUM 0
#define DT_N_S_espi_300_IRQ_LEVEL 0
#define DT_N_S_espi_300_COMPAT_MATCHES_zephyr_espi_emul_controller 1
#define DT_N_S_espi_300_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_espi_300_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_espi_300_P_reg {768 /* 0x300 */, 4 /* 0x4 */}
#define DT_N_S_espi_300_P_reg_IDX_0 768
#define DT_N_S_espi_300_P_reg_IDX_0_EXISTS 1
#define DT_N_S_espi_300_P_reg_IDX_1 4
#define DT_N_S_espi_300_P_reg_IDX_1_EXISTS 1
#define DT_N_S_espi_300_P_reg_EXISTS 1
#define DT_N_S_espi_300_P_status "okay"
#define DT_N_S_espi_300_P_status_STRING_UNQUOTED okay
#define DT_N_S_espi_300_P_status_STRING_TOKEN okay
#define DT_N_S_espi_300_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_espi_300_P_status_IDX_0 "okay"
#define DT_N_S_espi_300_P_status_IDX_0_EXISTS 1
#define DT_N_S_espi_300_P_status_ENUM_IDX 1
#define DT_N_S_espi_300_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_espi_300_P_status_ENUM_TOKEN okay
#define DT_N_S_espi_300_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_espi_300, status, 0)
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_espi_300, status, 0)
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_espi_300, status, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_espi_300, status, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_status_LEN 1
#define DT_N_S_espi_300_P_status_EXISTS 1
#define DT_N_S_espi_300_P_compatible {"zephyr,espi-emul-controller"}
#define DT_N_S_espi_300_P_compatible_IDX_0 "zephyr,espi-emul-controller"
#define DT_N_S_espi_300_P_compatible_IDX_0_STRING_UNQUOTED zephyr,espi-emul-controller
#define DT_N_S_espi_300_P_compatible_IDX_0_STRING_TOKEN zephyr_espi_emul_controller
#define DT_N_S_espi_300_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_ESPI_EMUL_CONTROLLER
#define DT_N_S_espi_300_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_espi_300, compatible, 0)
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_espi_300, compatible, 0)
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_espi_300, compatible, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_espi_300, compatible, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_compatible_LEN 1
#define DT_N_S_espi_300_P_compatible_EXISTS 1
#define DT_N_S_espi_300_P_wakeup_source 0
#define DT_N_S_espi_300_P_wakeup_source_EXISTS 1
#define DT_N_S_espi_300_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_espi_300_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /i2c@100
 *
 * Node identifier: DT_N_S_i2c_100
 *
 * Binding (compatible = zephyr,i2c-emul-controller):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/i2c/zephyr,i2c-emul-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_i2c_100_PATH "/i2c@100"

/* Node's name with unit-address: */
#define DT_N_S_i2c_100_FULL_NAME "i2c@100"

/* Node parent (/) identifier: */
#define DT_N_S_i2c_100_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_i2c_100_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_i2c_100_FOREACH_CHILD(fn) 
#define DT_N_S_i2c_100_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_i2c_100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_i2c_100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_i2c_100_ORD 10
#define DT_N_S_i2c_100_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_i2c_100_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_i2c_100_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_i2c_100_EXISTS 1
#define DT_N_ALIAS_i2c_0                       DT_N_S_i2c_100
#define DT_N_INST_0_zephyr_i2c_emul_controller DT_N_S_i2c_100
#define DT_N_NODELABEL_i2c0                    DT_N_S_i2c_100

/* Macros for properties that are special in the specification: */
#define DT_N_S_i2c_100_REG_NUM 1
#define DT_N_S_i2c_100_REG_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_REG_IDX_0_VAL_ADDRESS 256 /* 0x100 */
#define DT_N_S_i2c_100_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_i2c_100_RANGES_NUM 0
#define DT_N_S_i2c_100_FOREACH_RANGE(fn) 
#define DT_N_S_i2c_100_IRQ_NUM 0
#define DT_N_S_i2c_100_IRQ_LEVEL 0
#define DT_N_S_i2c_100_COMPAT_MATCHES_zephyr_i2c_emul_controller 1
#define DT_N_S_i2c_100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_i2c_100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_i2c_100_P_reg {256 /* 0x100 */, 4 /* 0x4 */}
#define DT_N_S_i2c_100_P_reg_IDX_0 256
#define DT_N_S_i2c_100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_P_reg_IDX_1 4
#define DT_N_S_i2c_100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_i2c_100_P_reg_EXISTS 1
#define DT_N_S_i2c_100_P_clock_frequency 100000
#define DT_N_S_i2c_100_P_clock_frequency_EXISTS 1
#define DT_N_S_i2c_100_P_status "okay"
#define DT_N_S_i2c_100_P_status_STRING_UNQUOTED okay
#define DT_N_S_i2c_100_P_status_STRING_TOKEN okay
#define DT_N_S_i2c_100_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_i2c_100_P_status_IDX_0 "okay"
#define DT_N_S_i2c_100_P_status_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_P_status_ENUM_IDX 1
#define DT_N_S_i2c_100_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_i2c_100_P_status_ENUM_TOKEN okay
#define DT_N_S_i2c_100_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_i2c_100, status, 0)
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_i2c_100, status, 0)
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_i2c_100, status, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_i2c_100, status, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_status_LEN 1
#define DT_N_S_i2c_100_P_status_EXISTS 1
#define DT_N_S_i2c_100_P_compatible {"zephyr,i2c-emul-controller"}
#define DT_N_S_i2c_100_P_compatible_IDX_0 "zephyr,i2c-emul-controller"
#define DT_N_S_i2c_100_P_compatible_IDX_0_STRING_UNQUOTED zephyr,i2c-emul-controller
#define DT_N_S_i2c_100_P_compatible_IDX_0_STRING_TOKEN zephyr_i2c_emul_controller
#define DT_N_S_i2c_100_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_I2C_EMUL_CONTROLLER
#define DT_N_S_i2c_100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_i2c_100, compatible, 0)
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_i2c_100, compatible, 0)
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_i2c_100, compatible, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_i2c_100, compatible, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_compatible_LEN 1
#define DT_N_S_i2c_100_P_compatible_EXISTS 1
#define DT_N_S_i2c_100_P_wakeup_source 0
#define DT_N_S_i2c_100_P_wakeup_source_EXISTS 1
#define DT_N_S_i2c_100_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_i2c_100_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /input-sdl-touch
 *
 * Node identifier: DT_N_S_input_sdl_touch
 *
 * Binding (compatible = zephyr,input-sdl-touch):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/input/zephyr,input-sdl-touch.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_input_sdl_touch_PATH "/input-sdl-touch"

/* Node's name with unit-address: */
#define DT_N_S_input_sdl_touch_FULL_NAME "input-sdl-touch"

/* Node parent (/) identifier: */
#define DT_N_S_input_sdl_touch_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_input_sdl_touch_CHILD_IDX 17

/* Helper macros for child nodes of this node. */
#define DT_N_S_input_sdl_touch_FOREACH_CHILD(fn) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_input_sdl_touch_ORD 11
#define DT_N_S_input_sdl_touch_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_input_sdl_touch_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_input_sdl_touch_SUPPORTS_ORDS \
	12, /* /lvgl_pointer */

/* Existence and alternate IDs: */
#define DT_N_S_input_sdl_touch_EXISTS 1
#define DT_N_INST_0_zephyr_input_sdl_touch DT_N_S_input_sdl_touch
#define DT_N_NODELABEL_input_sdl_touch     DT_N_S_input_sdl_touch

/* Macros for properties that are special in the specification: */
#define DT_N_S_input_sdl_touch_REG_NUM 0
#define DT_N_S_input_sdl_touch_RANGES_NUM 0
#define DT_N_S_input_sdl_touch_FOREACH_RANGE(fn) 
#define DT_N_S_input_sdl_touch_IRQ_NUM 0
#define DT_N_S_input_sdl_touch_IRQ_LEVEL 0
#define DT_N_S_input_sdl_touch_COMPAT_MATCHES_zephyr_input_sdl_touch 1
#define DT_N_S_input_sdl_touch_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_input_sdl_touch_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_input_sdl_touch_P_compatible {"zephyr,input-sdl-touch"}
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0 "zephyr,input-sdl-touch"
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_STRING_UNQUOTED zephyr,input-sdl-touch
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_STRING_TOKEN zephyr_input_sdl_touch
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_INPUT_SDL_TOUCH
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_input_sdl_touch, compatible, 0)
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_input_sdl_touch, compatible, 0)
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_input_sdl_touch, compatible, 0, __VA_ARGS__)
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_input_sdl_touch, compatible, 0, __VA_ARGS__)
#define DT_N_S_input_sdl_touch_P_compatible_LEN 1
#define DT_N_S_input_sdl_touch_P_compatible_EXISTS 1

/*
 * Devicetree node: /lvgl_pointer
 *
 * Node identifier: DT_N_S_lvgl_pointer
 *
 * Binding (compatible = zephyr,lvgl-pointer-input):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/input/zephyr,lvgl-pointer-input.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lvgl_pointer_PATH "/lvgl_pointer"

/* Node's name with unit-address: */
#define DT_N_S_lvgl_pointer_FULL_NAME "lvgl_pointer"

/* Node parent (/) identifier: */
#define DT_N_S_lvgl_pointer_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_lvgl_pointer_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_lvgl_pointer_FOREACH_CHILD(fn) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_lvgl_pointer_ORD 12
#define DT_N_S_lvgl_pointer_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lvgl_pointer_REQUIRES_ORDS \
	0, /* / */ \
	11, /* /input-sdl-touch */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lvgl_pointer_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_lvgl_pointer_EXISTS 1
#define DT_N_INST_0_zephyr_lvgl_pointer_input DT_N_S_lvgl_pointer

/* Macros for properties that are special in the specification: */
#define DT_N_S_lvgl_pointer_REG_NUM 0
#define DT_N_S_lvgl_pointer_RANGES_NUM 0
#define DT_N_S_lvgl_pointer_FOREACH_RANGE(fn) 
#define DT_N_S_lvgl_pointer_IRQ_NUM 0
#define DT_N_S_lvgl_pointer_IRQ_LEVEL 0
#define DT_N_S_lvgl_pointer_COMPAT_MATCHES_zephyr_lvgl_pointer_input 1
#define DT_N_S_lvgl_pointer_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lvgl_pointer_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lvgl_pointer_P_swap_xy 0
#define DT_N_S_lvgl_pointer_P_swap_xy_EXISTS 1
#define DT_N_S_lvgl_pointer_P_invert_x 0
#define DT_N_S_lvgl_pointer_P_invert_x_EXISTS 1
#define DT_N_S_lvgl_pointer_P_invert_y 0
#define DT_N_S_lvgl_pointer_P_invert_y_EXISTS 1
#define DT_N_S_lvgl_pointer_P_input DT_N_S_input_sdl_touch
#define DT_N_S_lvgl_pointer_P_input_IDX_0 DT_N_S_input_sdl_touch
#define DT_N_S_lvgl_pointer_P_input_IDX_0_PH DT_N_S_input_sdl_touch
#define DT_N_S_lvgl_pointer_P_input_IDX_0_EXISTS 1
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_pointer, input, 0)
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_pointer, input, 0)
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_pointer, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_pointer, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_pointer_P_input_LEN 1
#define DT_N_S_lvgl_pointer_P_input_EXISTS 1

/*
 * Devicetree node: /non-deprecated-label
 *
 * Node identifier: DT_N_S_non_deprecated_label
 *
 * Binding (compatible = vnd,non-deprecated-label):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,non-deprecated-label.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_non_deprecated_label_PATH "/non-deprecated-label"

/* Node's name with unit-address: */
#define DT_N_S_non_deprecated_label_FULL_NAME "non-deprecated-label"

/* Node parent (/) identifier: */
#define DT_N_S_non_deprecated_label_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_non_deprecated_label_CHILD_IDX 26

/* Helper macros for child nodes of this node. */
#define DT_N_S_non_deprecated_label_FOREACH_CHILD(fn) 
#define DT_N_S_non_deprecated_label_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_non_deprecated_label_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_non_deprecated_label_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_non_deprecated_label_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_non_deprecated_label_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_non_deprecated_label_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_non_deprecated_label_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_non_deprecated_label_ORD 13
#define DT_N_S_non_deprecated_label_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_non_deprecated_label_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_non_deprecated_label_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_non_deprecated_label_EXISTS 1
#define DT_N_INST_0_vnd_non_deprecated_label DT_N_S_non_deprecated_label

/* Macros for properties that are special in the specification: */
#define DT_N_S_non_deprecated_label_REG_NUM 0
#define DT_N_S_non_deprecated_label_RANGES_NUM 0
#define DT_N_S_non_deprecated_label_FOREACH_RANGE(fn) 
#define DT_N_S_non_deprecated_label_IRQ_NUM 0
#define DT_N_S_non_deprecated_label_IRQ_LEVEL 0
#define DT_N_S_non_deprecated_label_COMPAT_MATCHES_vnd_non_deprecated_label 1
#define DT_N_S_non_deprecated_label_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_non_deprecated_label_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_non_deprecated_label_P_label "FOO"
#define DT_N_S_non_deprecated_label_P_label_STRING_UNQUOTED FOO
#define DT_N_S_non_deprecated_label_P_label_STRING_TOKEN FOO
#define DT_N_S_non_deprecated_label_P_label_STRING_UPPER_TOKEN FOO
#define DT_N_S_non_deprecated_label_P_label_IDX_0 "FOO"
#define DT_N_S_non_deprecated_label_P_label_IDX_0_EXISTS 1
#define DT_N_S_non_deprecated_label_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_non_deprecated_label, label, 0)
#define DT_N_S_non_deprecated_label_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_non_deprecated_label, label, 0)
#define DT_N_S_non_deprecated_label_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_non_deprecated_label, label, 0, __VA_ARGS__)
#define DT_N_S_non_deprecated_label_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_non_deprecated_label, label, 0, __VA_ARGS__)
#define DT_N_S_non_deprecated_label_P_label_LEN 1
#define DT_N_S_non_deprecated_label_P_label_EXISTS 1

/*
 * Devicetree node: /rng
 *
 * Node identifier: DT_N_S_rng
 *
 * Binding (compatible = zephyr,native-posix-rng):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/rng/zephyr,native-posix-rng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_rng_PATH "/rng"

/* Node's name with unit-address: */
#define DT_N_S_rng_FULL_NAME "rng"

/* Node parent (/) identifier: */
#define DT_N_S_rng_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_rng_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_rng_FOREACH_CHILD(fn) 
#define DT_N_S_rng_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_rng_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_rng_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_rng_ORD 14
#define DT_N_S_rng_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_rng_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_rng_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_rng_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_rng DT_N_S_rng
#define DT_N_NODELABEL_rng                  DT_N_S_rng

/* Macros for properties that are special in the specification: */
#define DT_N_S_rng_REG_NUM 0
#define DT_N_S_rng_RANGES_NUM 0
#define DT_N_S_rng_FOREACH_RANGE(fn) 
#define DT_N_S_rng_IRQ_NUM 0
#define DT_N_S_rng_IRQ_LEVEL 0
#define DT_N_S_rng_COMPAT_MATCHES_zephyr_native_posix_rng 1
#define DT_N_S_rng_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_rng_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_rng_P_status "okay"
#define DT_N_S_rng_P_status_STRING_UNQUOTED okay
#define DT_N_S_rng_P_status_STRING_TOKEN okay
#define DT_N_S_rng_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_rng_P_status_IDX_0 "okay"
#define DT_N_S_rng_P_status_IDX_0_EXISTS 1
#define DT_N_S_rng_P_status_ENUM_IDX 1
#define DT_N_S_rng_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_rng_P_status_ENUM_TOKEN okay
#define DT_N_S_rng_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rng, status, 0)
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rng, status, 0)
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rng, status, 0, __VA_ARGS__)
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rng, status, 0, __VA_ARGS__)
#define DT_N_S_rng_P_status_LEN 1
#define DT_N_S_rng_P_status_EXISTS 1
#define DT_N_S_rng_P_compatible {"zephyr,native-posix-rng"}
#define DT_N_S_rng_P_compatible_IDX_0 "zephyr,native-posix-rng"
#define DT_N_S_rng_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-rng
#define DT_N_S_rng_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_rng
#define DT_N_S_rng_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_RNG
#define DT_N_S_rng_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rng, compatible, 0)
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rng, compatible, 0)
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rng, compatible, 0, __VA_ARGS__)
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rng, compatible, 0, __VA_ARGS__)
#define DT_N_S_rng_P_compatible_LEN 1
#define DT_N_S_rng_P_compatible_EXISTS 1
#define DT_N_S_rng_P_wakeup_source 0
#define DT_N_S_rng_P_wakeup_source_EXISTS 1
#define DT_N_S_rng_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_rng_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /rtc
 *
 * Node identifier: DT_N_S_rtc
 *
 * Binding (compatible = zephyr,rtc-emul):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/rtc/zephyr,rtc-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_rtc_PATH "/rtc"

/* Node's name with unit-address: */
#define DT_N_S_rtc_FULL_NAME "rtc"

/* Node parent (/) identifier: */
#define DT_N_S_rtc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_rtc_CHILD_IDX 20

/* Helper macros for child nodes of this node. */
#define DT_N_S_rtc_FOREACH_CHILD(fn) 
#define DT_N_S_rtc_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_rtc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_rtc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_rtc_ORD 15
#define DT_N_S_rtc_ORD_STR_SORTABLE 00015

/* Ordinals for what this node depends on directly: */
#define DT_N_S_rtc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_rtc_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_rtc_EXISTS 1
#define DT_N_ALIAS_rtc              DT_N_S_rtc
#define DT_N_INST_0_zephyr_rtc_emul DT_N_S_rtc
#define DT_N_NODELABEL_rtc          DT_N_S_rtc

/* Macros for properties that are special in the specification: */
#define DT_N_S_rtc_REG_NUM 0
#define DT_N_S_rtc_RANGES_NUM 0
#define DT_N_S_rtc_FOREACH_RANGE(fn) 
#define DT_N_S_rtc_IRQ_NUM 0
#define DT_N_S_rtc_IRQ_LEVEL 0
#define DT_N_S_rtc_COMPAT_MATCHES_zephyr_rtc_emul 1
#define DT_N_S_rtc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_rtc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_rtc_P_alarms_count 2
#define DT_N_S_rtc_P_alarms_count_EXISTS 1
#define DT_N_S_rtc_P_status "okay"
#define DT_N_S_rtc_P_status_STRING_UNQUOTED okay
#define DT_N_S_rtc_P_status_STRING_TOKEN okay
#define DT_N_S_rtc_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_rtc_P_status_IDX_0 "okay"
#define DT_N_S_rtc_P_status_IDX_0_EXISTS 1
#define DT_N_S_rtc_P_status_ENUM_IDX 1
#define DT_N_S_rtc_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_rtc_P_status_ENUM_TOKEN okay
#define DT_N_S_rtc_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rtc, status, 0)
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rtc, status, 0)
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rtc, status, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rtc, status, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_status_LEN 1
#define DT_N_S_rtc_P_status_EXISTS 1
#define DT_N_S_rtc_P_compatible {"zephyr,rtc-emul"}
#define DT_N_S_rtc_P_compatible_IDX_0 "zephyr,rtc-emul"
#define DT_N_S_rtc_P_compatible_IDX_0_STRING_UNQUOTED zephyr,rtc-emul
#define DT_N_S_rtc_P_compatible_IDX_0_STRING_TOKEN zephyr_rtc_emul
#define DT_N_S_rtc_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_RTC_EMUL
#define DT_N_S_rtc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rtc, compatible, 0)
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rtc, compatible, 0)
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rtc, compatible, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rtc, compatible, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_compatible_LEN 1
#define DT_N_S_rtc_P_compatible_EXISTS 1
#define DT_N_S_rtc_P_wakeup_source 0
#define DT_N_S_rtc_P_wakeup_source_EXISTS 1
#define DT_N_S_rtc_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_rtc_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /sdl_dc
 *
 * Node identifier: DT_N_S_sdl_dc
 *
 * Binding (compatible = zephyr,sdl-dc):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/display/zephyr,sdl-dc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sdl_dc_PATH "/sdl_dc"

/* Node's name with unit-address: */
#define DT_N_S_sdl_dc_FULL_NAME "sdl_dc"

/* Node parent (/) identifier: */
#define DT_N_S_sdl_dc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_sdl_dc_CHILD_IDX 16

/* Helper macros for child nodes of this node. */
#define DT_N_S_sdl_dc_FOREACH_CHILD(fn) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_sdl_dc_ORD 16
#define DT_N_S_sdl_dc_ORD_STR_SORTABLE 00016

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sdl_dc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sdl_dc_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_sdl_dc_EXISTS 1
#define DT_N_INST_0_zephyr_sdl_dc DT_N_S_sdl_dc
#define DT_N_NODELABEL_sdl_dc     DT_N_S_sdl_dc

/* Macros for properties that are special in the specification: */
#define DT_N_S_sdl_dc_REG_NUM 0
#define DT_N_S_sdl_dc_RANGES_NUM 0
#define DT_N_S_sdl_dc_FOREACH_RANGE(fn) 
#define DT_N_S_sdl_dc_IRQ_NUM 0
#define DT_N_S_sdl_dc_IRQ_LEVEL 0
#define DT_N_S_sdl_dc_COMPAT_MATCHES_zephyr_sdl_dc 1
#define DT_N_S_sdl_dc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sdl_dc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_sdl_dc_P_height 240
#define DT_N_S_sdl_dc_P_height_EXISTS 1
#define DT_N_S_sdl_dc_P_width 320
#define DT_N_S_sdl_dc_P_width_EXISTS 1
#define DT_N_S_sdl_dc_P_compatible {"zephyr,sdl-dc"}
#define DT_N_S_sdl_dc_P_compatible_IDX_0 "zephyr,sdl-dc"
#define DT_N_S_sdl_dc_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sdl-dc
#define DT_N_S_sdl_dc_P_compatible_IDX_0_STRING_TOKEN zephyr_sdl_dc
#define DT_N_S_sdl_dc_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SDL_DC
#define DT_N_S_sdl_dc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sdl_dc, compatible, 0)
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sdl_dc, compatible, 0)
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sdl_dc, compatible, 0, __VA_ARGS__)
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sdl_dc, compatible, 0, __VA_ARGS__)
#define DT_N_S_sdl_dc_P_compatible_LEN 1
#define DT_N_S_sdl_dc_P_compatible_EXISTS 1
#define DT_N_S_sdl_dc_P_wakeup_source 0
#define DT_N_S_sdl_dc_P_wakeup_source_EXISTS 1
#define DT_N_S_sdl_dc_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_sdl_dc_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /spi@200
 *
 * Node identifier: DT_N_S_spi_200
 *
 * Binding (compatible = zephyr,spi-emul-controller):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/spi/zephyr,spi-emul-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_spi_200_PATH "/spi@200"

/* Node's name with unit-address: */
#define DT_N_S_spi_200_FULL_NAME "spi@200"

/* Node parent (/) identifier: */
#define DT_N_S_spi_200_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_spi_200_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_spi_200_FOREACH_CHILD(fn) 
#define DT_N_S_spi_200_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_spi_200_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_spi_200_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_spi_200_ORD 17
#define DT_N_S_spi_200_ORD_STR_SORTABLE 00017

/* Ordinals for what this node depends on directly: */
#define DT_N_S_spi_200_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_spi_200_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_spi_200_EXISTS 1
#define DT_N_ALIAS_spi_0                       DT_N_S_spi_200
#define DT_N_INST_0_zephyr_spi_emul_controller DT_N_S_spi_200
#define DT_N_NODELABEL_spi0                    DT_N_S_spi_200

/* Macros for properties that are special in the specification: */
#define DT_N_S_spi_200_REG_NUM 1
#define DT_N_S_spi_200_REG_IDX_0_EXISTS 1
#define DT_N_S_spi_200_REG_IDX_0_VAL_ADDRESS 512 /* 0x200 */
#define DT_N_S_spi_200_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_spi_200_RANGES_NUM 0
#define DT_N_S_spi_200_FOREACH_RANGE(fn) 
#define DT_N_S_spi_200_IRQ_NUM 0
#define DT_N_S_spi_200_IRQ_LEVEL 0
#define DT_N_S_spi_200_COMPAT_MATCHES_zephyr_spi_emul_controller 1
#define DT_N_S_spi_200_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_spi_200_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_spi_200_P_reg {512 /* 0x200 */, 4 /* 0x4 */}
#define DT_N_S_spi_200_P_reg_IDX_0 512
#define DT_N_S_spi_200_P_reg_IDX_0_EXISTS 1
#define DT_N_S_spi_200_P_reg_IDX_1 4
#define DT_N_S_spi_200_P_reg_IDX_1_EXISTS 1
#define DT_N_S_spi_200_P_reg_EXISTS 1
#define DT_N_S_spi_200_P_clock_frequency 50000000
#define DT_N_S_spi_200_P_clock_frequency_EXISTS 1
#define DT_N_S_spi_200_P_status "okay"
#define DT_N_S_spi_200_P_status_STRING_UNQUOTED okay
#define DT_N_S_spi_200_P_status_STRING_TOKEN okay
#define DT_N_S_spi_200_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_spi_200_P_status_IDX_0 "okay"
#define DT_N_S_spi_200_P_status_IDX_0_EXISTS 1
#define DT_N_S_spi_200_P_status_ENUM_IDX 1
#define DT_N_S_spi_200_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_spi_200_P_status_ENUM_TOKEN okay
#define DT_N_S_spi_200_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200, status, 0)
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200, status, 0)
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200, status, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200, status, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_status_LEN 1
#define DT_N_S_spi_200_P_status_EXISTS 1
#define DT_N_S_spi_200_P_compatible {"zephyr,spi-emul-controller"}
#define DT_N_S_spi_200_P_compatible_IDX_0 "zephyr,spi-emul-controller"
#define DT_N_S_spi_200_P_compatible_IDX_0_STRING_UNQUOTED zephyr,spi-emul-controller
#define DT_N_S_spi_200_P_compatible_IDX_0_STRING_TOKEN zephyr_spi_emul_controller
#define DT_N_S_spi_200_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SPI_EMUL_CONTROLLER
#define DT_N_S_spi_200_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200, compatible, 0)
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200, compatible, 0)
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200, compatible, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200, compatible, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_compatible_LEN 1
#define DT_N_S_spi_200_P_compatible_EXISTS 1
#define DT_N_S_spi_200_P_wakeup_source 0
#define DT_N_S_spi_200_P_wakeup_source_EXISTS 1
#define DT_N_S_spi_200_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_spi_200_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /uart
 *
 * Node identifier: DT_N_S_uart
 *
 * Binding (compatible = zephyr,native-posix-uart):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/serial/zephyr,native-posix-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_uart_PATH "/uart"

/* Node's name with unit-address: */
#define DT_N_S_uart_FULL_NAME "uart"

/* Node parent (/) identifier: */
#define DT_N_S_uart_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_uart_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_uart_FOREACH_CHILD(fn) 
#define DT_N_S_uart_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_uart_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_uart_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_uart_ORD 18
#define DT_N_S_uart_ORD_STR_SORTABLE 00018

/* Ordinals for what this node depends on directly: */
#define DT_N_S_uart_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_uart_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_uart_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_uart DT_N_S_uart
#define DT_N_NODELABEL_uart0                 DT_N_S_uart

/* Macros for properties that are special in the specification: */
#define DT_N_S_uart_REG_NUM 0
#define DT_N_S_uart_RANGES_NUM 0
#define DT_N_S_uart_FOREACH_RANGE(fn) 
#define DT_N_S_uart_IRQ_NUM 0
#define DT_N_S_uart_IRQ_LEVEL 0
#define DT_N_S_uart_COMPAT_MATCHES_zephyr_native_posix_uart 1
#define DT_N_S_uart_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_uart_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_uart_P_current_speed 0
#define DT_N_S_uart_P_current_speed_EXISTS 1
#define DT_N_S_uart_P_hw_flow_control 0
#define DT_N_S_uart_P_hw_flow_control_EXISTS 1
#define DT_N_S_uart_P_status "okay"
#define DT_N_S_uart_P_status_STRING_UNQUOTED okay
#define DT_N_S_uart_P_status_STRING_TOKEN okay
#define DT_N_S_uart_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_uart_P_status_IDX_0 "okay"
#define DT_N_S_uart_P_status_IDX_0_EXISTS 1
#define DT_N_S_uart_P_status_ENUM_IDX 1
#define DT_N_S_uart_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_uart_P_status_ENUM_TOKEN okay
#define DT_N_S_uart_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart, status, 0)
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart, status, 0)
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart, status, 0, __VA_ARGS__)
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart, status, 0, __VA_ARGS__)
#define DT_N_S_uart_P_status_LEN 1
#define DT_N_S_uart_P_status_EXISTS 1
#define DT_N_S_uart_P_compatible {"zephyr,native-posix-uart"}
#define DT_N_S_uart_P_compatible_IDX_0 "zephyr,native-posix-uart"
#define DT_N_S_uart_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-uart
#define DT_N_S_uart_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_uart
#define DT_N_S_uart_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_UART
#define DT_N_S_uart_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart, compatible, 0)
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart, compatible, 0)
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_P_compatible_LEN 1
#define DT_N_S_uart_P_compatible_EXISTS 1
#define DT_N_S_uart_P_wakeup_source 0
#define DT_N_S_uart_P_wakeup_source_EXISTS 1
#define DT_N_S_uart_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_uart_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /uart_1
 *
 * Node identifier: DT_N_S_uart_1
 *
 * Binding (compatible = zephyr,native-posix-uart):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/serial/zephyr,native-posix-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_uart_1_PATH "/uart_1"

/* Node's name with unit-address: */
#define DT_N_S_uart_1_FULL_NAME "uart_1"

/* Node parent (/) identifier: */
#define DT_N_S_uart_1_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_uart_1_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_uart_1_FOREACH_CHILD(fn) 
#define DT_N_S_uart_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_uart_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_uart_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_uart_1_ORD 19
#define DT_N_S_uart_1_ORD_STR_SORTABLE 00019

/* Ordinals for what this node depends on directly: */
#define DT_N_S_uart_1_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_uart_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_uart_1_EXISTS 1
#define DT_N_INST_1_zephyr_native_posix_uart DT_N_S_uart_1
#define DT_N_NODELABEL_uart1                 DT_N_S_uart_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_uart_1_REG_NUM 0
#define DT_N_S_uart_1_RANGES_NUM 0
#define DT_N_S_uart_1_FOREACH_RANGE(fn) 
#define DT_N_S_uart_1_IRQ_NUM 0
#define DT_N_S_uart_1_IRQ_LEVEL 0
#define DT_N_S_uart_1_COMPAT_MATCHES_zephyr_native_posix_uart 1
#define DT_N_S_uart_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_uart_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_uart_1_P_current_speed 0
#define DT_N_S_uart_1_P_current_speed_EXISTS 1
#define DT_N_S_uart_1_P_hw_flow_control 0
#define DT_N_S_uart_1_P_hw_flow_control_EXISTS 1
#define DT_N_S_uart_1_P_status "okay"
#define DT_N_S_uart_1_P_status_STRING_UNQUOTED okay
#define DT_N_S_uart_1_P_status_STRING_TOKEN okay
#define DT_N_S_uart_1_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_uart_1_P_status_IDX_0 "okay"
#define DT_N_S_uart_1_P_status_IDX_0_EXISTS 1
#define DT_N_S_uart_1_P_status_ENUM_IDX 1
#define DT_N_S_uart_1_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_uart_1_P_status_ENUM_TOKEN okay
#define DT_N_S_uart_1_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_1, status, 0)
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart_1, status, 0)
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_1, status, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart_1, status, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_status_LEN 1
#define DT_N_S_uart_1_P_status_EXISTS 1
#define DT_N_S_uart_1_P_compatible {"zephyr,native-posix-uart"}
#define DT_N_S_uart_1_P_compatible_IDX_0 "zephyr,native-posix-uart"
#define DT_N_S_uart_1_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-uart
#define DT_N_S_uart_1_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_uart
#define DT_N_S_uart_1_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_UART
#define DT_N_S_uart_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_1, compatible, 0)
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart_1, compatible, 0)
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_compatible_LEN 1
#define DT_N_S_uart_1_P_compatible_EXISTS 1
#define DT_N_S_uart_1_P_wakeup_source 0
#define DT_N_S_uart_1_P_wakeup_source_EXISTS 1
#define DT_N_S_uart_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_uart_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /udc0
 *
 * Node identifier: DT_N_S_udc0
 *
 * Binding (compatible = zephyr,native-posix-udc):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/usb/zephyr,native-posix-udc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_udc0_PATH "/udc0"

/* Node's name with unit-address: */
#define DT_N_S_udc0_FULL_NAME "udc0"

/* Node parent (/) identifier: */
#define DT_N_S_udc0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_udc0_CHILD_IDX 15

/* Helper macros for child nodes of this node. */
#define DT_N_S_udc0_FOREACH_CHILD(fn) 
#define DT_N_S_udc0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_udc0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_udc0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_udc0_ORD 20
#define DT_N_S_udc0_ORD_STR_SORTABLE 00020

/* Ordinals for what this node depends on directly: */
#define DT_N_S_udc0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_udc0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_udc0_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_udc DT_N_S_udc0
#define DT_N_NODELABEL_zephyr_udc0          DT_N_S_udc0

/* Macros for properties that are special in the specification: */
#define DT_N_S_udc0_REG_NUM 0
#define DT_N_S_udc0_RANGES_NUM 0
#define DT_N_S_udc0_FOREACH_RANGE(fn) 
#define DT_N_S_udc0_IRQ_NUM 0
#define DT_N_S_udc0_IRQ_LEVEL 0
#define DT_N_S_udc0_COMPAT_MATCHES_zephyr_native_posix_udc 1
#define DT_N_S_udc0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_udc0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_udc0_P_compatible {"zephyr,native-posix-udc"}
#define DT_N_S_udc0_P_compatible_IDX_0 "zephyr,native-posix-udc"
#define DT_N_S_udc0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-udc
#define DT_N_S_udc0_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_udc
#define DT_N_S_udc0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_UDC
#define DT_N_S_udc0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_udc0, compatible, 0)
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_udc0, compatible, 0)
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_udc0, compatible, 0, __VA_ARGS__)
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_udc0, compatible, 0, __VA_ARGS__)
#define DT_N_S_udc0_P_compatible_LEN 1
#define DT_N_S_udc0_P_compatible_EXISTS 1
#define DT_N_S_udc0_P_wakeup_source 0
#define DT_N_S_udc0_P_wakeup_source_EXISTS 1
#define DT_N_S_udc0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_udc0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test
 *
 * Node identifier: DT_N_S_test
 */

/* Node's full path: */
#define DT_N_S_test_PATH "/test"

/* Node's name with unit-address: */
#define DT_N_S_test_FULL_NAME "test"

/* Node parent (/) identifier: */
#define DT_N_S_test_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_test_CHILD_IDX 24

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_FOREACH_CHILD(fn) fn(DT_N_S_test_S_interrupt_controller) fn(DT_N_S_test_S_pin_controller) fn(DT_N_S_test_S_array_holder) fn(DT_N_S_test_S_phandle_holder_0) fn(DT_N_S_test_S_enum_0) fn(DT_N_S_test_S_enum_1) fn(DT_N_S_test_S_enum_2) fn(DT_N_S_test_S_enum_3) fn(DT_N_S_test_S_enum_4) fn(DT_N_S_test_S_enum_5) fn(DT_N_S_test_S_enum_6) fn(DT_N_S_test_S_enum_7) fn(DT_N_S_test_S_disabled_node_0) fn(DT_N_S_test_S_reserved_node_0) fn(DT_N_S_test_S_gpio_0) fn(DT_N_S_test_S_gpio_1) fn(DT_N_S_test_S_intc_no_status_0) fn(DT_N_S_test_S_gpio_deadbeef) fn(DT_N_S_test_S_gpio_abcd1234) fn(DT_N_S_test_S_gpio_1234) fn(DT_N_S_test_S_gpio_1234abcd) fn(DT_N_S_test_S_i2c_11112222) fn(DT_N_S_test_S_i2c) fn(DT_N_S_test_S_i3c_88889999) fn(DT_N_S_test_S_mbox) fn(DT_N_S_test_S_mbox_zero_cell) fn(DT_N_S_test_S_spi_33334444) fn(DT_N_S_test_S_spi_55556666) fn(DT_N_S_test_S_i2c_77778888) fn(DT_N_S_test_S_adc_10002000) fn(DT_N_S_test_S_adc_10003000) fn(DT_N_S_test_S_temperature_sensor) fn(DT_N_S_test_S_reg_holder_9999aaaa) fn(DT_N_S_test_S_vendor) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc) fn(DT_N_S_test_S_interrupt_holder) fn(DT_N_S_test_S_interrupt_holder_extended) fn(DT_N_S_test_S_test_fixed_clock) fn(DT_N_S_test_S_test_clock) fn(DT_N_S_test_S_test_reset_abcd1234) fn(DT_N_S_test_S_dma_44443333) fn(DT_N_S_test_S_dma_44442222) fn(DT_N_S_test_S_pwm_55551111) fn(DT_N_S_test_S_pwm_55552222) fn(DT_N_S_test_S_can_phy0) fn(DT_N_S_test_S_can_55553333) fn(DT_N_S_test_S_can_55554444) fn(DT_N_S_test_S_test_children) fn(DT_N_S_test_S_test_great_grandchildren) fn(DT_N_S_test_S_test_ranges) fn(DT_N_S_test_S_device_with_props_0) fn(DT_N_S_test_S_device_with_props_1) fn(DT_N_S_test_S_device_with_props_2) fn(DT_N_S_test_S_string_token_0) fn(DT_N_S_test_S_string_token_1) fn(DT_N_S_test_S_string_token_2) fn(DT_N_S_test_S_string_array_token_0) fn(DT_N_S_test_S_string_array_token_1) fn(DT_N_S_test_S_string_unquoted_f0) fn(DT_N_S_test_S_string_unquoted_f1) fn(DT_N_S_test_S_string_unquoted_t) fn(DT_N_S_test_S_string_array_unquoted_f0) fn(DT_N_S_test_S_string_array_unquoted_f1) fn(DT_N_S_test_S_string_array_unquoted_t) fn(DT_N_S_test_S_test_mtd_ffeeddcc) fn(DT_N_S_test_S_test_mtd_33221100)
#define DT_N_S_test_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_array_holder) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_phandle_holder_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_3) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_4) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_5) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_6) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_7) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_disabled_node_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_reserved_node_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_intc_no_status_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_abcd1234) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234abcd) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox_zero_cell) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_55556666) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_77778888) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10002000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10003000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_temperature_sensor) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_reg_holder_9999aaaa) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_vendor) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_controller_bbbbcccc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder_extended) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_fixed_clock) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_clock) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_reset_abcd1234) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44443333) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44442222) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55551111) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55552222) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_phy0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55553333) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55554444) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_great_grandchildren) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_t) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_t) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_33221100)
#define DT_N_S_test_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller, __VA_ARGS__) fn(DT_N_S_test_S_array_holder, __VA_ARGS__) fn(DT_N_S_test_S_phandle_holder_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_1, __VA_ARGS__) fn(DT_N_S_test_S_enum_2, __VA_ARGS__) fn(DT_N_S_test_S_enum_3, __VA_ARGS__) fn(DT_N_S_test_S_enum_4, __VA_ARGS__) fn(DT_N_S_test_S_enum_5, __VA_ARGS__) fn(DT_N_S_test_S_enum_6, __VA_ARGS__) fn(DT_N_S_test_S_enum_7, __VA_ARGS__) fn(DT_N_S_test_S_disabled_node_0, __VA_ARGS__) fn(DT_N_S_test_S_reserved_node_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1, __VA_ARGS__) fn(DT_N_S_test_S_intc_no_status_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef, __VA_ARGS__) fn(DT_N_S_test_S_gpio_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234abcd, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222, __VA_ARGS__) fn(DT_N_S_test_S_i2c, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999, __VA_ARGS__) fn(DT_N_S_test_S_mbox, __VA_ARGS__) fn(DT_N_S_test_S_mbox_zero_cell, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444, __VA_ARGS__) fn(DT_N_S_test_S_spi_55556666, __VA_ARGS__) fn(DT_N_S_test_S_i2c_77778888, __VA_ARGS__) fn(DT_N_S_test_S_adc_10002000, __VA_ARGS__) fn(DT_N_S_test_S_adc_10003000, __VA_ARGS__) fn(DT_N_S_test_S_temperature_sensor, __VA_ARGS__) fn(DT_N_S_test_S_reg_holder_9999aaaa, __VA_ARGS__) fn(DT_N_S_test_S_vendor, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder_extended, __VA_ARGS__) fn(DT_N_S_test_S_test_fixed_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_reset_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_dma_44443333, __VA_ARGS__) fn(DT_N_S_test_S_dma_44442222, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55551111, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55552222, __VA_ARGS__) fn(DT_N_S_test_S_can_phy0, __VA_ARGS__) fn(DT_N_S_test_S_can_55553333, __VA_ARGS__) fn(DT_N_S_test_S_can_55554444, __VA_ARGS__) fn(DT_N_S_test_S_test_children, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_0, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_1, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_2, __VA_ARGS__) fn(DT_N_S_test_S_string_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_token_2, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100, __VA_ARGS__)
#define DT_N_S_test_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_array_holder, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_phandle_holder_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_disabled_node_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_reserved_node_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_intc_no_status_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_abcd1234, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234abcd, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox_zero_cell, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_55556666, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_77778888, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10002000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10003000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_temperature_sensor, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_reg_holder_9999aaaa, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_vendor, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder_extended, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_fixed_clock, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_clock, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_reset_abcd1234, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44443333, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44442222, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55551111, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55552222, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_phy0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55553333, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55554444, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_great_grandchildren, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_t, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_t, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_33221100, __VA_ARGS__)
#define DT_N_S_test_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_interrupt_controller) fn(DT_N_S_test_S_pin_controller) fn(DT_N_S_test_S_array_holder) fn(DT_N_S_test_S_phandle_holder_0) fn(DT_N_S_test_S_enum_0) fn(DT_N_S_test_S_enum_1) fn(DT_N_S_test_S_enum_2) fn(DT_N_S_test_S_enum_3) fn(DT_N_S_test_S_enum_4) fn(DT_N_S_test_S_enum_5) fn(DT_N_S_test_S_enum_6) fn(DT_N_S_test_S_enum_7) fn(DT_N_S_test_S_intc_no_status_0) fn(DT_N_S_test_S_gpio_deadbeef) fn(DT_N_S_test_S_gpio_abcd1234) fn(DT_N_S_test_S_gpio_1234) fn(DT_N_S_test_S_gpio_1234abcd) fn(DT_N_S_test_S_i2c_11112222) fn(DT_N_S_test_S_i2c) fn(DT_N_S_test_S_i3c_88889999) fn(DT_N_S_test_S_mbox) fn(DT_N_S_test_S_mbox_zero_cell) fn(DT_N_S_test_S_spi_33334444) fn(DT_N_S_test_S_spi_55556666) fn(DT_N_S_test_S_i2c_77778888) fn(DT_N_S_test_S_adc_10002000) fn(DT_N_S_test_S_adc_10003000) fn(DT_N_S_test_S_temperature_sensor) fn(DT_N_S_test_S_reg_holder_9999aaaa) fn(DT_N_S_test_S_vendor) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc) fn(DT_N_S_test_S_interrupt_holder) fn(DT_N_S_test_S_interrupt_holder_extended) fn(DT_N_S_test_S_test_fixed_clock) fn(DT_N_S_test_S_test_clock) fn(DT_N_S_test_S_test_reset_abcd1234) fn(DT_N_S_test_S_dma_44443333) fn(DT_N_S_test_S_dma_44442222) fn(DT_N_S_test_S_pwm_55551111) fn(DT_N_S_test_S_pwm_55552222) fn(DT_N_S_test_S_can_phy0) fn(DT_N_S_test_S_can_55553333) fn(DT_N_S_test_S_can_55554444) fn(DT_N_S_test_S_test_children) fn(DT_N_S_test_S_test_great_grandchildren) fn(DT_N_S_test_S_test_ranges) fn(DT_N_S_test_S_device_with_props_0) fn(DT_N_S_test_S_device_with_props_1) fn(DT_N_S_test_S_string_token_0) fn(DT_N_S_test_S_string_token_1) fn(DT_N_S_test_S_string_token_2) fn(DT_N_S_test_S_string_array_token_0) fn(DT_N_S_test_S_string_array_token_1) fn(DT_N_S_test_S_string_unquoted_f0) fn(DT_N_S_test_S_string_unquoted_f1) fn(DT_N_S_test_S_string_unquoted_t) fn(DT_N_S_test_S_string_array_unquoted_f0) fn(DT_N_S_test_S_string_array_unquoted_f1) fn(DT_N_S_test_S_string_array_unquoted_t) fn(DT_N_S_test_S_test_mtd_ffeeddcc) fn(DT_N_S_test_S_test_mtd_33221100)
#define DT_N_S_test_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_array_holder) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_phandle_holder_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_3) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_4) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_5) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_6) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_7) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_intc_no_status_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_abcd1234) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234abcd) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox_zero_cell) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_55556666) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_77778888) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10002000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10003000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_temperature_sensor) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_reg_holder_9999aaaa) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_vendor) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_controller_bbbbcccc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder_extended) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_fixed_clock) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_clock) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_reset_abcd1234) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44443333) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44442222) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55551111) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55552222) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_phy0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55553333) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55554444) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_great_grandchildren) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_t) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_t) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_33221100)
#define DT_N_S_test_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller, __VA_ARGS__) fn(DT_N_S_test_S_array_holder, __VA_ARGS__) fn(DT_N_S_test_S_phandle_holder_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_1, __VA_ARGS__) fn(DT_N_S_test_S_enum_2, __VA_ARGS__) fn(DT_N_S_test_S_enum_3, __VA_ARGS__) fn(DT_N_S_test_S_enum_4, __VA_ARGS__) fn(DT_N_S_test_S_enum_5, __VA_ARGS__) fn(DT_N_S_test_S_enum_6, __VA_ARGS__) fn(DT_N_S_test_S_enum_7, __VA_ARGS__) fn(DT_N_S_test_S_intc_no_status_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef, __VA_ARGS__) fn(DT_N_S_test_S_gpio_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234abcd, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222, __VA_ARGS__) fn(DT_N_S_test_S_i2c, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999, __VA_ARGS__) fn(DT_N_S_test_S_mbox, __VA_ARGS__) fn(DT_N_S_test_S_mbox_zero_cell, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444, __VA_ARGS__) fn(DT_N_S_test_S_spi_55556666, __VA_ARGS__) fn(DT_N_S_test_S_i2c_77778888, __VA_ARGS__) fn(DT_N_S_test_S_adc_10002000, __VA_ARGS__) fn(DT_N_S_test_S_adc_10003000, __VA_ARGS__) fn(DT_N_S_test_S_temperature_sensor, __VA_ARGS__) fn(DT_N_S_test_S_reg_holder_9999aaaa, __VA_ARGS__) fn(DT_N_S_test_S_vendor, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder_extended, __VA_ARGS__) fn(DT_N_S_test_S_test_fixed_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_reset_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_dma_44443333, __VA_ARGS__) fn(DT_N_S_test_S_dma_44442222, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55551111, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55552222, __VA_ARGS__) fn(DT_N_S_test_S_can_phy0, __VA_ARGS__) fn(DT_N_S_test_S_can_55553333, __VA_ARGS__) fn(DT_N_S_test_S_can_55554444, __VA_ARGS__) fn(DT_N_S_test_S_test_children, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_0, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_1, __VA_ARGS__) fn(DT_N_S_test_S_string_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_token_2, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100, __VA_ARGS__)
#define DT_N_S_test_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_array_holder, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_phandle_holder_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_enum_7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_intc_no_status_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_abcd1234, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_1234abcd, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_mbox_zero_cell, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_55556666, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_77778888, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10002000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_adc_10003000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_temperature_sensor, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_reg_holder_9999aaaa, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_vendor, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_interrupt_holder_extended, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_fixed_clock, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_clock, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_reset_abcd1234, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44443333, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_dma_44442222, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55551111, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pwm_55552222, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_phy0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55553333, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_can_55554444, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_great_grandchildren, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_device_with_props_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_token_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_token_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_f1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_unquoted_t, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_f1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_string_array_unquoted_t, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_33221100, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_ORD 21
#define DT_N_S_test_ORD_STR_SORTABLE 00021

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_SUPPORTS_ORDS \
	22, /* /test/interrupt-controller */ \
	23, /* /test/interrupt-controller@bbbbcccc */ \
	24, /* /test/gpio@deadbeef */ \
	39, /* /test/array-holder */ \
	40, /* /test/can-phy0 */ \
	41, /* /test/can@55553333 */ \
	42, /* /test/device-with-props-0 */ \
	43, /* /test/device-with-props-1 */ \
	44, /* /test/device-with-props-2 */ \
	45, /* /test/disabled-node@0 */ \
	46, /* /test/enum-0 */ \
	47, /* /test/enum-1 */ \
	48, /* /test/enum-4 */ \
	49, /* /test/enum-5 */ \
	50, /* /test/enum-6 */ \
	51, /* /test/enum-7 */ \
	52, /* /test/gpio@0 */ \
	53, /* /test/gpio@1 */ \
	54, /* /test/i2c@77778888 */ \
	55, /* /test/intc_no_status@0 */ \
	56, /* /test/interrupt-holder */ \
	57, /* /test/gpio@1234abcd */ \
	58, /* /test/interrupt-holder-extended */ \
	59, /* /test/enum-2 */ \
	60, /* /test/enum-3 */ \
	61, /* /test/gpio@1234 */ \
	62, /* /test/gpio@abcd1234 */ \
	63, /* /test/i2c@11112222 */ \
	64, /* /test/pwm@55551111 */ \
	65, /* /test/pwm@55552222 */ \
	66, /* /test/spi@33334444 */ \
	67, /* /test/phandle-holder-0 */ \
	68, /* /test/reg-holder@9999aaaa */ \
	69, /* /test/reserved-node@0 */ \
	70, /* /test/string-array-token-0 */ \
	71, /* /test/string-array-token-1 */ \
	72, /* /test/string-array-unquoted-f0 */ \
	73, /* /test/string-array-unquoted-f1 */ \
	74, /* /test/string-array-unquoted-t */ \
	75, /* /test/string-token-0 */ \
	76, /* /test/string-token-1 */ \
	77, /* /test/string-token-2 */ \
	78, /* /test/string-unquoted-f0 */ \
	79, /* /test/string-unquoted-f1 */ \
	80, /* /test/string-unquoted-t */ \
	81, /* /test/adc@10002000 */ \
	82, /* /test/adc@10003000 */ \
	83, /* /test/dma@44442222 */ \
	84, /* /test/dma@44443333 */ \
	85, /* /test/mbox */ \
	86, /* /test/mbox_zero_cell */ \
	87, /* /test/test-clock */ \
	88, /* /test/test-fixed-clock */ \
	89, /* /test/test-reset@abcd1234 */ \
	90, /* /test/pin-controller */ \
	95, /* /test/temperature-sensor */ \
	96, /* /test/vendor */ \
	97, /* /test/can@55554444 */ \
	102, /* /test/i2c */ \
	111, /* /test/i3c@88889999 */ \
	117, /* /test/spi@55556666 */ \
	119, /* /test/test-children */ \
	123, /* /test/test-great-grandchildren */ \
	127, /* /test/test-mtd@33221100 */ \
	130, /* /test/test-mtd@ffeeddcc */ \
	135, /* /test/test-ranges */

/* Existence and alternate IDs: */
#define DT_N_S_test_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_REG_NUM 0
#define DT_N_S_test_RANGES_NUM 0
#define DT_N_S_test_FOREACH_RANGE(fn) 
#define DT_N_S_test_IRQ_NUM 0
#define DT_N_S_test_IRQ_LEVEL 0
#define DT_N_S_test_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/interrupt-controller
 *
 * Node identifier: DT_N_S_test_S_interrupt_controller
 *
 * Binding (compatible = vnd,cpu-intc):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_interrupt_controller_PATH "/test/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_test_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_interrupt_controller_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_interrupt_controller_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_interrupt_controller_ORD 22
#define DT_N_S_test_S_interrupt_controller_ORD_STR_SORTABLE 00022

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_interrupt_controller_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_interrupt_controller_SUPPORTS_ORDS \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_interrupt_controller_EXISTS 1
#define DT_N_INST_0_vnd_cpu_intc     DT_N_S_test_S_interrupt_controller
#define DT_N_NODELABEL_test_cpu_intc DT_N_S_test_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_interrupt_controller_REG_NUM 0
#define DT_N_S_test_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_test_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_test_S_interrupt_controller_IRQ_LEVEL 0
#define DT_N_S_test_S_interrupt_controller_COMPAT_MATCHES_vnd_cpu_intc 1
#define DT_N_S_test_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_test_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_P_compatible {"vnd,cpu-intc"}
#define DT_N_S_test_S_interrupt_controller_P_compatible_IDX_0 "vnd,cpu-intc"
#define DT_N_S_test_S_interrupt_controller_P_compatible_IDX_0_STRING_UNQUOTED vnd,cpu-intc
#define DT_N_S_test_S_interrupt_controller_P_compatible_IDX_0_STRING_TOKEN vnd_cpu_intc
#define DT_N_S_test_S_interrupt_controller_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_CPU_INTC
#define DT_N_S_test_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_controller, compatible, 0)
#define DT_N_S_test_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_controller, compatible, 0)
#define DT_N_S_test_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_test_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_test_S_interrupt_controller_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_interrupt_controller_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/interrupt-controller@bbbbcccc
 *
 * Node identifier: DT_N_S_test_S_interrupt_controller_bbbbcccc
 *
 * Binding (compatible = vnd,intc):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_PATH "/test/interrupt-controller@bbbbcccc"

/* Node's name with unit-address: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FULL_NAME "interrupt-controller@bbbbcccc"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_CHILD_IDX 34

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_ORD 23
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_ORD_STR_SORTABLE 00023

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_REQUIRES_ORDS \
	21, /* /test */ \
	22, /* /test/interrupt-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_SUPPORTS_ORDS \
	24, /* /test/gpio@deadbeef */ \
	52, /* /test/gpio@0 */ \
	53, /* /test/gpio@1 */ \
	54, /* /test/i2c@77778888 */ \
	56, /* /test/interrupt-holder */ \
	58, /* /test/interrupt-holder-extended */ \
	62, /* /test/gpio@abcd1234 */ \
	63, /* /test/i2c@11112222 */ \
	66, /* /test/spi@33334444 */ \
	83, /* /test/dma@44442222 */ \
	84, /* /test/dma@44443333 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_EXISTS 1
#define DT_N_INST_1_vnd_intc     DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_NODELABEL_test_intc DT_N_S_test_S_interrupt_controller_bbbbcccc

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_REG_NUM 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_REG_IDX_0_VAL_ADDRESS 3149647052 /* 0xbbbbcccc */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_RANGES_NUM 0
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_NUM 2
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_1_VAL_irq 0
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_IDX_1_CONTROLLER DT_N_S_test_S_interrupt_controller
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_IRQ_LEVEL 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_COMPAT_MATCHES_vnd_intc 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_reg {3149647052 /* 0xbbbbcccc */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_reg_IDX_0 3149647052
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_reg_IDX_1 4096
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_reg_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_controller 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_controller_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible {"vnd,intc"}
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_IDX_0 "vnd,intc"
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_IDX_0_STRING_UNQUOTED vnd,intc
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_IDX_0_STRING_TOKEN vnd_intc
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_INTC
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, compatible, 0)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, compatible, 0)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_LEN 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_compatible_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupts {11 /* 0xb */, 0 /* 0x0 */}
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupts_IDX_0 11
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupts_IDX_1 0
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupts_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent DT_N_S_test_S_interrupt_controller
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_IDX_0 DT_N_S_test_S_interrupt_controller
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_IDX_0_PH DT_N_S_test_S_interrupt_controller
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, interrupt_parent, 0)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, interrupt_parent, 0)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_LEN 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_interrupt_parent_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_wakeup_source 0
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_interrupt_controller_bbbbcccc_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/gpio@deadbeef
 *
 * Node identifier: DT_N_S_test_S_gpio_deadbeef
 *
 * Binding (compatible = vnd,gpio-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_deadbeef_PATH "/test/gpio@deadbeef"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_deadbeef_FULL_NAME "gpio@deadbeef"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_gpio_deadbeef_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_deadbeef_CHILD_IDX 17

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD(fn) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2)
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2)
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2)
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2)
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_deadbeef_ORD 24
#define DT_N_S_test_S_gpio_deadbeef_ORD_STR_SORTABLE 00024

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_deadbeef_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_deadbeef_SUPPORTS_ORDS \
	25, /* /zephyr,user */ \
	66, /* /test/spi@33334444 */ \
	67, /* /test/phandle-holder-0 */ \
	100, /* /test/gpio@deadbeef/test_gpio_hog_1 */ \
	101, /* /test/gpio@deadbeef/test_gpio_hog_2 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_deadbeef_EXISTS 1
#define DT_N_ALIAS_test_alias                 DT_N_S_test_S_gpio_deadbeef
#define DT_N_INST_0_vnd_gpio_device           DT_N_S_test_S_gpio_deadbeef
#define DT_N_NODELABEL_test_nodelabel         DT_N_S_test_S_gpio_deadbeef
#define DT_N_NODELABEL_test_nodelabel_allcaps DT_N_S_test_S_gpio_deadbeef
#define DT_N_NODELABEL_test_gpio_1            DT_N_S_test_S_gpio_deadbeef

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_deadbeef_REG_NUM 1
#define DT_N_S_test_S_gpio_deadbeef_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_REG_IDX_0_VAL_ADDRESS 3735928559 /* 0xdeadbeef */
#define DT_N_S_test_S_gpio_deadbeef_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_gpio_deadbeef_RANGES_NUM 0
#define DT_N_S_test_S_gpio_deadbeef_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_deadbeef_IRQ_NUM 1
#define DT_N_S_test_S_gpio_deadbeef_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_test_S_gpio_deadbeef_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_test_S_gpio_deadbeef_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_gpio_deadbeef_IRQ_LEVEL 2
#define DT_N_S_test_S_gpio_deadbeef_COMPAT_MATCHES_vnd_gpio_device 1
#define DT_N_S_test_S_gpio_deadbeef_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_deadbeef_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_gpio_deadbeef_P_reg {3735928559 /* 0xdeadbeef */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_gpio_deadbeef_P_reg_IDX_0 3735928559
#define DT_N_S_test_S_gpio_deadbeef_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_reg_IDX_1 4096
#define DT_N_S_test_S_gpio_deadbeef_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_reg_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_label "TEST_GPIO_1"
#define DT_N_S_test_S_gpio_deadbeef_P_label_STRING_UNQUOTED TEST_GPIO_1
#define DT_N_S_test_S_gpio_deadbeef_P_label_STRING_TOKEN TEST_GPIO_1
#define DT_N_S_test_S_gpio_deadbeef_P_label_STRING_UPPER_TOKEN TEST_GPIO_1
#define DT_N_S_test_S_gpio_deadbeef_P_label_IDX_0 "TEST_GPIO_1"
#define DT_N_S_test_S_gpio_deadbeef_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_deadbeef, label, 0)
#define DT_N_S_test_S_gpio_deadbeef_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_deadbeef, label, 0)
#define DT_N_S_test_S_gpio_deadbeef_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_deadbeef, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_P_label_LEN 1
#define DT_N_S_test_S_gpio_deadbeef_P_label_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_gpio_controller 1
#define DT_N_S_test_S_gpio_deadbeef_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_ngpios 100
#define DT_N_S_test_S_gpio_deadbeef_P_ngpios_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_status "okay"
#define DT_N_S_test_S_gpio_deadbeef_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_gpio_deadbeef_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_gpio_deadbeef_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_deadbeef_P_status_IDX_0 "okay"
#define DT_N_S_test_S_gpio_deadbeef_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_status_ENUM_IDX 1
#define DT_N_S_test_S_gpio_deadbeef_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_gpio_deadbeef_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_deadbeef_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_deadbeef, status, 0)
#define DT_N_S_test_S_gpio_deadbeef_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_deadbeef, status, 0)
#define DT_N_S_test_S_gpio_deadbeef_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_deadbeef, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_P_status_LEN 1
#define DT_N_S_test_S_gpio_deadbeef_P_status_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_compatible {"vnd,gpio-device"}
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_IDX_0 "vnd,gpio-device"
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-device
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_device
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_DEVICE
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_deadbeef, compatible, 0)
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_deadbeef, compatible, 0)
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_deadbeef, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_LEN 1
#define DT_N_S_test_S_gpio_deadbeef_P_compatible_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_interrupts {4 /* 0x4 */, 3 /* 0x3 */}
#define DT_N_S_test_S_gpio_deadbeef_P_interrupts_IDX_0 4
#define DT_N_S_test_S_gpio_deadbeef_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_interrupts_IDX_1 3
#define DT_N_S_test_S_gpio_deadbeef_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_interrupts_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_wakeup_source 0
#define DT_N_S_test_S_gpio_deadbeef_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_gpio_deadbeef_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /zephyr,user
 *
 * Node identifier: DT_N_S_zephyr_user
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_zephyr_user_PATH "/zephyr,user"

/* Node's name with unit-address: */
#define DT_N_S_zephyr_user_FULL_NAME "zephyr,user"

/* Node parent (/) identifier: */
#define DT_N_S_zephyr_user_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_zephyr_user_CHILD_IDX 23

/* Helper macros for child nodes of this node. */
#define DT_N_S_zephyr_user_FOREACH_CHILD(fn) 
#define DT_N_S_zephyr_user_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_zephyr_user_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_zephyr_user_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_zephyr_user_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_zephyr_user_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_zephyr_user_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_zephyr_user_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_zephyr_user_ORD 25
#define DT_N_S_zephyr_user_ORD_STR_SORTABLE 00025

/* Ordinals for what this node depends on directly: */
#define DT_N_S_zephyr_user_REQUIRES_ORDS \
	0, /* / */ \
	24, /* /test/gpio@deadbeef */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_zephyr_user_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_zephyr_user_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_zephyr_user_REG_NUM 0
#define DT_N_S_zephyr_user_RANGES_NUM 0
#define DT_N_S_zephyr_user_FOREACH_RANGE(fn) 
#define DT_N_S_zephyr_user_IRQ_NUM 0
#define DT_N_S_zephyr_user_IRQ_LEVEL 0
#define DT_N_S_zephyr_user_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_zephyr_user_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_zephyr_user_P_ph DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_zephyr_user_P_ph_IDX_0 DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_zephyr_user_P_ph_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_zephyr_user_P_ph_IDX_0_EXISTS 1
#define DT_N_S_zephyr_user_P_ph_FOREACH_PROP_ELEM(fn) fn(DT_N_S_zephyr_user, ph, 0)
#define DT_N_S_zephyr_user_P_ph_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_zephyr_user, ph, 0)
#define DT_N_S_zephyr_user_P_ph_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_zephyr_user, ph, 0, __VA_ARGS__)
#define DT_N_S_zephyr_user_P_ph_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_zephyr_user, ph, 0, __VA_ARGS__)
#define DT_N_S_zephyr_user_P_ph_LEN 1
#define DT_N_S_zephyr_user_P_ph_EXISTS 1
#define DT_N_S_zephyr_user_P_string "foo"
#define DT_N_S_zephyr_user_P_string_STRING_UNQUOTED foo
#define DT_N_S_zephyr_user_P_string_STRING_TOKEN foo
#define DT_N_S_zephyr_user_P_string_STRING_UPPER_TOKEN FOO
#define DT_N_S_zephyr_user_P_string_IDX_0 "foo"
#define DT_N_S_zephyr_user_P_string_IDX_0_EXISTS 1
#define DT_N_S_zephyr_user_P_string_FOREACH_PROP_ELEM(fn) fn(DT_N_S_zephyr_user, string, 0)
#define DT_N_S_zephyr_user_P_string_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_zephyr_user, string, 0)
#define DT_N_S_zephyr_user_P_string_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_zephyr_user, string, 0, __VA_ARGS__)
#define DT_N_S_zephyr_user_P_string_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_zephyr_user, string, 0, __VA_ARGS__)
#define DT_N_S_zephyr_user_P_string_LEN 1
#define DT_N_S_zephyr_user_P_string_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 26
#define DT_N_S_cpus_ORD_STR_SORTABLE 00026

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	27, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_IRQ_LEVEL 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = zephyr,native-posix-cpu):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/cpu/zephyr,native-posix-cpu.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 27
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00027

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	26, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_cpu DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0                 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_IRQ_LEVEL 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_zephyr_native_posix_cpu 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"zephyr,native-posix-cpu"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "zephyr,native-posix-cpu"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-cpu
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_cpu
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_CPU
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /flash-controller@0
 *
 * Node identifier: DT_N_S_flash_controller_0
 *
 * Binding (compatible = zephyr,sim-flash):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/flash_controller/zephyr,sim-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_PATH "/flash-controller@0"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_FULL_NAME "flash-controller@0"

/* Node parent (/) identifier: */
#define DT_N_S_flash_controller_0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_FOREACH_CHILD(fn) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_ORD 28
#define DT_N_S_flash_controller_0_ORD_STR_SORTABLE 00028

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_SUPPORTS_ORDS \
	29, /* /flash-controller@0/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_EXISTS 1
#define DT_N_INST_0_zephyr_sim_flash    DT_N_S_flash_controller_0
#define DT_N_NODELABEL_flashcontroller0 DT_N_S_flash_controller_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_REG_NUM 1
#define DT_N_S_flash_controller_0_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_flash_controller_0_REG_IDX_0_VAL_SIZE 2097152 /* 0x200000 */
#define DT_N_S_flash_controller_0_RANGES_NUM 0
#define DT_N_S_flash_controller_0_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_IRQ_NUM 0
#define DT_N_S_flash_controller_0_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_COMPAT_MATCHES_zephyr_sim_flash 1
#define DT_N_S_flash_controller_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_flash_controller_0_P_erase_value 255
#define DT_N_S_flash_controller_0_P_erase_value_EXISTS 1
#define DT_N_S_flash_controller_0_P_compatible {"zephyr,sim-flash"}
#define DT_N_S_flash_controller_0_P_compatible_IDX_0 "zephyr,sim-flash"
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sim-flash
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_STRING_TOKEN zephyr_sim_flash
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SIM_FLASH
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0, compatible, 0)
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0, compatible, 0)
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_P_compatible_LEN 1
#define DT_N_S_flash_controller_0_P_compatible_EXISTS 1
#define DT_N_S_flash_controller_0_P_reg {0 /* 0x0 */, 2097152 /* 0x200000 */}
#define DT_N_S_flash_controller_0_P_reg_IDX_0 0
#define DT_N_S_flash_controller_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_P_reg_IDX_1 2097152
#define DT_N_S_flash_controller_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_P_reg_EXISTS 1
#define DT_N_S_flash_controller_0_P_wakeup_source 0
#define DT_N_S_flash_controller_0_P_wakeup_source_EXISTS 1
#define DT_N_S_flash_controller_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_flash_controller_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_PATH "/flash-controller@0/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/flash-controller@0) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_PARENT DT_N_S_flash_controller_0

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_ORD 29
#define DT_N_S_flash_controller_0_S_flash_0_ORD_STR_SORTABLE 00029

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_REQUIRES_ORDS \
	28, /* /flash-controller@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_SUPPORTS_ORDS \
	30, /* /flash-controller@0/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_flash_controller_0_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_flash_controller_0_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_flash_controller_0_S_flash_0_REG_IDX_0_VAL_SIZE 2097152 /* 0x200000 */
#define DT_N_S_flash_controller_0_S_flash_0_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_flash_controller_0_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_P_erase_block_size 4096
#define DT_N_S_flash_controller_0_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_write_block_size 1
#define DT_N_S_flash_controller_0_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status "okay"
#define DT_N_S_flash_controller_0_S_flash_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_flash_controller_0_S_flash_0_P_status_STRING_TOKEN okay
#define DT_N_S_flash_controller_0_S_flash_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_flash_controller_0_S_flash_0_P_status_IDX_0 "okay"
#define DT_N_S_flash_controller_0_S_flash_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_IDX 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_TOKEN okay
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_reg {0 /* 0x0 */, 2097152 /* 0x200000 */}
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_1 2097152
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_wakeup_source 0
#define DT_N_S_flash_controller_0_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_flash_controller_0_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_PATH "/flash-controller@0/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/flash-controller@0/flash@0) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_PARENT DT_N_S_flash_controller_0_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_ORD 30
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_ORD_STR_SORTABLE 00030

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_REQUIRES_ORDS \
	29, /* /flash-controller@0/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_SUPPORTS_ORDS \
	31, /* /flash-controller@0/flash@0/partitions/partition@0 */ \
	32, /* /flash-controller@0/flash@0/partitions/partition@c000 */ \
	33, /* /flash-controller@0/flash@0/partitions/partition@75000 */ \
	34, /* /flash-controller@0/flash@0/partitions/partition@de000 */ \
	35, /* /flash-controller@0/flash@0/partitions/partition@fc000 */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@0
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PATH "/flash-controller@0/flash@0/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FULL_NAME "partition@0"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_ORD 31
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_ORD_STR_SORTABLE 00031

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REQUIRES_ORDS \
	30, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_EXISTS 1
#define DT_N_NODELABEL_boot_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 49152 /* 0xc000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label "mcuboot"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UNQUOTED mcuboot
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_STRING_TOKEN mcuboot
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN MCUBOOT
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0 "mcuboot"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 49152 /* 0xc000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 49152
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@c000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PATH "/flash-controller@0/flash@0/partitions/partition@c000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FULL_NAME "partition@c000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_ORD 32
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_ORD_STR_SORTABLE 00032

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REQUIRES_ORDS \
	30, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_ADDRESS 49152 /* 0xc000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_SIZE 430080 /* 0x69000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label "image-0"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_UNQUOTED image-0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_TOKEN image_0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0 "image-0"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg {49152 /* 0xc000 */, 430080 /* 0x69000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0 49152
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1 430080
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@75000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PATH "/flash-controller@0/flash@0/partitions/partition@75000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FULL_NAME "partition@75000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_ORD 33
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_ORD_STR_SORTABLE 00033

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REQUIRES_ORDS \
	30, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_IDX_0_VAL_ADDRESS 479232 /* 0x75000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_IDX_0_VAL_SIZE 430080 /* 0x69000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label "image-1"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_STRING_UNQUOTED image-1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_STRING_TOKEN image_1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_IDX_0 "image-1"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg {479232 /* 0x75000 */, 430080 /* 0x69000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_0 479232
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_1 430080
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@de000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PATH "/flash-controller@0/flash@0/partitions/partition@de000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FULL_NAME "partition@de000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_ORD 34
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_ORD_STR_SORTABLE 00034

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REQUIRES_ORDS \
	30, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_EXISTS 1
#define DT_N_NODELABEL_scratch_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_IDX_0_VAL_ADDRESS 909312 /* 0xde000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_IDX_0_VAL_SIZE 122880 /* 0x1e000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label "image-scratch"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_STRING_UNQUOTED image-scratch
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_STRING_TOKEN image_scratch
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_STRING_UPPER_TOKEN IMAGE_SCRATCH
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_IDX_0 "image-scratch"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg {909312 /* 0xde000 */, 122880 /* 0x1e000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_0 909312
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_1 122880
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@fc000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PATH "/flash-controller@0/flash@0/partitions/partition@fc000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FULL_NAME "partition@fc000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_ORD 35
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_ORD_STR_SORTABLE 00035

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REQUIRES_ORDS \
	30, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_VAL_ADDRESS 1032192 /* 0xfc000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PARTITION_ID 4

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label "storage"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_UNQUOTED storage
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_TOKEN storage
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_IDX_0 "storage"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg {1032192 /* 0xfc000 */, 16384 /* 0x4000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_0 1032192
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_1 16384
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_EXISTS 1

/*
 * Devicetree node: /gpio@800
 *
 * Node identifier: DT_N_S_gpio_800
 *
 * Binding (compatible = zephyr,gpio-emul):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/gpio/zephyr,gpio-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_800_PATH "/gpio@800"

/* Node's name with unit-address: */
#define DT_N_S_gpio_800_FULL_NAME "gpio@800"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_800_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_800_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_800_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_800_ORD 36
#define DT_N_S_gpio_800_ORD_STR_SORTABLE 00036

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_800_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_800_SUPPORTS_ORDS \
	37, /* /leds */ \
	38, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_800_EXISTS 1
#define DT_N_INST_0_zephyr_gpio_emul DT_N_S_gpio_800
#define DT_N_NODELABEL_gpio0         DT_N_S_gpio_800

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_800_REG_NUM 1
#define DT_N_S_gpio_800_REG_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_REG_IDX_0_VAL_ADDRESS 2048 /* 0x800 */
#define DT_N_S_gpio_800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_gpio_800_RANGES_NUM 0
#define DT_N_S_gpio_800_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_800_IRQ_NUM 0
#define DT_N_S_gpio_800_IRQ_LEVEL 0
#define DT_N_S_gpio_800_COMPAT_MATCHES_zephyr_gpio_emul 1
#define DT_N_S_gpio_800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_800_P_reg {2048 /* 0x800 */, 4 /* 0x4 */}
#define DT_N_S_gpio_800_P_reg_IDX_0 2048
#define DT_N_S_gpio_800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_P_reg_IDX_1 4
#define DT_N_S_gpio_800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_gpio_800_P_reg_EXISTS 1
#define DT_N_S_gpio_800_P_rising_edge 1
#define DT_N_S_gpio_800_P_rising_edge_EXISTS 1
#define DT_N_S_gpio_800_P_falling_edge 1
#define DT_N_S_gpio_800_P_falling_edge_EXISTS 1
#define DT_N_S_gpio_800_P_high_level 1
#define DT_N_S_gpio_800_P_high_level_EXISTS 1
#define DT_N_S_gpio_800_P_low_level 1
#define DT_N_S_gpio_800_P_low_level_EXISTS 1
#define DT_N_S_gpio_800_P_gpio_controller 1
#define DT_N_S_gpio_800_P_gpio_controller_EXISTS 1
#define DT_N_S_gpio_800_P_ngpios 32
#define DT_N_S_gpio_800_P_ngpios_EXISTS 1
#define DT_N_S_gpio_800_P_status "okay"
#define DT_N_S_gpio_800_P_status_STRING_UNQUOTED okay
#define DT_N_S_gpio_800_P_status_STRING_TOKEN okay
#define DT_N_S_gpio_800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_gpio_800_P_status_IDX_0 "okay"
#define DT_N_S_gpio_800_P_status_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_P_status_ENUM_IDX 1
#define DT_N_S_gpio_800_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_gpio_800_P_status_ENUM_TOKEN okay
#define DT_N_S_gpio_800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_800, status, 0)
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_800, status, 0)
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_800, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_800, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_status_LEN 1
#define DT_N_S_gpio_800_P_status_EXISTS 1
#define DT_N_S_gpio_800_P_compatible {"zephyr,gpio-emul"}
#define DT_N_S_gpio_800_P_compatible_IDX_0 "zephyr,gpio-emul"
#define DT_N_S_gpio_800_P_compatible_IDX_0_STRING_UNQUOTED zephyr,gpio-emul
#define DT_N_S_gpio_800_P_compatible_IDX_0_STRING_TOKEN zephyr_gpio_emul
#define DT_N_S_gpio_800_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_GPIO_EMUL
#define DT_N_S_gpio_800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_800, compatible, 0)
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_800, compatible, 0)
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_800, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_800, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_compatible_LEN 1
#define DT_N_S_gpio_800_P_compatible_EXISTS 1
#define DT_N_S_gpio_800_P_wakeup_source 0
#define DT_N_S_gpio_800_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 37
#define DT_N_S_leds_ORD_STR_SORTABLE 00037

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */ \
	36, /* /gpio@800 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	38, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_IRQ_LEVEL 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 38
#define DT_N_S_leds_S_led_0_ORD_STR_SORTABLE 00038

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	36, /* /gpio@800 */ \
	37, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_led0     DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_led0 DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_IRQ_LEVEL 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label "Green LED"
#define DT_N_S_leds_S_led_0_P_label_STRING_UNQUOTED Green LED
#define DT_N_S_leds_S_led_0_P_label_STRING_TOKEN Green_LED
#define DT_N_S_leds_S_led_0_P_label_STRING_UPPER_TOKEN GREEN_LED
#define DT_N_S_leds_S_led_0_P_label_IDX_0 "Green LED"
#define DT_N_S_leds_S_led_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_LEN 1
#define DT_N_S_leds_S_led_0_P_label_EXISTS 1

/*
 * Devicetree node: /test/array-holder
 *
 * Node identifier: DT_N_S_test_S_array_holder
 *
 * Binding (compatible = vnd,array-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,array-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_array_holder_PATH "/test/array-holder"

/* Node's name with unit-address: */
#define DT_N_S_test_S_array_holder_FULL_NAME "array-holder"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_array_holder_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_array_holder_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_array_holder_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_array_holder_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_array_holder_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_array_holder_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_array_holder_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_array_holder_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_array_holder_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_array_holder_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_array_holder_ORD 39
#define DT_N_S_test_S_array_holder_ORD_STR_SORTABLE 00039

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_array_holder_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_array_holder_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_array_holder_EXISTS 1
#define DT_N_INST_0_vnd_array_holder     DT_N_S_test_S_array_holder
#define DT_N_INST_0_vnd_undefined_compat DT_N_S_test_S_array_holder
#define DT_N_NODELABEL_test_arrays       DT_N_S_test_S_array_holder

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_array_holder_REG_NUM 0
#define DT_N_S_test_S_array_holder_RANGES_NUM 0
#define DT_N_S_test_S_array_holder_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_array_holder_IRQ_NUM 0
#define DT_N_S_test_S_array_holder_IRQ_LEVEL 0
#define DT_N_S_test_S_array_holder_COMPAT_MATCHES_vnd_array_holder 1
#define DT_N_S_test_S_array_holder_COMPAT_MATCHES_vnd_undefined_compat 1
#define DT_N_S_test_S_array_holder_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_array_holder_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_array_holder_P_a {1000 /* 0x3e8 */, 2000 /* 0x7d0 */, 3000 /* 0xbb8 */}
#define DT_N_S_test_S_array_holder_P_a_IDX_0 1000
#define DT_N_S_test_S_array_holder_P_a_IDX_0_EXISTS 1
#define DT_N_S_test_S_array_holder_P_a_IDX_1 2000
#define DT_N_S_test_S_array_holder_P_a_IDX_1_EXISTS 1
#define DT_N_S_test_S_array_holder_P_a_IDX_2 3000
#define DT_N_S_test_S_array_holder_P_a_IDX_2_EXISTS 1
#define DT_N_S_test_S_array_holder_P_a_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_array_holder, a, 0) \
	fn(DT_N_S_test_S_array_holder, a, 1) \
	fn(DT_N_S_test_S_array_holder, a, 2)
#define DT_N_S_test_S_array_holder_P_a_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_array_holder, a, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, a, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, a, 2)
#define DT_N_S_test_S_array_holder_P_a_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_array_holder, a, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_array_holder, a, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_array_holder, a, 2, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_a_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_array_holder, a, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, a, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, a, 2, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_a_LEN 3
#define DT_N_S_test_S_array_holder_P_a_EXISTS 1
#define DT_N_S_test_S_array_holder_P_b {170 /* 0xaa */, 187 /* 0xbb */, 204 /* 0xcc */, 221 /* 0xdd */}
#define DT_N_S_test_S_array_holder_P_b_IDX_0 170
#define DT_N_S_test_S_array_holder_P_b_IDX_0_EXISTS 1
#define DT_N_S_test_S_array_holder_P_b_IDX_1 187
#define DT_N_S_test_S_array_holder_P_b_IDX_1_EXISTS 1
#define DT_N_S_test_S_array_holder_P_b_IDX_2 204
#define DT_N_S_test_S_array_holder_P_b_IDX_2_EXISTS 1
#define DT_N_S_test_S_array_holder_P_b_IDX_3 221
#define DT_N_S_test_S_array_holder_P_b_IDX_3_EXISTS 1
#define DT_N_S_test_S_array_holder_P_b_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_array_holder, b, 0) \
	fn(DT_N_S_test_S_array_holder, b, 1) \
	fn(DT_N_S_test_S_array_holder, b, 2) \
	fn(DT_N_S_test_S_array_holder, b, 3)
#define DT_N_S_test_S_array_holder_P_b_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_array_holder, b, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, b, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, b, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, b, 3)
#define DT_N_S_test_S_array_holder_P_b_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_array_holder, b, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_array_holder, b, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_array_holder, b, 2, __VA_ARGS__) \
	fn(DT_N_S_test_S_array_holder, b, 3, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_b_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_array_holder, b, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, b, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, b, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, b, 3, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_b_LEN 4
#define DT_N_S_test_S_array_holder_P_b_EXISTS 1
#define DT_N_S_test_S_array_holder_P_c {"bar", "baz"}
#define DT_N_S_test_S_array_holder_P_c_IDX_0 "bar"
#define DT_N_S_test_S_array_holder_P_c_IDX_0_STRING_UNQUOTED bar
#define DT_N_S_test_S_array_holder_P_c_IDX_0_STRING_TOKEN bar
#define DT_N_S_test_S_array_holder_P_c_IDX_0_STRING_UPPER_TOKEN BAR
#define DT_N_S_test_S_array_holder_P_c_IDX_0_EXISTS 1
#define DT_N_S_test_S_array_holder_P_c_IDX_1 "baz"
#define DT_N_S_test_S_array_holder_P_c_IDX_1_STRING_UNQUOTED baz
#define DT_N_S_test_S_array_holder_P_c_IDX_1_STRING_TOKEN baz
#define DT_N_S_test_S_array_holder_P_c_IDX_1_STRING_UPPER_TOKEN BAZ
#define DT_N_S_test_S_array_holder_P_c_IDX_1_EXISTS 1
#define DT_N_S_test_S_array_holder_P_c_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_array_holder, c, 0) \
	fn(DT_N_S_test_S_array_holder, c, 1)
#define DT_N_S_test_S_array_holder_P_c_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_array_holder, c, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, c, 1)
#define DT_N_S_test_S_array_holder_P_c_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_array_holder, c, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_array_holder, c, 1, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_c_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_array_holder, c, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, c, 1, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_c_LEN 2
#define DT_N_S_test_S_array_holder_P_c_EXISTS 1
#define DT_N_S_test_S_array_holder_P_compatible {"vnd,array-holder", "vnd,undefined-compat"}
#define DT_N_S_test_S_array_holder_P_compatible_IDX_0 "vnd,array-holder"
#define DT_N_S_test_S_array_holder_P_compatible_IDX_0_STRING_UNQUOTED vnd,array-holder
#define DT_N_S_test_S_array_holder_P_compatible_IDX_0_STRING_TOKEN vnd_array_holder
#define DT_N_S_test_S_array_holder_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ARRAY_HOLDER
#define DT_N_S_test_S_array_holder_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_array_holder_P_compatible_IDX_1 "vnd,undefined-compat"
#define DT_N_S_test_S_array_holder_P_compatible_IDX_1_STRING_UNQUOTED vnd,undefined-compat
#define DT_N_S_test_S_array_holder_P_compatible_IDX_1_STRING_TOKEN vnd_undefined_compat
#define DT_N_S_test_S_array_holder_P_compatible_IDX_1_STRING_UPPER_TOKEN VND_UNDEFINED_COMPAT
#define DT_N_S_test_S_array_holder_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_test_S_array_holder_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_array_holder, compatible, 0) \
	fn(DT_N_S_test_S_array_holder, compatible, 1)
#define DT_N_S_test_S_array_holder_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_array_holder, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, compatible, 1)
#define DT_N_S_test_S_array_holder_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_array_holder, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_array_holder, compatible, 1, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_array_holder, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_array_holder, compatible, 1, __VA_ARGS__)
#define DT_N_S_test_S_array_holder_P_compatible_LEN 2
#define DT_N_S_test_S_array_holder_P_compatible_EXISTS 1
#define DT_N_S_test_S_array_holder_P_wakeup_source 0
#define DT_N_S_test_S_array_holder_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_array_holder_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_array_holder_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/can-phy0
 *
 * Node identifier: DT_N_S_test_S_can_phy0
 *
 * Binding (compatible = vnd,can-transceiver):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,can-transceiver.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_can_phy0_PATH "/test/can-phy0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_can_phy0_FULL_NAME "can-phy0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_can_phy0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_can_phy0_CHILD_IDX 44

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_can_phy0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_can_phy0_ORD 40
#define DT_N_S_test_S_can_phy0_ORD_STR_SORTABLE 00040

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_can_phy0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_can_phy0_SUPPORTS_ORDS \
	41, /* /test/can@55553333 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_can_phy0_EXISTS 1
#define DT_N_INST_0_vnd_can_transceiver  DT_N_S_test_S_can_phy0
#define DT_N_NODELABEL_test_transceiver0 DT_N_S_test_S_can_phy0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_can_phy0_REG_NUM 0
#define DT_N_S_test_S_can_phy0_RANGES_NUM 0
#define DT_N_S_test_S_can_phy0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_can_phy0_IRQ_NUM 0
#define DT_N_S_test_S_can_phy0_IRQ_LEVEL 0
#define DT_N_S_test_S_can_phy0_COMPAT_MATCHES_vnd_can_transceiver 1
#define DT_N_S_test_S_can_phy0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_can_phy0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_can_phy0_P_max_bitrate 5000000
#define DT_N_S_test_S_can_phy0_P_max_bitrate_EXISTS 1
#define DT_N_S_test_S_can_phy0_P_status "okay"
#define DT_N_S_test_S_can_phy0_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_can_phy0_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_can_phy0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_can_phy0_P_status_IDX_0 "okay"
#define DT_N_S_test_S_can_phy0_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_phy0_P_status_ENUM_IDX 1
#define DT_N_S_test_S_can_phy0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_can_phy0_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_can_phy0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_can_phy0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_can_phy0, status, 0)
#define DT_N_S_test_S_can_phy0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_can_phy0, status, 0)
#define DT_N_S_test_S_can_phy0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_can_phy0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_phy0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_phy0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_phy0_P_status_LEN 1
#define DT_N_S_test_S_can_phy0_P_status_EXISTS 1
#define DT_N_S_test_S_can_phy0_P_compatible {"vnd,can-transceiver"}
#define DT_N_S_test_S_can_phy0_P_compatible_IDX_0 "vnd,can-transceiver"
#define DT_N_S_test_S_can_phy0_P_compatible_IDX_0_STRING_UNQUOTED vnd,can-transceiver
#define DT_N_S_test_S_can_phy0_P_compatible_IDX_0_STRING_TOKEN vnd_can_transceiver
#define DT_N_S_test_S_can_phy0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_CAN_TRANSCEIVER
#define DT_N_S_test_S_can_phy0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_phy0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_can_phy0, compatible, 0)
#define DT_N_S_test_S_can_phy0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_can_phy0, compatible, 0)
#define DT_N_S_test_S_can_phy0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_can_phy0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_phy0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_phy0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_phy0_P_compatible_LEN 1
#define DT_N_S_test_S_can_phy0_P_compatible_EXISTS 1
#define DT_N_S_test_S_can_phy0_P_wakeup_source 0
#define DT_N_S_test_S_can_phy0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_can_phy0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_can_phy0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/can@55553333
 *
 * Node identifier: DT_N_S_test_S_can_55553333
 *
 * Binding (compatible = vnd,can-controller):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,can-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_can_55553333_PATH "/test/can@55553333"

/* Node's name with unit-address: */
#define DT_N_S_test_S_can_55553333_FULL_NAME "can@55553333"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_can_55553333_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_can_55553333_CHILD_IDX 45

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_can_55553333_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_can_55553333_ORD 41
#define DT_N_S_test_S_can_55553333_ORD_STR_SORTABLE 00041

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_can_55553333_REQUIRES_ORDS \
	21, /* /test */ \
	40, /* /test/can-phy0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_can_55553333_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_can_55553333_EXISTS 1
#define DT_N_INST_0_vnd_can_controller DT_N_S_test_S_can_55553333
#define DT_N_NODELABEL_test_can0       DT_N_S_test_S_can_55553333

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_can_55553333_REG_NUM 1
#define DT_N_S_test_S_can_55553333_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55553333_REG_IDX_0_VAL_ADDRESS 1431647027 /* 0x55553333 */
#define DT_N_S_test_S_can_55553333_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_can_55553333_RANGES_NUM 0
#define DT_N_S_test_S_can_55553333_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_can_55553333_IRQ_NUM 0
#define DT_N_S_test_S_can_55553333_IRQ_LEVEL 0
#define DT_N_S_test_S_can_55553333_COMPAT_MATCHES_vnd_can_controller 1
#define DT_N_S_test_S_can_55553333_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_can_55553333_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_can_55553333_P_bus_speed 125000
#define DT_N_S_test_S_can_55553333_P_bus_speed_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_sample_point 875
#define DT_N_S_test_S_can_55553333_P_sample_point_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_sjw 1
#define DT_N_S_test_S_can_55553333_P_sjw_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_phys DT_N_S_test_S_can_phy0
#define DT_N_S_test_S_can_55553333_P_phys_IDX_0 DT_N_S_test_S_can_phy0
#define DT_N_S_test_S_can_55553333_P_phys_IDX_0_PH DT_N_S_test_S_can_phy0
#define DT_N_S_test_S_can_55553333_P_phys_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_phys_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_can_55553333, phys, 0)
#define DT_N_S_test_S_can_55553333_P_phys_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_can_55553333, phys, 0)
#define DT_N_S_test_S_can_55553333_P_phys_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_can_55553333, phys, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55553333_P_phys_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_55553333, phys, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55553333_P_phys_LEN 1
#define DT_N_S_test_S_can_55553333_P_phys_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_status "okay"
#define DT_N_S_test_S_can_55553333_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_can_55553333_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_can_55553333_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_can_55553333_P_status_IDX_0 "okay"
#define DT_N_S_test_S_can_55553333_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_status_ENUM_IDX 1
#define DT_N_S_test_S_can_55553333_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_can_55553333_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_can_55553333_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_can_55553333, status, 0)
#define DT_N_S_test_S_can_55553333_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_can_55553333, status, 0)
#define DT_N_S_test_S_can_55553333_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_can_55553333, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55553333_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_55553333, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55553333_P_status_LEN 1
#define DT_N_S_test_S_can_55553333_P_status_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_compatible {"vnd,can-controller"}
#define DT_N_S_test_S_can_55553333_P_compatible_IDX_0 "vnd,can-controller"
#define DT_N_S_test_S_can_55553333_P_compatible_IDX_0_STRING_UNQUOTED vnd,can-controller
#define DT_N_S_test_S_can_55553333_P_compatible_IDX_0_STRING_TOKEN vnd_can_controller
#define DT_N_S_test_S_can_55553333_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_CAN_CONTROLLER
#define DT_N_S_test_S_can_55553333_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_can_55553333, compatible, 0)
#define DT_N_S_test_S_can_55553333_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_can_55553333, compatible, 0)
#define DT_N_S_test_S_can_55553333_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_can_55553333, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55553333_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_55553333, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55553333_P_compatible_LEN 1
#define DT_N_S_test_S_can_55553333_P_compatible_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_reg {1431647027 /* 0x55553333 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_can_55553333_P_reg_IDX_0 1431647027
#define DT_N_S_test_S_can_55553333_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_reg_IDX_1 4096
#define DT_N_S_test_S_can_55553333_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_reg_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_wakeup_source 0
#define DT_N_S_test_S_can_55553333_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_can_55553333_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_can_55553333_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/device-with-props-0
 *
 * Node identifier: DT_N_S_test_S_device_with_props_0
 *
 * Binding (compatible = vnd,device-with-props):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,device-with-props.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_device_with_props_0_PATH "/test/device-with-props-0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_device_with_props_0_FULL_NAME "device-with-props-0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_device_with_props_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_device_with_props_0_CHILD_IDX 50

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_device_with_props_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_device_with_props_0_ORD 42
#define DT_N_S_test_S_device_with_props_0_ORD_STR_SORTABLE 00042

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_device_with_props_0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_device_with_props_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_device_with_props_0_EXISTS 1
#define DT_N_INST_0_vnd_device_with_props DT_N_S_test_S_device_with_props_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_device_with_props_0_REG_NUM 0
#define DT_N_S_test_S_device_with_props_0_RANGES_NUM 0
#define DT_N_S_test_S_device_with_props_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_device_with_props_0_IRQ_NUM 0
#define DT_N_S_test_S_device_with_props_0_IRQ_LEVEL 0
#define DT_N_S_test_S_device_with_props_0_COMPAT_MATCHES_vnd_device_with_props 1
#define DT_N_S_test_S_device_with_props_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_device_with_props_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_device_with_props_0_P_foo 1
#define DT_N_S_test_S_device_with_props_0_P_foo_EXISTS 1
#define DT_N_S_test_S_device_with_props_0_P_bar 2
#define DT_N_S_test_S_device_with_props_0_P_bar_EXISTS 1

/*
 * Devicetree node: /test/device-with-props-1
 *
 * Node identifier: DT_N_S_test_S_device_with_props_1
 *
 * Binding (compatible = vnd,device-with-props):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,device-with-props.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_device_with_props_1_PATH "/test/device-with-props-1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_device_with_props_1_FULL_NAME "device-with-props-1"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_device_with_props_1_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_device_with_props_1_CHILD_IDX 51

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_device_with_props_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_device_with_props_1_ORD 43
#define DT_N_S_test_S_device_with_props_1_ORD_STR_SORTABLE 00043

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_device_with_props_1_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_device_with_props_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_device_with_props_1_EXISTS 1
#define DT_N_INST_1_vnd_device_with_props DT_N_S_test_S_device_with_props_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_device_with_props_1_REG_NUM 0
#define DT_N_S_test_S_device_with_props_1_RANGES_NUM 0
#define DT_N_S_test_S_device_with_props_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_device_with_props_1_IRQ_NUM 0
#define DT_N_S_test_S_device_with_props_1_IRQ_LEVEL 0
#define DT_N_S_test_S_device_with_props_1_COMPAT_MATCHES_vnd_device_with_props 1
#define DT_N_S_test_S_device_with_props_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_device_with_props_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_device_with_props_1_P_foo 2
#define DT_N_S_test_S_device_with_props_1_P_foo_EXISTS 1

/*
 * Devicetree node: /test/device-with-props-2
 *
 * Node identifier: DT_N_S_test_S_device_with_props_2
 *
 * Binding (compatible = vnd,device-with-props):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,device-with-props.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_device_with_props_2_PATH "/test/device-with-props-2"

/* Node's name with unit-address: */
#define DT_N_S_test_S_device_with_props_2_FULL_NAME "device-with-props-2"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_device_with_props_2_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_device_with_props_2_CHILD_IDX 52

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_device_with_props_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_device_with_props_2_ORD 44
#define DT_N_S_test_S_device_with_props_2_ORD_STR_SORTABLE 00044

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_device_with_props_2_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_device_with_props_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_device_with_props_2_EXISTS 1
#define DT_N_INST_2_vnd_device_with_props DT_N_S_test_S_device_with_props_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_device_with_props_2_REG_NUM 0
#define DT_N_S_test_S_device_with_props_2_RANGES_NUM 0
#define DT_N_S_test_S_device_with_props_2_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_device_with_props_2_IRQ_NUM 0
#define DT_N_S_test_S_device_with_props_2_IRQ_LEVEL 0
#define DT_N_S_test_S_device_with_props_2_COMPAT_MATCHES_vnd_device_with_props 1
#define DT_N_S_test_S_device_with_props_2_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_device_with_props_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_device_with_props_2_P_baz 1
#define DT_N_S_test_S_device_with_props_2_P_baz_EXISTS 1

/*
 * Devicetree node: /test/disabled-node@0
 *
 * Node identifier: DT_N_S_test_S_disabled_node_0
 *
 * Binding (compatible = vnd,disabled-compat):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,disabled-compat.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_disabled_node_0_PATH "/test/disabled-node@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_disabled_node_0_FULL_NAME "disabled-node@0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_disabled_node_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_disabled_node_0_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_disabled_node_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_disabled_node_0_ORD 45
#define DT_N_S_test_S_disabled_node_0_ORD_STR_SORTABLE 00045

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_disabled_node_0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_disabled_node_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_disabled_node_0_EXISTS 1
#define DT_N_INST_0_vnd_disabled_compat DT_N_S_test_S_disabled_node_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_disabled_node_0_REG_NUM 1
#define DT_N_S_test_S_disabled_node_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_disabled_node_0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_disabled_node_0_RANGES_NUM 0
#define DT_N_S_test_S_disabled_node_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_disabled_node_0_IRQ_NUM 0
#define DT_N_S_test_S_disabled_node_0_IRQ_LEVEL 0
#define DT_N_S_test_S_disabled_node_0_COMPAT_MATCHES_vnd_disabled_compat 1
#define DT_N_S_test_S_disabled_node_0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_disabled_node_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_disabled_node_0_P_status "disabled"
#define DT_N_S_test_S_disabled_node_0_P_status_STRING_UNQUOTED disabled
#define DT_N_S_test_S_disabled_node_0_P_status_STRING_TOKEN disabled
#define DT_N_S_test_S_disabled_node_0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_disabled_node_0_P_status_IDX_0 "disabled"
#define DT_N_S_test_S_disabled_node_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_status_ENUM_IDX 2
#define DT_N_S_test_S_disabled_node_0_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_status_ENUM_TOKEN disabled
#define DT_N_S_test_S_disabled_node_0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_disabled_node_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_disabled_node_0, status, 0)
#define DT_N_S_test_S_disabled_node_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_disabled_node_0, status, 0)
#define DT_N_S_test_S_disabled_node_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_disabled_node_0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_disabled_node_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_disabled_node_0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_disabled_node_0_P_status_LEN 1
#define DT_N_S_test_S_disabled_node_0_P_status_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_compatible {"vnd,disabled-compat"}
#define DT_N_S_test_S_disabled_node_0_P_compatible_IDX_0 "vnd,disabled-compat"
#define DT_N_S_test_S_disabled_node_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,disabled-compat
#define DT_N_S_test_S_disabled_node_0_P_compatible_IDX_0_STRING_TOKEN vnd_disabled_compat
#define DT_N_S_test_S_disabled_node_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_DISABLED_COMPAT
#define DT_N_S_test_S_disabled_node_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_disabled_node_0, compatible, 0)
#define DT_N_S_test_S_disabled_node_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_disabled_node_0, compatible, 0)
#define DT_N_S_test_S_disabled_node_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_disabled_node_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_disabled_node_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_disabled_node_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_disabled_node_0_P_compatible_LEN 1
#define DT_N_S_test_S_disabled_node_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_reg {0 /* 0x0 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_disabled_node_0_P_reg_IDX_0 0
#define DT_N_S_test_S_disabled_node_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_reg_IDX_1 4096
#define DT_N_S_test_S_disabled_node_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_reg_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_wakeup_source 0
#define DT_N_S_test_S_disabled_node_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_disabled_node_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_disabled_node_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/enum-0
 *
 * Node identifier: DT_N_S_test_S_enum_0
 *
 * Binding (compatible = vnd,enum-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_0_PATH "/test/enum-0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_0_FULL_NAME "enum-0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_0_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_0_ORD 46
#define DT_N_S_test_S_enum_0_ORD_STR_SORTABLE 00046

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_0_EXISTS 1
#define DT_N_INST_0_vnd_enum_holder DT_N_S_test_S_enum_0
#define DT_N_NODELABEL_test_enum_0  DT_N_S_test_S_enum_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_0_REG_NUM 0
#define DT_N_S_test_S_enum_0_RANGES_NUM 0
#define DT_N_S_test_S_enum_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_0_IRQ_NUM 0
#define DT_N_S_test_S_enum_0_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_0_COMPAT_MATCHES_vnd_enum_holder 1
#define DT_N_S_test_S_enum_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_0_P_val "zero"
#define DT_N_S_test_S_enum_0_P_val_STRING_UNQUOTED zero
#define DT_N_S_test_S_enum_0_P_val_STRING_TOKEN zero
#define DT_N_S_test_S_enum_0_P_val_STRING_UPPER_TOKEN ZERO
#define DT_N_S_test_S_enum_0_P_val_IDX_0 "zero"
#define DT_N_S_test_S_enum_0_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_0_P_val_ENUM_IDX 0
#define DT_N_S_test_S_enum_0_P_val_ENUM_VAL_zero_EXISTS 1
#define DT_N_S_test_S_enum_0_P_val_ENUM_TOKEN zero
#define DT_N_S_test_S_enum_0_P_val_ENUM_UPPER_TOKEN ZERO
#define DT_N_S_test_S_enum_0_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_0, val, 0)
#define DT_N_S_test_S_enum_0_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_0, val, 0)
#define DT_N_S_test_S_enum_0_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_0, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_0_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_0, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_0_P_val_LEN 1
#define DT_N_S_test_S_enum_0_P_val_EXISTS 1
#define DT_N_S_test_S_enum_0_P_compatible {"vnd,enum-holder"}
#define DT_N_S_test_S_enum_0_P_compatible_IDX_0 "vnd,enum-holder"
#define DT_N_S_test_S_enum_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-holder
#define DT_N_S_test_S_enum_0_P_compatible_IDX_0_STRING_TOKEN vnd_enum_holder
#define DT_N_S_test_S_enum_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_HOLDER
#define DT_N_S_test_S_enum_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_0, compatible, 0)
#define DT_N_S_test_S_enum_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_0, compatible, 0)
#define DT_N_S_test_S_enum_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_0_P_compatible_LEN 1
#define DT_N_S_test_S_enum_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_0_P_wakeup_source 0
#define DT_N_S_test_S_enum_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/enum-1
 *
 * Node identifier: DT_N_S_test_S_enum_1
 *
 * Binding (compatible = vnd,enum-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_1_PATH "/test/enum-1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_1_FULL_NAME "enum-1"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_1_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_1_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_1_ORD 47
#define DT_N_S_test_S_enum_1_ORD_STR_SORTABLE 00047

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_1_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_1_EXISTS 1
#define DT_N_INST_1_vnd_enum_holder DT_N_S_test_S_enum_1
#define DT_N_NODELABEL_test_enum_1  DT_N_S_test_S_enum_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_1_REG_NUM 0
#define DT_N_S_test_S_enum_1_RANGES_NUM 0
#define DT_N_S_test_S_enum_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_1_IRQ_NUM 0
#define DT_N_S_test_S_enum_1_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_1_COMPAT_MATCHES_vnd_enum_holder 1
#define DT_N_S_test_S_enum_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_1_P_val "two"
#define DT_N_S_test_S_enum_1_P_val_STRING_UNQUOTED two
#define DT_N_S_test_S_enum_1_P_val_STRING_TOKEN two
#define DT_N_S_test_S_enum_1_P_val_STRING_UPPER_TOKEN TWO
#define DT_N_S_test_S_enum_1_P_val_IDX_0 "two"
#define DT_N_S_test_S_enum_1_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_1_P_val_ENUM_IDX 2
#define DT_N_S_test_S_enum_1_P_val_ENUM_VAL_two_EXISTS 1
#define DT_N_S_test_S_enum_1_P_val_ENUM_TOKEN two
#define DT_N_S_test_S_enum_1_P_val_ENUM_UPPER_TOKEN TWO
#define DT_N_S_test_S_enum_1_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_1, val, 0)
#define DT_N_S_test_S_enum_1_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_1, val, 0)
#define DT_N_S_test_S_enum_1_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_1, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_1_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_1, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_1_P_val_LEN 1
#define DT_N_S_test_S_enum_1_P_val_EXISTS 1
#define DT_N_S_test_S_enum_1_P_compatible {"vnd,enum-holder"}
#define DT_N_S_test_S_enum_1_P_compatible_IDX_0 "vnd,enum-holder"
#define DT_N_S_test_S_enum_1_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-holder
#define DT_N_S_test_S_enum_1_P_compatible_IDX_0_STRING_TOKEN vnd_enum_holder
#define DT_N_S_test_S_enum_1_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_HOLDER
#define DT_N_S_test_S_enum_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_1, compatible, 0)
#define DT_N_S_test_S_enum_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_1, compatible, 0)
#define DT_N_S_test_S_enum_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_1_P_compatible_LEN 1
#define DT_N_S_test_S_enum_1_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_1_P_wakeup_source 0
#define DT_N_S_test_S_enum_1_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/enum-4
 *
 * Node identifier: DT_N_S_test_S_enum_4
 *
 * Binding (compatible = vnd,enum-int-required-false-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-int-required-false-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_4_PATH "/test/enum-4"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_4_FULL_NAME "enum-4"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_4_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_4_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_4_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_4_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_4_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_4_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_4_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_4_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_4_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_4_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_4_ORD 48
#define DT_N_S_test_S_enum_4_ORD_STR_SORTABLE 00048

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_4_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_4_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_4_EXISTS 1
#define DT_N_INST_0_vnd_enum_int_required_false_holder DT_N_S_test_S_enum_4
#define DT_N_NODELABEL_test_enum_int_default_0         DT_N_S_test_S_enum_4

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_4_REG_NUM 0
#define DT_N_S_test_S_enum_4_RANGES_NUM 0
#define DT_N_S_test_S_enum_4_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_4_IRQ_NUM 0
#define DT_N_S_test_S_enum_4_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_4_COMPAT_MATCHES_vnd_enum_int_required_false_holder 1
#define DT_N_S_test_S_enum_4_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_4_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_4_P_val 5
#define DT_N_S_test_S_enum_4_P_val_ENUM_IDX 0
#define DT_N_S_test_S_enum_4_P_val_ENUM_VAL_5_EXISTS 1
#define DT_N_S_test_S_enum_4_P_val_EXISTS 1
#define DT_N_S_test_S_enum_4_P_compatible {"vnd,enum-int-required-false-holder"}
#define DT_N_S_test_S_enum_4_P_compatible_IDX_0 "vnd,enum-int-required-false-holder"
#define DT_N_S_test_S_enum_4_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-int-required-false-holder
#define DT_N_S_test_S_enum_4_P_compatible_IDX_0_STRING_TOKEN vnd_enum_int_required_false_holder
#define DT_N_S_test_S_enum_4_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_INT_REQUIRED_FALSE_HOLDER
#define DT_N_S_test_S_enum_4_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_4_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_4, compatible, 0)
#define DT_N_S_test_S_enum_4_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_4, compatible, 0)
#define DT_N_S_test_S_enum_4_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_4, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_4_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_4, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_4_P_compatible_LEN 1
#define DT_N_S_test_S_enum_4_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_4_P_wakeup_source 0
#define DT_N_S_test_S_enum_4_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_4_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_4_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/enum-5
 *
 * Node identifier: DT_N_S_test_S_enum_5
 *
 * Binding (compatible = vnd,enum-int-required-false-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-int-required-false-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_5_PATH "/test/enum-5"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_5_FULL_NAME "enum-5"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_5_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_5_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_5_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_5_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_5_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_5_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_5_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_5_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_5_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_5_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_5_ORD 49
#define DT_N_S_test_S_enum_5_ORD_STR_SORTABLE 00049

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_5_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_5_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_5_EXISTS 1
#define DT_N_INST_1_vnd_enum_int_required_false_holder DT_N_S_test_S_enum_5
#define DT_N_NODELABEL_test_enum_int_default_1         DT_N_S_test_S_enum_5

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_5_REG_NUM 0
#define DT_N_S_test_S_enum_5_RANGES_NUM 0
#define DT_N_S_test_S_enum_5_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_5_IRQ_NUM 0
#define DT_N_S_test_S_enum_5_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_5_COMPAT_MATCHES_vnd_enum_int_required_false_holder 1
#define DT_N_S_test_S_enum_5_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_5_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_5_P_compatible {"vnd,enum-int-required-false-holder"}
#define DT_N_S_test_S_enum_5_P_compatible_IDX_0 "vnd,enum-int-required-false-holder"
#define DT_N_S_test_S_enum_5_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-int-required-false-holder
#define DT_N_S_test_S_enum_5_P_compatible_IDX_0_STRING_TOKEN vnd_enum_int_required_false_holder
#define DT_N_S_test_S_enum_5_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_INT_REQUIRED_FALSE_HOLDER
#define DT_N_S_test_S_enum_5_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_5_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_5, compatible, 0)
#define DT_N_S_test_S_enum_5_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_5, compatible, 0)
#define DT_N_S_test_S_enum_5_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_5, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_5_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_5, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_5_P_compatible_LEN 1
#define DT_N_S_test_S_enum_5_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_5_P_wakeup_source 0
#define DT_N_S_test_S_enum_5_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_5_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_5_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/enum-6
 *
 * Node identifier: DT_N_S_test_S_enum_6
 *
 * Binding (compatible = vnd,enum-holder-inst):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-holder-inst.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_6_PATH "/test/enum-6"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_6_FULL_NAME "enum-6"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_6_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_6_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_6_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_6_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_6_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_6_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_6_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_6_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_6_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_6_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_6_ORD 50
#define DT_N_S_test_S_enum_6_ORD_STR_SORTABLE 00050

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_6_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_6_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_6_EXISTS 1
#define DT_N_INST_0_vnd_enum_holder_inst DT_N_S_test_S_enum_6

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_6_REG_NUM 0
#define DT_N_S_test_S_enum_6_RANGES_NUM 0
#define DT_N_S_test_S_enum_6_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_6_IRQ_NUM 0
#define DT_N_S_test_S_enum_6_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_6_COMPAT_MATCHES_vnd_enum_holder_inst 1
#define DT_N_S_test_S_enum_6_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_6_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_6_P_compatible {"vnd,enum-holder-inst"}
#define DT_N_S_test_S_enum_6_P_compatible_IDX_0 "vnd,enum-holder-inst"
#define DT_N_S_test_S_enum_6_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-holder-inst
#define DT_N_S_test_S_enum_6_P_compatible_IDX_0_STRING_TOKEN vnd_enum_holder_inst
#define DT_N_S_test_S_enum_6_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_HOLDER_INST
#define DT_N_S_test_S_enum_6_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_6_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_6, compatible, 0)
#define DT_N_S_test_S_enum_6_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_6, compatible, 0)
#define DT_N_S_test_S_enum_6_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_6, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_6_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_6, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_6_P_compatible_LEN 1
#define DT_N_S_test_S_enum_6_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_6_P_wakeup_source 0
#define DT_N_S_test_S_enum_6_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_6_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_6_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_test_S_enum_6_P_val "zero"
#define DT_N_S_test_S_enum_6_P_val_STRING_UNQUOTED zero
#define DT_N_S_test_S_enum_6_P_val_STRING_TOKEN zero
#define DT_N_S_test_S_enum_6_P_val_STRING_UPPER_TOKEN ZERO
#define DT_N_S_test_S_enum_6_P_val_IDX_0 "zero"
#define DT_N_S_test_S_enum_6_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_6_P_val_ENUM_IDX 0
#define DT_N_S_test_S_enum_6_P_val_ENUM_VAL_zero_EXISTS 1
#define DT_N_S_test_S_enum_6_P_val_ENUM_TOKEN zero
#define DT_N_S_test_S_enum_6_P_val_ENUM_UPPER_TOKEN ZERO
#define DT_N_S_test_S_enum_6_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_6, val, 0)
#define DT_N_S_test_S_enum_6_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_6, val, 0)
#define DT_N_S_test_S_enum_6_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_6, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_6_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_6, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_6_P_val_LEN 1
#define DT_N_S_test_S_enum_6_P_val_EXISTS 1

/*
 * Devicetree node: /test/enum-7
 *
 * Node identifier: DT_N_S_test_S_enum_7
 *
 * Binding (compatible = vnd,enum-required-false-holder-inst):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-required-false-holder-inst.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_7_PATH "/test/enum-7"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_7_FULL_NAME "enum-7"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_7_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_7_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_7_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_7_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_7_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_7_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_7_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_7_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_7_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_7_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_7_ORD 51
#define DT_N_S_test_S_enum_7_ORD_STR_SORTABLE 00051

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_7_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_7_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_7_EXISTS 1
#define DT_N_INST_0_vnd_enum_required_false_holder_inst DT_N_S_test_S_enum_7

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_7_REG_NUM 0
#define DT_N_S_test_S_enum_7_RANGES_NUM 0
#define DT_N_S_test_S_enum_7_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_7_IRQ_NUM 0
#define DT_N_S_test_S_enum_7_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_7_COMPAT_MATCHES_vnd_enum_required_false_holder_inst 1
#define DT_N_S_test_S_enum_7_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_7_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_7_P_compatible {"vnd,enum-required-false-holder-inst"}
#define DT_N_S_test_S_enum_7_P_compatible_IDX_0 "vnd,enum-required-false-holder-inst"
#define DT_N_S_test_S_enum_7_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-required-false-holder-inst
#define DT_N_S_test_S_enum_7_P_compatible_IDX_0_STRING_TOKEN vnd_enum_required_false_holder_inst
#define DT_N_S_test_S_enum_7_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_REQUIRED_FALSE_HOLDER_INST
#define DT_N_S_test_S_enum_7_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_7_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_7, compatible, 0)
#define DT_N_S_test_S_enum_7_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_7, compatible, 0)
#define DT_N_S_test_S_enum_7_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_7, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_7_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_7, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_7_P_compatible_LEN 1
#define DT_N_S_test_S_enum_7_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_7_P_wakeup_source 0
#define DT_N_S_test_S_enum_7_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_7_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_7_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/gpio@0
 *
 * Node identifier: DT_N_S_test_S_gpio_0
 *
 * Binding (compatible = vnd,gpio-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_0_PATH "/test/gpio@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_0_FULL_NAME "gpio@0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_gpio_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_0_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_0_ORD 52
#define DT_N_S_test_S_gpio_0_ORD_STR_SORTABLE 00052

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_0_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_0_EXISTS 1
#define DT_N_INST_2_vnd_gpio_device  DT_N_S_test_S_gpio_0
#define DT_N_NODELABEL_disabled_gpio DT_N_S_test_S_gpio_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_0_REG_NUM 1
#define DT_N_S_test_S_gpio_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_gpio_0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_gpio_0_RANGES_NUM 0
#define DT_N_S_test_S_gpio_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_0_IRQ_NUM 1
#define DT_N_S_test_S_gpio_0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_0_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_test_S_gpio_0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_gpio_0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_0_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_test_S_gpio_0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_gpio_0_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_gpio_0_IRQ_LEVEL 2
#define DT_N_S_test_S_gpio_0_COMPAT_MATCHES_vnd_gpio_device 1
#define DT_N_S_test_S_gpio_0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_gpio_0_P_reg {0 /* 0x0 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_gpio_0_P_reg_IDX_0 0
#define DT_N_S_test_S_gpio_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_reg_IDX_1 4096
#define DT_N_S_test_S_gpio_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_reg_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_gpio_controller 1
#define DT_N_S_test_S_gpio_0_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_ngpios 32
#define DT_N_S_test_S_gpio_0_P_ngpios_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_status "disabled"
#define DT_N_S_test_S_gpio_0_P_status_STRING_UNQUOTED disabled
#define DT_N_S_test_S_gpio_0_P_status_STRING_TOKEN disabled
#define DT_N_S_test_S_gpio_0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_gpio_0_P_status_IDX_0 "disabled"
#define DT_N_S_test_S_gpio_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_status_ENUM_IDX 2
#define DT_N_S_test_S_gpio_0_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_status_ENUM_TOKEN disabled
#define DT_N_S_test_S_gpio_0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_gpio_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_0, status, 0)
#define DT_N_S_test_S_gpio_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_0, status, 0)
#define DT_N_S_test_S_gpio_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_0_P_status_LEN 1
#define DT_N_S_test_S_gpio_0_P_status_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_compatible {"vnd,gpio-device"}
#define DT_N_S_test_S_gpio_0_P_compatible_IDX_0 "vnd,gpio-device"
#define DT_N_S_test_S_gpio_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-device
#define DT_N_S_test_S_gpio_0_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_device
#define DT_N_S_test_S_gpio_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_DEVICE
#define DT_N_S_test_S_gpio_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_0, compatible, 0)
#define DT_N_S_test_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_0, compatible, 0)
#define DT_N_S_test_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_0_P_compatible_LEN 1
#define DT_N_S_test_S_gpio_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_interrupts {3 /* 0x3 */, 1 /* 0x1 */}
#define DT_N_S_test_S_gpio_0_P_interrupts_IDX_0 3
#define DT_N_S_test_S_gpio_0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_interrupts_IDX_1 1
#define DT_N_S_test_S_gpio_0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_interrupts_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_wakeup_source 0
#define DT_N_S_test_S_gpio_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_gpio_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_gpio_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/gpio@1
 *
 * Node identifier: DT_N_S_test_S_gpio_1
 *
 * Binding (compatible = vnd,gpio-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_1_PATH "/test/gpio@1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_1_FULL_NAME "gpio@1"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_gpio_1_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_1_CHILD_IDX 15

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_1_ORD 53
#define DT_N_S_test_S_gpio_1_ORD_STR_SORTABLE 00053

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_1_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_1_EXISTS 1
#define DT_N_INST_3_vnd_gpio_device  DT_N_S_test_S_gpio_1
#define DT_N_NODELABEL_reserved_gpio DT_N_S_test_S_gpio_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_1_REG_NUM 1
#define DT_N_S_test_S_gpio_1_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_test_S_gpio_1_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_gpio_1_RANGES_NUM 0
#define DT_N_S_test_S_gpio_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_1_IRQ_NUM 1
#define DT_N_S_test_S_gpio_1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_test_S_gpio_1_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_gpio_1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_test_S_gpio_1_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_gpio_1_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_gpio_1_IRQ_LEVEL 2
#define DT_N_S_test_S_gpio_1_COMPAT_MATCHES_vnd_gpio_device 1
#define DT_N_S_test_S_gpio_1_STATUS_reserved 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_gpio_1_P_reg {1 /* 0x1 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_gpio_1_P_reg_IDX_0 1
#define DT_N_S_test_S_gpio_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_reg_IDX_1 4096
#define DT_N_S_test_S_gpio_1_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_reg_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_label "TEST_GPIO_1"
#define DT_N_S_test_S_gpio_1_P_label_STRING_UNQUOTED TEST_GPIO_1
#define DT_N_S_test_S_gpio_1_P_label_STRING_TOKEN TEST_GPIO_1
#define DT_N_S_test_S_gpio_1_P_label_STRING_UPPER_TOKEN TEST_GPIO_1
#define DT_N_S_test_S_gpio_1_P_label_IDX_0 "TEST_GPIO_1"
#define DT_N_S_test_S_gpio_1_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_1, label, 0)
#define DT_N_S_test_S_gpio_1_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_1, label, 0)
#define DT_N_S_test_S_gpio_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_1, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_1, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1_P_label_LEN 1
#define DT_N_S_test_S_gpio_1_P_label_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_gpio_controller 1
#define DT_N_S_test_S_gpio_1_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_ngpios 32
#define DT_N_S_test_S_gpio_1_P_ngpios_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_status "reserved"
#define DT_N_S_test_S_gpio_1_P_status_STRING_UNQUOTED reserved
#define DT_N_S_test_S_gpio_1_P_status_STRING_TOKEN reserved
#define DT_N_S_test_S_gpio_1_P_status_STRING_UPPER_TOKEN RESERVED
#define DT_N_S_test_S_gpio_1_P_status_IDX_0 "reserved"
#define DT_N_S_test_S_gpio_1_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_status_ENUM_IDX 3
#define DT_N_S_test_S_gpio_1_P_status_ENUM_VAL_reserved_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_status_ENUM_TOKEN reserved
#define DT_N_S_test_S_gpio_1_P_status_ENUM_UPPER_TOKEN RESERVED
#define DT_N_S_test_S_gpio_1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_1, status, 0)
#define DT_N_S_test_S_gpio_1_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_1, status, 0)
#define DT_N_S_test_S_gpio_1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_1, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_1, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1_P_status_LEN 1
#define DT_N_S_test_S_gpio_1_P_status_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_compatible {"vnd,gpio-device"}
#define DT_N_S_test_S_gpio_1_P_compatible_IDX_0 "vnd,gpio-device"
#define DT_N_S_test_S_gpio_1_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-device
#define DT_N_S_test_S_gpio_1_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_device
#define DT_N_S_test_S_gpio_1_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_DEVICE
#define DT_N_S_test_S_gpio_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_1, compatible, 0)
#define DT_N_S_test_S_gpio_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_1, compatible, 0)
#define DT_N_S_test_S_gpio_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1_P_compatible_LEN 1
#define DT_N_S_test_S_gpio_1_P_compatible_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_interrupts {3 /* 0x3 */, 1 /* 0x1 */}
#define DT_N_S_test_S_gpio_1_P_interrupts_IDX_0 3
#define DT_N_S_test_S_gpio_1_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_interrupts_IDX_1 1
#define DT_N_S_test_S_gpio_1_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_interrupts_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_wakeup_source 0
#define DT_N_S_test_S_gpio_1_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_gpio_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_gpio_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@77778888
 *
 * Node identifier: DT_N_S_test_S_i2c_77778888
 *
 * Binding (compatible = vnd,i2c):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_77778888_PATH "/test/i2c@77778888"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_77778888_FULL_NAME "i2c@77778888"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_i2c_77778888_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_77778888_CHILD_IDX 28

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_77778888_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_77778888_ORD 54
#define DT_N_S_test_S_i2c_77778888_ORD_STR_SORTABLE 00054

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_77778888_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_77778888_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_77778888_EXISTS 1
#define DT_N_INST_2_vnd_i2c       DT_N_S_test_S_i2c_77778888
#define DT_N_NODELABEL_test_i2c_1 DT_N_S_test_S_i2c_77778888

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_77778888_REG_NUM 1
#define DT_N_S_test_S_i2c_77778888_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_REG_IDX_0_VAL_ADDRESS 2004322440 /* 0x77778888 */
#define DT_N_S_test_S_i2c_77778888_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_i2c_77778888_RANGES_NUM 0
#define DT_N_S_test_S_i2c_77778888_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_77778888_IRQ_NUM 2
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_VAL_irq 12
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_VAL_priority 2
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_i2c_77778888_IRQ_LEVEL 2
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_status_VAL_irq DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_VAL_irq
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_status_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_status_VAL_priority DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_VAL_priority
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_status_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_status_CONTROLLER DT_N_S_test_S_i2c_77778888_IRQ_IDX_0_CONTROLLER
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_error_VAL_irq DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_VAL_irq
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_error_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_error_VAL_priority DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_VAL_priority
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_error_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_IRQ_NAME_error_CONTROLLER DT_N_S_test_S_i2c_77778888_IRQ_IDX_1_CONTROLLER
#define DT_N_S_test_S_i2c_77778888_COMPAT_MATCHES_vnd_i2c 1
#define DT_N_S_test_S_i2c_77778888_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_77778888_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_77778888_P_clock_frequency 100000
#define DT_N_S_test_S_i2c_77778888_P_clock_frequency_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_status "okay"
#define DT_N_S_test_S_i2c_77778888_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_i2c_77778888_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_i2c_77778888_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i2c_77778888_P_status_IDX_0 "okay"
#define DT_N_S_test_S_i2c_77778888_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_status_ENUM_IDX 1
#define DT_N_S_test_S_i2c_77778888_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_i2c_77778888_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i2c_77778888_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_77778888, status, 0)
#define DT_N_S_test_S_i2c_77778888_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_77778888, status, 0)
#define DT_N_S_test_S_i2c_77778888_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_77778888, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_77778888_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_77778888, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_77778888_P_status_LEN 1
#define DT_N_S_test_S_i2c_77778888_P_status_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_compatible {"vnd,i2c"}
#define DT_N_S_test_S_i2c_77778888_P_compatible_IDX_0 "vnd,i2c"
#define DT_N_S_test_S_i2c_77778888_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c
#define DT_N_S_test_S_i2c_77778888_P_compatible_IDX_0_STRING_TOKEN vnd_i2c
#define DT_N_S_test_S_i2c_77778888_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C
#define DT_N_S_test_S_i2c_77778888_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_77778888, compatible, 0)
#define DT_N_S_test_S_i2c_77778888_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_77778888, compatible, 0)
#define DT_N_S_test_S_i2c_77778888_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_77778888, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_77778888_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_77778888, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_77778888_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_77778888_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_reg {2004322440 /* 0x77778888 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_i2c_77778888_P_reg_IDX_0 2004322440
#define DT_N_S_test_S_i2c_77778888_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_reg_IDX_1 4096
#define DT_N_S_test_S_i2c_77778888_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupts {11 /* 0xb */, 3 /* 0x3 */, 12 /* 0xc */, 2 /* 0x2 */}
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_0 11
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_1 3
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_2 12
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_3 2
#define DT_N_S_test_S_i2c_77778888_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupts_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names {"status", "error"}
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_0 "status"
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_0_STRING_UNQUOTED status
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_0_STRING_TOKEN status
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN STATUS
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_1 "error"
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_1_STRING_UNQUOTED error
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_1_STRING_TOKEN error
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_1_STRING_UPPER_TOKEN ERROR
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 0) \
	fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 1)
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 1)
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_i2c_77778888, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_LEN 2
#define DT_N_S_test_S_i2c_77778888_P_interrupt_names_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_wakeup_source 0
#define DT_N_S_test_S_i2c_77778888_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_77778888_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_77778888_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/intc_no_status@0
 *
 * Node identifier: DT_N_S_test_S_intc_no_status_0
 *
 * Binding (compatible = vnd,intc):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_intc_no_status_0_PATH "/test/intc_no_status@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_intc_no_status_0_FULL_NAME "intc_no_status@0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_intc_no_status_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_intc_no_status_0_CHILD_IDX 16

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_intc_no_status_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_intc_no_status_0_ORD 55
#define DT_N_S_test_S_intc_no_status_0_ORD_STR_SORTABLE 00055

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_intc_no_status_0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_intc_no_status_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_intc_no_status_0_EXISTS 1
#define DT_N_INST_0_vnd_intc          DT_N_S_test_S_intc_no_status_0
#define DT_N_NODELABEL_test_no_status DT_N_S_test_S_intc_no_status_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_intc_no_status_0_REG_NUM 1
#define DT_N_S_test_S_intc_no_status_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_intc_no_status_0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_intc_no_status_0_RANGES_NUM 0
#define DT_N_S_test_S_intc_no_status_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_intc_no_status_0_IRQ_NUM 0
#define DT_N_S_test_S_intc_no_status_0_IRQ_LEVEL 0
#define DT_N_S_test_S_intc_no_status_0_COMPAT_MATCHES_vnd_intc 1
#define DT_N_S_test_S_intc_no_status_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_intc_no_status_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_intc_no_status_0_P_reg {0 /* 0x0 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_intc_no_status_0_P_reg_IDX_0 0
#define DT_N_S_test_S_intc_no_status_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_P_reg_IDX_1 4096
#define DT_N_S_test_S_intc_no_status_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_P_reg_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_P_interrupt_controller 1
#define DT_N_S_test_S_intc_no_status_0_P_interrupt_controller_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_P_compatible {"vnd,intc"}
#define DT_N_S_test_S_intc_no_status_0_P_compatible_IDX_0 "vnd,intc"
#define DT_N_S_test_S_intc_no_status_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,intc
#define DT_N_S_test_S_intc_no_status_0_P_compatible_IDX_0_STRING_TOKEN vnd_intc
#define DT_N_S_test_S_intc_no_status_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_INTC
#define DT_N_S_test_S_intc_no_status_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_intc_no_status_0, compatible, 0)
#define DT_N_S_test_S_intc_no_status_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_intc_no_status_0, compatible, 0)
#define DT_N_S_test_S_intc_no_status_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_intc_no_status_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_intc_no_status_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_intc_no_status_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_intc_no_status_0_P_compatible_LEN 1
#define DT_N_S_test_S_intc_no_status_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_P_wakeup_source 0
#define DT_N_S_test_S_intc_no_status_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_intc_no_status_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_intc_no_status_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/interrupt-holder
 *
 * Node identifier: DT_N_S_test_S_interrupt_holder
 *
 * Binding (compatible = vnd,interrupt-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,interrupt-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_interrupt_holder_PATH "/test/interrupt-holder"

/* Node's name with unit-address: */
#define DT_N_S_test_S_interrupt_holder_FULL_NAME "interrupt-holder"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_interrupt_holder_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_interrupt_holder_CHILD_IDX 35

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_holder_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_interrupt_holder_ORD 56
#define DT_N_S_test_S_interrupt_holder_ORD_STR_SORTABLE 00056

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_interrupt_holder_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_interrupt_holder_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_interrupt_holder_EXISTS 1
#define DT_N_INST_0_vnd_interrupt_holder DT_N_S_test_S_interrupt_holder
#define DT_N_NODELABEL_test_irq          DT_N_S_test_S_interrupt_holder

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_interrupt_holder_REG_NUM 0
#define DT_N_S_test_S_interrupt_holder_RANGES_NUM 0
#define DT_N_S_test_S_interrupt_holder_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_interrupt_holder_IRQ_NUM 3
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_VAL_irq 30
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_VAL_irq 40
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_VAL_priority 5
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_VAL_irq 60
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_VAL_priority 7
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_interrupt_holder_IRQ_LEVEL 2
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_err_VAL_irq DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_VAL_irq
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_err_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_err_VAL_priority DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_VAL_priority
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_err_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_err_CONTROLLER DT_N_S_test_S_interrupt_holder_IRQ_IDX_0_CONTROLLER
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_stat_VAL_irq DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_VAL_irq
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_stat_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_stat_VAL_priority DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_VAL_priority
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_stat_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_stat_CONTROLLER DT_N_S_test_S_interrupt_holder_IRQ_IDX_1_CONTROLLER
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_done_VAL_irq DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_VAL_irq
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_done_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_done_VAL_priority DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_VAL_priority
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_done_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_IRQ_NAME_done_CONTROLLER DT_N_S_test_S_interrupt_holder_IRQ_IDX_2_CONTROLLER
#define DT_N_S_test_S_interrupt_holder_COMPAT_MATCHES_vnd_interrupt_holder 1
#define DT_N_S_test_S_interrupt_holder_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_interrupt_holder_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_interrupt_holder_P_interrupts {30 /* 0x1e */, 3 /* 0x3 */, 40 /* 0x28 */, 5 /* 0x5 */, 60 /* 0x3c */, 7 /* 0x7 */}
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_0 30
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_1 3
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_2 40
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_3 5
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_4 60
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_5 7
#define DT_N_S_test_S_interrupt_holder_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupts_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names {"err", "stat", "done"}
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_0 "err"
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_0_STRING_UNQUOTED err
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_0_STRING_TOKEN err
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN ERR
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_1 "stat"
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_1_STRING_UNQUOTED stat
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_1_STRING_TOKEN stat
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_1_STRING_UPPER_TOKEN STAT
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_2 "done"
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_2_STRING_UNQUOTED done
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_2_STRING_TOKEN done
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_2_STRING_UPPER_TOKEN DONE
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_IDX_2_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 0) \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 1) \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 2)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 2)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_interrupt_holder, interrupt_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_LEN 3
#define DT_N_S_test_S_interrupt_holder_P_interrupt_names_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_status "okay"
#define DT_N_S_test_S_interrupt_holder_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_interrupt_holder_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_interrupt_holder_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_interrupt_holder_P_status_IDX_0 "okay"
#define DT_N_S_test_S_interrupt_holder_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_status_ENUM_IDX 1
#define DT_N_S_test_S_interrupt_holder_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_interrupt_holder_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_interrupt_holder_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_holder, status, 0)
#define DT_N_S_test_S_interrupt_holder_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_holder, status, 0)
#define DT_N_S_test_S_interrupt_holder_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_holder, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_holder, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_status_LEN 1
#define DT_N_S_test_S_interrupt_holder_P_status_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_compatible {"vnd,interrupt-holder"}
#define DT_N_S_test_S_interrupt_holder_P_compatible_IDX_0 "vnd,interrupt-holder"
#define DT_N_S_test_S_interrupt_holder_P_compatible_IDX_0_STRING_UNQUOTED vnd,interrupt-holder
#define DT_N_S_test_S_interrupt_holder_P_compatible_IDX_0_STRING_TOKEN vnd_interrupt_holder
#define DT_N_S_test_S_interrupt_holder_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_INTERRUPT_HOLDER
#define DT_N_S_test_S_interrupt_holder_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_holder, compatible, 0)
#define DT_N_S_test_S_interrupt_holder_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_holder, compatible, 0)
#define DT_N_S_test_S_interrupt_holder_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_holder, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_holder, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_compatible_LEN 1
#define DT_N_S_test_S_interrupt_holder_P_compatible_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_IDX_0 DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_IDX_0_PH DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_holder, interrupt_parent, 0)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_holder, interrupt_parent, 0)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_holder, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_holder, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_LEN 1
#define DT_N_S_test_S_interrupt_holder_P_interrupt_parent_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_wakeup_source 0
#define DT_N_S_test_S_interrupt_holder_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_interrupt_holder_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/gpio@1234abcd
 *
 * Node identifier: DT_N_S_test_S_gpio_1234abcd
 *
 * Binding (compatible = vnd,gpio-intc-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-intc-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_1234abcd_PATH "/test/gpio@1234abcd"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_1234abcd_FULL_NAME "gpio@1234abcd"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_gpio_1234abcd_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_1234abcd_CHILD_IDX 20

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_1234abcd_ORD 57
#define DT_N_S_test_S_gpio_1234abcd_ORD_STR_SORTABLE 00057

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_1234abcd_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_1234abcd_SUPPORTS_ORDS \
	58, /* /test/interrupt-holder-extended */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_1234abcd_EXISTS 1
#define DT_N_INST_0_vnd_gpio_intc_device DT_N_S_test_S_gpio_1234abcd
#define DT_N_NODELABEL_test_gpio_4       DT_N_S_test_S_gpio_1234abcd

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_1234abcd_REG_NUM 1
#define DT_N_S_test_S_gpio_1234abcd_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_REG_IDX_0_VAL_ADDRESS 305441741 /* 0x1234abcd */
#define DT_N_S_test_S_gpio_1234abcd_REG_IDX_0_VAL_SIZE 1280 /* 0x500 */
#define DT_N_S_test_S_gpio_1234abcd_RANGES_NUM 0
#define DT_N_S_test_S_gpio_1234abcd_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_1234abcd_IRQ_NUM 0
#define DT_N_S_test_S_gpio_1234abcd_IRQ_LEVEL 0
#define DT_N_S_test_S_gpio_1234abcd_COMPAT_MATCHES_vnd_gpio_intc_device 1
#define DT_N_S_test_S_gpio_1234abcd_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_1234abcd_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_gpio_1234abcd_P_reg {305441741 /* 0x1234abcd */, 1280 /* 0x500 */}
#define DT_N_S_test_S_gpio_1234abcd_P_reg_IDX_0 305441741
#define DT_N_S_test_S_gpio_1234abcd_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_reg_IDX_1 1280
#define DT_N_S_test_S_gpio_1234abcd_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_reg_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_gpio_controller 1
#define DT_N_S_test_S_gpio_1234abcd_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_ngpios 32
#define DT_N_S_test_S_gpio_1234abcd_P_ngpios_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_interrupt_controller 1
#define DT_N_S_test_S_gpio_1234abcd_P_interrupt_controller_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_status "okay"
#define DT_N_S_test_S_gpio_1234abcd_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_gpio_1234abcd_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_gpio_1234abcd_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_1234abcd_P_status_IDX_0 "okay"
#define DT_N_S_test_S_gpio_1234abcd_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_status_ENUM_IDX 1
#define DT_N_S_test_S_gpio_1234abcd_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_gpio_1234abcd_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_1234abcd_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_1234abcd, status, 0)
#define DT_N_S_test_S_gpio_1234abcd_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_1234abcd, status, 0)
#define DT_N_S_test_S_gpio_1234abcd_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_1234abcd, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234abcd_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_1234abcd, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234abcd_P_status_LEN 1
#define DT_N_S_test_S_gpio_1234abcd_P_status_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_compatible {"vnd,gpio-intc-device"}
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_IDX_0 "vnd,gpio-intc-device"
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-intc-device
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_intc_device
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_INTC_DEVICE
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_1234abcd, compatible, 0)
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_1234abcd, compatible, 0)
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_1234abcd, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_1234abcd, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_LEN 1
#define DT_N_S_test_S_gpio_1234abcd_P_compatible_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_wakeup_source 0
#define DT_N_S_test_S_gpio_1234abcd_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_gpio_1234abcd_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_gpio_1234abcd_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/interrupt-holder-extended
 *
 * Node identifier: DT_N_S_test_S_interrupt_holder_extended
 *
 * Binding (compatible = vnd,interrupt-holder-extended):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,interrupt-holder-extended.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_interrupt_holder_extended_PATH "/test/interrupt-holder-extended"

/* Node's name with unit-address: */
#define DT_N_S_test_S_interrupt_holder_extended_FULL_NAME "interrupt-holder-extended"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_interrupt_holder_extended_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_interrupt_holder_extended_CHILD_IDX 36

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_interrupt_holder_extended_ORD 58
#define DT_N_S_test_S_interrupt_holder_extended_ORD_STR_SORTABLE 00058

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_interrupt_holder_extended_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */ \
	57, /* /test/gpio@1234abcd */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_interrupt_holder_extended_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_interrupt_holder_extended_EXISTS 1
#define DT_N_INST_0_vnd_interrupt_holder_extended DT_N_S_test_S_interrupt_holder_extended
#define DT_N_NODELABEL_test_irq_extended          DT_N_S_test_S_interrupt_holder_extended

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_interrupt_holder_extended_REG_NUM 0
#define DT_N_S_test_S_interrupt_holder_extended_RANGES_NUM 0
#define DT_N_S_test_S_interrupt_holder_extended_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NUM 2
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_VAL_irq 70
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_VAL_priority 7
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_VAL_pin 30
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_VAL_pin_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_VAL_flags 3
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_CONTROLLER DT_N_S_test_S_gpio_1234abcd
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_LEVEL 2
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int1_VAL_irq DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_VAL_irq
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int1_VAL_irq_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int1_VAL_priority DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_VAL_priority
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int1_VAL_priority_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int1_CONTROLLER DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_0_CONTROLLER
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int2_VAL_pin DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_VAL_pin
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int2_VAL_pin_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int2_VAL_flags DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_VAL_flags
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int2_VAL_flags_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_IRQ_NAME_int2_CONTROLLER DT_N_S_test_S_interrupt_holder_extended_IRQ_IDX_1_CONTROLLER
#define DT_N_S_test_S_interrupt_holder_extended_COMPAT_MATCHES_vnd_interrupt_holder_extended 1
#define DT_N_S_test_S_interrupt_holder_extended_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_interrupt_holder_extended_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names {"int1", "int2"}
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_0 "int1"
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_0_STRING_UNQUOTED int1
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_0_STRING_TOKEN int1
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN INT1
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_1 "int2"
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_1_STRING_UNQUOTED int2
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_1_STRING_TOKEN int2
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_1_STRING_UPPER_TOKEN INT2
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 0) \
	fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 1)
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 1)
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_interrupt_holder_extended, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_LEN 2
#define DT_N_S_test_S_interrupt_holder_extended_P_interrupt_names_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_status "okay"
#define DT_N_S_test_S_interrupt_holder_extended_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_interrupt_holder_extended_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_interrupt_holder_extended_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_interrupt_holder_extended_P_status_IDX_0 "okay"
#define DT_N_S_test_S_interrupt_holder_extended_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_status_ENUM_IDX 1
#define DT_N_S_test_S_interrupt_holder_extended_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_interrupt_holder_extended_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_interrupt_holder_extended_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_holder_extended, status, 0)
#define DT_N_S_test_S_interrupt_holder_extended_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_holder_extended, status, 0)
#define DT_N_S_test_S_interrupt_holder_extended_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_holder_extended, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_extended_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_holder_extended, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_extended_P_status_LEN 1
#define DT_N_S_test_S_interrupt_holder_extended_P_status_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible {"vnd,interrupt-holder-extended"}
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_IDX_0 "vnd,interrupt-holder-extended"
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_IDX_0_STRING_UNQUOTED vnd,interrupt-holder-extended
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_IDX_0_STRING_TOKEN vnd_interrupt_holder_extended
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_INTERRUPT_HOLDER_EXTENDED
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_interrupt_holder_extended, compatible, 0)
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_interrupt_holder_extended, compatible, 0)
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_interrupt_holder_extended, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_interrupt_holder_extended, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_LEN 1
#define DT_N_S_test_S_interrupt_holder_extended_P_compatible_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_wakeup_source 0
#define DT_N_S_test_S_interrupt_holder_extended_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_interrupt_holder_extended_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_interrupt_holder_extended_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/enum-2
 *
 * Node identifier: DT_N_S_test_S_enum_2
 *
 * Binding (compatible = vnd,enum-required-false-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-required-false-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_2_PATH "/test/enum-2"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_2_FULL_NAME "enum-2"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_2_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_2_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_2_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_2_ORD 59
#define DT_N_S_test_S_enum_2_ORD_STR_SORTABLE 00059

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_2_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_2_SUPPORTS_ORDS \
	67, /* /test/phandle-holder-0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_2_EXISTS 1
#define DT_N_INST_0_vnd_enum_required_false_holder DT_N_S_test_S_enum_2
#define DT_N_NODELABEL_test_enum_default_0         DT_N_S_test_S_enum_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_2_REG_NUM 0
#define DT_N_S_test_S_enum_2_RANGES_NUM 0
#define DT_N_S_test_S_enum_2_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_2_IRQ_NUM 0
#define DT_N_S_test_S_enum_2_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_2_COMPAT_MATCHES_vnd_enum_required_false_holder 1
#define DT_N_S_test_S_enum_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_2_P_val "one"
#define DT_N_S_test_S_enum_2_P_val_STRING_UNQUOTED one
#define DT_N_S_test_S_enum_2_P_val_STRING_TOKEN one
#define DT_N_S_test_S_enum_2_P_val_STRING_UPPER_TOKEN ONE
#define DT_N_S_test_S_enum_2_P_val_IDX_0 "one"
#define DT_N_S_test_S_enum_2_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_2_P_val_ENUM_IDX 1
#define DT_N_S_test_S_enum_2_P_val_ENUM_VAL_one_EXISTS 1
#define DT_N_S_test_S_enum_2_P_val_ENUM_TOKEN one
#define DT_N_S_test_S_enum_2_P_val_ENUM_UPPER_TOKEN ONE
#define DT_N_S_test_S_enum_2_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_2, val, 0)
#define DT_N_S_test_S_enum_2_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_2, val, 0)
#define DT_N_S_test_S_enum_2_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_2, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_2_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_2, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_2_P_val_LEN 1
#define DT_N_S_test_S_enum_2_P_val_EXISTS 1
#define DT_N_S_test_S_enum_2_P_compatible {"vnd,enum-required-false-holder"}
#define DT_N_S_test_S_enum_2_P_compatible_IDX_0 "vnd,enum-required-false-holder"
#define DT_N_S_test_S_enum_2_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-required-false-holder
#define DT_N_S_test_S_enum_2_P_compatible_IDX_0_STRING_TOKEN vnd_enum_required_false_holder
#define DT_N_S_test_S_enum_2_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_REQUIRED_FALSE_HOLDER
#define DT_N_S_test_S_enum_2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_2, compatible, 0)
#define DT_N_S_test_S_enum_2_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_2, compatible, 0)
#define DT_N_S_test_S_enum_2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_2_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_2_P_compatible_LEN 1
#define DT_N_S_test_S_enum_2_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_2_P_wakeup_source 0
#define DT_N_S_test_S_enum_2_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_2_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_2_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/enum-3
 *
 * Node identifier: DT_N_S_test_S_enum_3
 *
 * Binding (compatible = vnd,enum-required-false-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,enum-required-false-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_enum_3_PATH "/test/enum-3"

/* Node's name with unit-address: */
#define DT_N_S_test_S_enum_3_FULL_NAME "enum-3"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_enum_3_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_enum_3_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_enum_3_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_enum_3_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_enum_3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_3_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_enum_3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_enum_3_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_enum_3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_enum_3_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_enum_3_ORD 60
#define DT_N_S_test_S_enum_3_ORD_STR_SORTABLE 00060

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_enum_3_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_enum_3_SUPPORTS_ORDS \
	67, /* /test/phandle-holder-0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_enum_3_EXISTS 1
#define DT_N_INST_1_vnd_enum_required_false_holder DT_N_S_test_S_enum_3
#define DT_N_NODELABEL_test_enum_default_1         DT_N_S_test_S_enum_3

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_enum_3_REG_NUM 0
#define DT_N_S_test_S_enum_3_RANGES_NUM 0
#define DT_N_S_test_S_enum_3_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_enum_3_IRQ_NUM 0
#define DT_N_S_test_S_enum_3_IRQ_LEVEL 0
#define DT_N_S_test_S_enum_3_COMPAT_MATCHES_vnd_enum_required_false_holder 1
#define DT_N_S_test_S_enum_3_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_enum_3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_enum_3_P_compatible {"vnd,enum-required-false-holder"}
#define DT_N_S_test_S_enum_3_P_compatible_IDX_0 "vnd,enum-required-false-holder"
#define DT_N_S_test_S_enum_3_P_compatible_IDX_0_STRING_UNQUOTED vnd,enum-required-false-holder
#define DT_N_S_test_S_enum_3_P_compatible_IDX_0_STRING_TOKEN vnd_enum_required_false_holder
#define DT_N_S_test_S_enum_3_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ENUM_REQUIRED_FALSE_HOLDER
#define DT_N_S_test_S_enum_3_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_enum_3_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_enum_3, compatible, 0)
#define DT_N_S_test_S_enum_3_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_enum_3, compatible, 0)
#define DT_N_S_test_S_enum_3_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_enum_3, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_3_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_enum_3, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_enum_3_P_compatible_LEN 1
#define DT_N_S_test_S_enum_3_P_compatible_EXISTS 1
#define DT_N_S_test_S_enum_3_P_wakeup_source 0
#define DT_N_S_test_S_enum_3_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_enum_3_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_enum_3_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/gpio@1234
 *
 * Node identifier: DT_N_S_test_S_gpio_1234
 *
 * Binding (compatible = vnd,gpio-one-cell):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-one-cell.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_1234_PATH "/test/gpio@1234"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_1234_FULL_NAME "gpio@1234"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_gpio_1234_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_1234_CHILD_IDX 19

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_1234_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_1234_ORD 61
#define DT_N_S_test_S_gpio_1234_ORD_STR_SORTABLE 00061

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_1234_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_1234_SUPPORTS_ORDS \
	67, /* /test/phandle-holder-0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_1234_EXISTS 1
#define DT_N_INST_0_vnd_gpio_one_cell DT_N_S_test_S_gpio_1234
#define DT_N_NODELABEL_test_gpio_3    DT_N_S_test_S_gpio_1234

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_1234_REG_NUM 1
#define DT_N_S_test_S_gpio_1234_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234_REG_IDX_0_VAL_ADDRESS 4660 /* 0x1234 */
#define DT_N_S_test_S_gpio_1234_REG_IDX_0_VAL_SIZE 1280 /* 0x500 */
#define DT_N_S_test_S_gpio_1234_RANGES_NUM 0
#define DT_N_S_test_S_gpio_1234_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_1234_IRQ_NUM 0
#define DT_N_S_test_S_gpio_1234_IRQ_LEVEL 0
#define DT_N_S_test_S_gpio_1234_COMPAT_MATCHES_vnd_gpio_one_cell 1
#define DT_N_S_test_S_gpio_1234_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_1234_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_gpio_1234_P_reg {4660 /* 0x1234 */, 1280 /* 0x500 */}
#define DT_N_S_test_S_gpio_1234_P_reg_IDX_0 4660
#define DT_N_S_test_S_gpio_1234_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_reg_IDX_1 1280
#define DT_N_S_test_S_gpio_1234_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_reg_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_gpio_controller 1
#define DT_N_S_test_S_gpio_1234_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_ngpios 32
#define DT_N_S_test_S_gpio_1234_P_ngpios_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_status "okay"
#define DT_N_S_test_S_gpio_1234_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_gpio_1234_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_gpio_1234_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_1234_P_status_IDX_0 "okay"
#define DT_N_S_test_S_gpio_1234_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_status_ENUM_IDX 1
#define DT_N_S_test_S_gpio_1234_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_gpio_1234_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_1234_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_1234, status, 0)
#define DT_N_S_test_S_gpio_1234_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_1234, status, 0)
#define DT_N_S_test_S_gpio_1234_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_1234, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_1234, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234_P_status_LEN 1
#define DT_N_S_test_S_gpio_1234_P_status_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_compatible {"vnd,gpio-one-cell"}
#define DT_N_S_test_S_gpio_1234_P_compatible_IDX_0 "vnd,gpio-one-cell"
#define DT_N_S_test_S_gpio_1234_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-one-cell
#define DT_N_S_test_S_gpio_1234_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_one_cell
#define DT_N_S_test_S_gpio_1234_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_ONE_CELL
#define DT_N_S_test_S_gpio_1234_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_1234, compatible, 0)
#define DT_N_S_test_S_gpio_1234_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_1234, compatible, 0)
#define DT_N_S_test_S_gpio_1234_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_1234, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_1234, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_1234_P_compatible_LEN 1
#define DT_N_S_test_S_gpio_1234_P_compatible_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_wakeup_source 0
#define DT_N_S_test_S_gpio_1234_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_gpio_1234_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_gpio_1234_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/gpio@abcd1234
 *
 * Node identifier: DT_N_S_test_S_gpio_abcd1234
 *
 * Binding (compatible = vnd,gpio-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_abcd1234_PATH "/test/gpio@abcd1234"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_abcd1234_FULL_NAME "gpio@abcd1234"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_gpio_abcd1234_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_abcd1234_CHILD_IDX 18

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD(fn) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3)
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3)
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3)
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3)
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_abcd1234_ORD 62
#define DT_N_S_test_S_gpio_abcd1234_ORD_STR_SORTABLE 00062

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_abcd1234_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_abcd1234_SUPPORTS_ORDS \
	66, /* /test/spi@33334444 */ \
	67, /* /test/phandle-holder-0 */ \
	99, /* /test/gpio@abcd1234/test_gpio_hog_3 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_abcd1234_EXISTS 1
#define DT_N_INST_1_vnd_gpio_device DT_N_S_test_S_gpio_abcd1234
#define DT_N_NODELABEL_test_gpio_2  DT_N_S_test_S_gpio_abcd1234

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_abcd1234_REG_NUM 2
#define DT_N_S_test_S_gpio_abcd1234_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_REG_IDX_0_VAL_ADDRESS 2882343476 /* 0xabcd1234 */
#define DT_N_S_test_S_gpio_abcd1234_REG_IDX_0_VAL_SIZE 1280 /* 0x500 */
#define DT_N_S_test_S_gpio_abcd1234_REG_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_REG_IDX_1_VAL_ADDRESS 2557891634 /* 0x98765432 */
#define DT_N_S_test_S_gpio_abcd1234_REG_IDX_1_VAL_SIZE 255 /* 0xff */
#define DT_N_S_test_S_gpio_abcd1234_REG_NAME_one_VAL_ADDRESS DT_N_S_test_S_gpio_abcd1234_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_test_S_gpio_abcd1234_REG_NAME_one_VAL_SIZE DT_N_S_test_S_gpio_abcd1234_REG_IDX_0_VAL_SIZE
#define DT_N_S_test_S_gpio_abcd1234_REG_NAME_two_VAL_ADDRESS DT_N_S_test_S_gpio_abcd1234_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_test_S_gpio_abcd1234_REG_NAME_two_VAL_SIZE DT_N_S_test_S_gpio_abcd1234_REG_IDX_1_VAL_SIZE
#define DT_N_S_test_S_gpio_abcd1234_RANGES_NUM 0
#define DT_N_S_test_S_gpio_abcd1234_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_abcd1234_IRQ_NUM 1
#define DT_N_S_test_S_gpio_abcd1234_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_IRQ_IDX_0_VAL_irq 5
#define DT_N_S_test_S_gpio_abcd1234_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_IRQ_IDX_0_VAL_priority 2
#define DT_N_S_test_S_gpio_abcd1234_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_gpio_abcd1234_IRQ_LEVEL 2
#define DT_N_S_test_S_gpio_abcd1234_COMPAT_MATCHES_vnd_gpio_device 1
#define DT_N_S_test_S_gpio_abcd1234_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_abcd1234_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_gpio_abcd1234_P_reg {2882343476 /* 0xabcd1234 */, 1280 /* 0x500 */, 2557891634 /* 0x98765432 */, 255 /* 0xff */}
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_0 2882343476
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_1 1280
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_2 2557891634
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_2_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_3 255
#define DT_N_S_test_S_gpio_abcd1234_P_reg_IDX_3_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_reg_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_label "TEST_GPIO_2"
#define DT_N_S_test_S_gpio_abcd1234_P_label_STRING_UNQUOTED TEST_GPIO_2
#define DT_N_S_test_S_gpio_abcd1234_P_label_STRING_TOKEN TEST_GPIO_2
#define DT_N_S_test_S_gpio_abcd1234_P_label_STRING_UPPER_TOKEN TEST_GPIO_2
#define DT_N_S_test_S_gpio_abcd1234_P_label_IDX_0 "TEST_GPIO_2"
#define DT_N_S_test_S_gpio_abcd1234_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_abcd1234, label, 0)
#define DT_N_S_test_S_gpio_abcd1234_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234, label, 0)
#define DT_N_S_test_S_gpio_abcd1234_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_label_LEN 1
#define DT_N_S_test_S_gpio_abcd1234_P_label_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_gpio_controller 1
#define DT_N_S_test_S_gpio_abcd1234_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_ngpios 200
#define DT_N_S_test_S_gpio_abcd1234_P_ngpios_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_status "okay"
#define DT_N_S_test_S_gpio_abcd1234_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_gpio_abcd1234_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_gpio_abcd1234_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_abcd1234_P_status_IDX_0 "okay"
#define DT_N_S_test_S_gpio_abcd1234_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_status_ENUM_IDX 1
#define DT_N_S_test_S_gpio_abcd1234_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_gpio_abcd1234_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_gpio_abcd1234_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_abcd1234, status, 0)
#define DT_N_S_test_S_gpio_abcd1234_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234, status, 0)
#define DT_N_S_test_S_gpio_abcd1234_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_status_LEN 1
#define DT_N_S_test_S_gpio_abcd1234_P_status_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_compatible {"vnd,gpio-device"}
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_IDX_0 "vnd,gpio-device"
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-device
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_device
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_DEVICE
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_abcd1234, compatible, 0)
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234, compatible, 0)
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_LEN 1
#define DT_N_S_test_S_gpio_abcd1234_P_compatible_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names {"one", "two"}
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_0 "one"
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_0_STRING_UNQUOTED one
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_0_STRING_TOKEN one
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_0_STRING_UPPER_TOKEN ONE
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_1 "two"
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_1_STRING_UNQUOTED two
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_1_STRING_TOKEN two
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_1_STRING_UPPER_TOKEN TWO
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 0) \
	fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 1)
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 1)
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_abcd1234, reg_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_LEN 2
#define DT_N_S_test_S_gpio_abcd1234_P_reg_names_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_interrupts {5 /* 0x5 */, 2 /* 0x2 */}
#define DT_N_S_test_S_gpio_abcd1234_P_interrupts_IDX_0 5
#define DT_N_S_test_S_gpio_abcd1234_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_interrupts_IDX_1 2
#define DT_N_S_test_S_gpio_abcd1234_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_interrupts_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_wakeup_source 0
#define DT_N_S_test_S_gpio_abcd1234_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_gpio_abcd1234_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222
 *
 * Binding (compatible = vnd,i2c):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_PATH "/test/i2c@11112222"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_FULL_NAME "i2c@11112222"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_i2c_11112222_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_CHILD_IDX 21

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD(fn) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12)
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_gpio_11) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12)
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12)
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_gpio_11) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12)
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_ORD 63
#define DT_N_S_test_S_i2c_11112222_ORD_STR_SORTABLE 00063

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_SUPPORTS_ORDS \
	67, /* /test/phandle-holder-0 */ \
	104, /* /test/i2c@11112222/gpio@11 */ \
	105, /* /test/i2c@11112222/test-i2c-dev@10 */ \
	106, /* /test/i2c@11112222/i2c-mux@12 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_EXISTS 1
#define DT_N_INST_0_vnd_i2c     DT_N_S_test_S_i2c_11112222
#define DT_N_NODELABEL_test_i2c DT_N_S_test_S_i2c_11112222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_REG_NUM 1
#define DT_N_S_test_S_i2c_11112222_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_REG_IDX_0_VAL_ADDRESS 286335522 /* 0x11112222 */
#define DT_N_S_test_S_i2c_11112222_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_i2c_11112222_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_IRQ_NUM 2
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_VAL_irq 6
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_VAL_priority 2
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_VAL_irq 7
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_VAL_priority 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_i2c_11112222_IRQ_LEVEL 2
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_status_VAL_irq DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_VAL_irq
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_status_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_status_VAL_priority DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_VAL_priority
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_status_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_status_CONTROLLER DT_N_S_test_S_i2c_11112222_IRQ_IDX_0_CONTROLLER
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_error_VAL_irq DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_VAL_irq
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_error_VAL_irq_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_error_VAL_priority DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_VAL_priority
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_error_VAL_priority_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_IRQ_NAME_error_CONTROLLER DT_N_S_test_S_i2c_11112222_IRQ_IDX_1_CONTROLLER
#define DT_N_S_test_S_i2c_11112222_COMPAT_MATCHES_vnd_i2c 1
#define DT_N_S_test_S_i2c_11112222_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_P_label "TEST_I2C_CTLR"
#define DT_N_S_test_S_i2c_11112222_P_label_STRING_UNQUOTED TEST_I2C_CTLR
#define DT_N_S_test_S_i2c_11112222_P_label_STRING_TOKEN TEST_I2C_CTLR
#define DT_N_S_test_S_i2c_11112222_P_label_STRING_UPPER_TOKEN TEST_I2C_CTLR
#define DT_N_S_test_S_i2c_11112222_P_label_IDX_0 "TEST_I2C_CTLR"
#define DT_N_S_test_S_i2c_11112222_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222, label, 0)
#define DT_N_S_test_S_i2c_11112222_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222, label, 0)
#define DT_N_S_test_S_i2c_11112222_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_label_LEN 1
#define DT_N_S_test_S_i2c_11112222_P_label_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_clock_frequency 100000
#define DT_N_S_test_S_i2c_11112222_P_clock_frequency_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_status "okay"
#define DT_N_S_test_S_i2c_11112222_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_i2c_11112222_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_i2c_11112222_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i2c_11112222_P_status_IDX_0 "okay"
#define DT_N_S_test_S_i2c_11112222_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_status_ENUM_IDX 1
#define DT_N_S_test_S_i2c_11112222_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_i2c_11112222_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i2c_11112222_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222, status, 0)
#define DT_N_S_test_S_i2c_11112222_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222, status, 0)
#define DT_N_S_test_S_i2c_11112222_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_status_LEN 1
#define DT_N_S_test_S_i2c_11112222_P_status_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_compatible {"vnd,i2c"}
#define DT_N_S_test_S_i2c_11112222_P_compatible_IDX_0 "vnd,i2c"
#define DT_N_S_test_S_i2c_11112222_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c
#define DT_N_S_test_S_i2c_11112222_P_compatible_IDX_0_STRING_TOKEN vnd_i2c
#define DT_N_S_test_S_i2c_11112222_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C
#define DT_N_S_test_S_i2c_11112222_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_reg {286335522 /* 0x11112222 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_i2c_11112222_P_reg_IDX_0 286335522
#define DT_N_S_test_S_i2c_11112222_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_reg_IDX_1 4096
#define DT_N_S_test_S_i2c_11112222_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupts {6 /* 0x6 */, 2 /* 0x2 */, 7 /* 0x7 */, 1 /* 0x1 */}
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_0 6
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_1 2
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_2 7
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_3 1
#define DT_N_S_test_S_i2c_11112222_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupts_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names {"status", "error"}
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_0 "status"
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_0_STRING_UNQUOTED status
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_0_STRING_TOKEN status
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN STATUS
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_1 "error"
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_1_STRING_UNQUOTED error
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_1_STRING_TOKEN error
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_1_STRING_UPPER_TOKEN ERROR
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 0) \
	fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 1)
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 1)
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_i2c_11112222, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_LEN 2
#define DT_N_S_test_S_i2c_11112222_P_interrupt_names_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/pwm@55551111
 *
 * Node identifier: DT_N_S_test_S_pwm_55551111
 *
 * Binding (compatible = vnd,pwm):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_pwm_55551111_PATH "/test/pwm@55551111"

/* Node's name with unit-address: */
#define DT_N_S_test_S_pwm_55551111_FULL_NAME "pwm@55551111"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_pwm_55551111_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_pwm_55551111_CHILD_IDX 42

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_pwm_55551111_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_pwm_55551111_ORD 64
#define DT_N_S_test_S_pwm_55551111_ORD_STR_SORTABLE 00064

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_pwm_55551111_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_pwm_55551111_SUPPORTS_ORDS \
	67, /* /test/phandle-holder-0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_pwm_55551111_EXISTS 1
#define DT_N_INST_0_vnd_pwm      DT_N_S_test_S_pwm_55551111
#define DT_N_NODELABEL_test_pwm1 DT_N_S_test_S_pwm_55551111

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_pwm_55551111_REG_NUM 1
#define DT_N_S_test_S_pwm_55551111_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_REG_IDX_0_VAL_ADDRESS 1431638289 /* 0x55551111 */
#define DT_N_S_test_S_pwm_55551111_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_pwm_55551111_RANGES_NUM 0
#define DT_N_S_test_S_pwm_55551111_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_pwm_55551111_IRQ_NUM 0
#define DT_N_S_test_S_pwm_55551111_IRQ_LEVEL 0
#define DT_N_S_test_S_pwm_55551111_COMPAT_MATCHES_vnd_pwm 1
#define DT_N_S_test_S_pwm_55551111_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_pwm_55551111_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_pwm_55551111_P_reg {1431638289 /* 0x55551111 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_pwm_55551111_P_reg_IDX_0 1431638289
#define DT_N_S_test_S_pwm_55551111_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_reg_IDX_1 4096
#define DT_N_S_test_S_pwm_55551111_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_reg_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_status "okay"
#define DT_N_S_test_S_pwm_55551111_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_pwm_55551111_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_pwm_55551111_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_pwm_55551111_P_status_IDX_0 "okay"
#define DT_N_S_test_S_pwm_55551111_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_status_ENUM_IDX 1
#define DT_N_S_test_S_pwm_55551111_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_pwm_55551111_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_pwm_55551111_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_pwm_55551111, status, 0)
#define DT_N_S_test_S_pwm_55551111_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_pwm_55551111, status, 0)
#define DT_N_S_test_S_pwm_55551111_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_pwm_55551111, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55551111_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_pwm_55551111, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55551111_P_status_LEN 1
#define DT_N_S_test_S_pwm_55551111_P_status_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_compatible {"vnd,pwm"}
#define DT_N_S_test_S_pwm_55551111_P_compatible_IDX_0 "vnd,pwm"
#define DT_N_S_test_S_pwm_55551111_P_compatible_IDX_0_STRING_UNQUOTED vnd,pwm
#define DT_N_S_test_S_pwm_55551111_P_compatible_IDX_0_STRING_TOKEN vnd_pwm
#define DT_N_S_test_S_pwm_55551111_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_PWM
#define DT_N_S_test_S_pwm_55551111_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_pwm_55551111, compatible, 0)
#define DT_N_S_test_S_pwm_55551111_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_pwm_55551111, compatible, 0)
#define DT_N_S_test_S_pwm_55551111_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_pwm_55551111, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55551111_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_pwm_55551111, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55551111_P_compatible_LEN 1
#define DT_N_S_test_S_pwm_55551111_P_compatible_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_wakeup_source 0
#define DT_N_S_test_S_pwm_55551111_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_pwm_55551111_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_pwm_55551111_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/pwm@55552222
 *
 * Node identifier: DT_N_S_test_S_pwm_55552222
 *
 * Binding (compatible = vnd,pwm):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_pwm_55552222_PATH "/test/pwm@55552222"

/* Node's name with unit-address: */
#define DT_N_S_test_S_pwm_55552222_FULL_NAME "pwm@55552222"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_pwm_55552222_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_pwm_55552222_CHILD_IDX 43

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_pwm_55552222_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_pwm_55552222_ORD 65
#define DT_N_S_test_S_pwm_55552222_ORD_STR_SORTABLE 00065

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_pwm_55552222_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_pwm_55552222_SUPPORTS_ORDS \
	67, /* /test/phandle-holder-0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_pwm_55552222_EXISTS 1
#define DT_N_INST_1_vnd_pwm      DT_N_S_test_S_pwm_55552222
#define DT_N_NODELABEL_test_pwm2 DT_N_S_test_S_pwm_55552222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_pwm_55552222_REG_NUM 1
#define DT_N_S_test_S_pwm_55552222_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_REG_IDX_0_VAL_ADDRESS 1431642658 /* 0x55552222 */
#define DT_N_S_test_S_pwm_55552222_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_pwm_55552222_RANGES_NUM 0
#define DT_N_S_test_S_pwm_55552222_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_pwm_55552222_IRQ_NUM 0
#define DT_N_S_test_S_pwm_55552222_IRQ_LEVEL 0
#define DT_N_S_test_S_pwm_55552222_COMPAT_MATCHES_vnd_pwm 1
#define DT_N_S_test_S_pwm_55552222_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_pwm_55552222_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_pwm_55552222_P_reg {1431642658 /* 0x55552222 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_pwm_55552222_P_reg_IDX_0 1431642658
#define DT_N_S_test_S_pwm_55552222_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_reg_IDX_1 4096
#define DT_N_S_test_S_pwm_55552222_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_reg_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_status "okay"
#define DT_N_S_test_S_pwm_55552222_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_pwm_55552222_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_pwm_55552222_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_pwm_55552222_P_status_IDX_0 "okay"
#define DT_N_S_test_S_pwm_55552222_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_status_ENUM_IDX 1
#define DT_N_S_test_S_pwm_55552222_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_pwm_55552222_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_pwm_55552222_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_pwm_55552222, status, 0)
#define DT_N_S_test_S_pwm_55552222_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_pwm_55552222, status, 0)
#define DT_N_S_test_S_pwm_55552222_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_pwm_55552222, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55552222_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_pwm_55552222, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55552222_P_status_LEN 1
#define DT_N_S_test_S_pwm_55552222_P_status_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_compatible {"vnd,pwm"}
#define DT_N_S_test_S_pwm_55552222_P_compatible_IDX_0 "vnd,pwm"
#define DT_N_S_test_S_pwm_55552222_P_compatible_IDX_0_STRING_UNQUOTED vnd,pwm
#define DT_N_S_test_S_pwm_55552222_P_compatible_IDX_0_STRING_TOKEN vnd_pwm
#define DT_N_S_test_S_pwm_55552222_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_PWM
#define DT_N_S_test_S_pwm_55552222_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_pwm_55552222, compatible, 0)
#define DT_N_S_test_S_pwm_55552222_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_pwm_55552222, compatible, 0)
#define DT_N_S_test_S_pwm_55552222_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_pwm_55552222, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55552222_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_pwm_55552222, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_pwm_55552222_P_compatible_LEN 1
#define DT_N_S_test_S_pwm_55552222_P_compatible_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_wakeup_source 0
#define DT_N_S_test_S_pwm_55552222_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_pwm_55552222_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_pwm_55552222_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/spi@33334444
 *
 * Node identifier: DT_N_S_test_S_spi_33334444
 *
 * Binding (compatible = vnd,spi):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_spi_33334444_PATH "/test/spi@33334444"

/* Node's name with unit-address: */
#define DT_N_S_test_S_spi_33334444_FULL_NAME "spi@33334444"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_spi_33334444_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_spi_33334444_CHILD_IDX 26

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD(fn) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1) fn(DT_N_S_test_S_spi_33334444_S_gpio_2)
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_gpio_2)
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_gpio_2, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1) fn(DT_N_S_test_S_spi_33334444_S_gpio_2)
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_gpio_2)
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_spi_33334444_S_gpio_2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_spi_33334444_ORD 66
#define DT_N_S_test_S_spi_33334444_ORD_STR_SORTABLE 00066

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_spi_33334444_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */ \
	24, /* /test/gpio@deadbeef */ \
	62, /* /test/gpio@abcd1234 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_spi_33334444_SUPPORTS_ORDS \
	67, /* /test/phandle-holder-0 */ \
	114, /* /test/spi@33334444/gpio@2 */ \
	115, /* /test/spi@33334444/test-spi-dev@0 */ \
	116, /* /test/spi@33334444/test-spi-dev@1 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_spi_33334444_EXISTS 1
#define DT_N_INST_0_vnd_spi     DT_N_S_test_S_spi_33334444
#define DT_N_NODELABEL_test_spi DT_N_S_test_S_spi_33334444

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_spi_33334444_REG_NUM 1
#define DT_N_S_test_S_spi_33334444_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_REG_IDX_0_VAL_ADDRESS 858997828 /* 0x33334444 */
#define DT_N_S_test_S_spi_33334444_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_spi_33334444_RANGES_NUM 0
#define DT_N_S_test_S_spi_33334444_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_spi_33334444_IRQ_NUM 3
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_0_VAL_irq 8
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_1_VAL_irq 9
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_1_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_1_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_2_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_2_VAL_irq 10
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_2_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_2_VAL_priority 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_test_S_spi_33334444_IRQ_IDX_2_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_spi_33334444_IRQ_LEVEL 2
#define DT_N_S_test_S_spi_33334444_COMPAT_MATCHES_vnd_spi 1
#define DT_N_S_test_S_spi_33334444_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_spi_33334444_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_spi_33334444_P_label "TEST_SPI_CTLR"
#define DT_N_S_test_S_spi_33334444_P_label_STRING_UNQUOTED TEST_SPI_CTLR
#define DT_N_S_test_S_spi_33334444_P_label_STRING_TOKEN TEST_SPI_CTLR
#define DT_N_S_test_S_spi_33334444_P_label_STRING_UPPER_TOKEN TEST_SPI_CTLR
#define DT_N_S_test_S_spi_33334444_P_label_IDX_0 "TEST_SPI_CTLR"
#define DT_N_S_test_S_spi_33334444_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444, label, 0)
#define DT_N_S_test_S_spi_33334444_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444, label, 0)
#define DT_N_S_test_S_spi_33334444_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_label_LEN 1
#define DT_N_S_test_S_spi_33334444_P_label_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_clock_frequency 2000000
#define DT_N_S_test_S_spi_33334444_P_clock_frequency_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_0_VAL_pin 16
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_0_VAL_flags 32
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_1_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_1_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_1_VAL_pin 48
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_1_VAL_pin_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_1_VAL_flags 64
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_2_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_2_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_2_VAL_pin 80
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_2_VAL_pin_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_2_VAL_flags 96
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_IDX_2_VAL_flags_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444, cs_gpios, 0) \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 1) \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 2)
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444, cs_gpios, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 2)
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444, cs_gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 2, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444, cs_gpios, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_spi_33334444, cs_gpios, 2, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_LEN 3
#define DT_N_S_test_S_spi_33334444_P_cs_gpios_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_status "okay"
#define DT_N_S_test_S_spi_33334444_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_spi_33334444_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_spi_33334444_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_spi_33334444_P_status_IDX_0 "okay"
#define DT_N_S_test_S_spi_33334444_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_status_ENUM_IDX 1
#define DT_N_S_test_S_spi_33334444_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_spi_33334444_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_spi_33334444_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444, status, 0)
#define DT_N_S_test_S_spi_33334444_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444, status, 0)
#define DT_N_S_test_S_spi_33334444_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_status_LEN 1
#define DT_N_S_test_S_spi_33334444_P_status_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_compatible {"vnd,spi"}
#define DT_N_S_test_S_spi_33334444_P_compatible_IDX_0 "vnd,spi"
#define DT_N_S_test_S_spi_33334444_P_compatible_IDX_0_STRING_UNQUOTED vnd,spi
#define DT_N_S_test_S_spi_33334444_P_compatible_IDX_0_STRING_TOKEN vnd_spi
#define DT_N_S_test_S_spi_33334444_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_SPI
#define DT_N_S_test_S_spi_33334444_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444, compatible, 0)
#define DT_N_S_test_S_spi_33334444_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444, compatible, 0)
#define DT_N_S_test_S_spi_33334444_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_P_compatible_LEN 1
#define DT_N_S_test_S_spi_33334444_P_compatible_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_reg {858997828 /* 0x33334444 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_spi_33334444_P_reg_IDX_0 858997828
#define DT_N_S_test_S_spi_33334444_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_reg_IDX_1 4096
#define DT_N_S_test_S_spi_33334444_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_reg_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_interrupts {8 /* 0x8 */, 3 /* 0x3 */, 9 /* 0x9 */, 0 /* 0x0 */, 10 /* 0xa */, 1 /* 0x1 */}
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_0 8
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_1 3
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_2 9
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_3 0
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_4 10
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_5 1
#define DT_N_S_test_S_spi_33334444_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_interrupts_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_wakeup_source 0
#define DT_N_S_test_S_spi_33334444_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_spi_33334444_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_spi_33334444_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/phandle-holder-0
 *
 * Node identifier: DT_N_S_test_S_phandle_holder_0
 *
 * Binding (compatible = vnd,phandle-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,phandle-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_phandle_holder_0_PATH "/test/phandle-holder-0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_phandle_holder_0_FULL_NAME "phandle-holder-0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_phandle_holder_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_phandle_holder_0_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_phandle_holder_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_phandle_holder_0_ORD 67
#define DT_N_S_test_S_phandle_holder_0_ORD_STR_SORTABLE 00067

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_phandle_holder_0_REQUIRES_ORDS \
	21, /* /test */ \
	24, /* /test/gpio@deadbeef */ \
	59, /* /test/enum-2 */ \
	60, /* /test/enum-3 */ \
	61, /* /test/gpio@1234 */ \
	62, /* /test/gpio@abcd1234 */ \
	63, /* /test/i2c@11112222 */ \
	64, /* /test/pwm@55551111 */ \
	65, /* /test/pwm@55552222 */ \
	66, /* /test/spi@33334444 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_phandle_holder_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_phandle_holder_0_EXISTS 1
#define DT_N_INST_0_vnd_phandle_holder DT_N_S_test_S_phandle_holder_0
#define DT_N_NODELABEL_test_phandles   DT_N_S_test_S_phandle_holder_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_phandle_holder_0_REG_NUM 0
#define DT_N_S_test_S_phandle_holder_0_RANGES_NUM 0
#define DT_N_S_test_S_phandle_holder_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_phandle_holder_0_IRQ_NUM 0
#define DT_N_S_test_S_phandle_holder_0_IRQ_LEVEL 0
#define DT_N_S_test_S_phandle_holder_0_COMPAT_MATCHES_vnd_phandle_holder 1
#define DT_N_S_test_S_phandle_holder_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_phandle_holder_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_phandle_holder_0_P_ph DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_ph_IDX_0 DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_ph_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_ph_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_ph_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, ph, 0)
#define DT_N_S_test_S_phandle_holder_0_P_ph_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, ph, 0)
#define DT_N_S_test_S_phandle_holder_0_P_ph_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, ph, 0, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_ph_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, ph, 0, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_ph_LEN 1
#define DT_N_S_test_S_phandle_holder_0_P_ph_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_phs_IDX_0 DT_N_S_test_S_i2c_11112222
#define DT_N_S_test_S_phandle_holder_0_P_phs_IDX_0_PH DT_N_S_test_S_i2c_11112222
#define DT_N_S_test_S_phandle_holder_0_P_phs_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_phs_IDX_1 DT_N_S_test_S_spi_33334444
#define DT_N_S_test_S_phandle_holder_0_P_phs_IDX_1_PH DT_N_S_test_S_spi_33334444
#define DT_N_S_test_S_phandle_holder_0_P_phs_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_phs_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, phs, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, phs, 1)
#define DT_N_S_test_S_phandle_holder_0_P_phs_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, phs, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, phs, 1)
#define DT_N_S_test_S_phandle_holder_0_P_phs_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, phs, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, phs, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_phs_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, phs, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, phs, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_phs_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_phs_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_IDX_0 DT_N_S_test_S_enum_2
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_IDX_0_PH DT_N_S_test_S_enum_2
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_IDX_1 DT_N_S_test_S_enum_3
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_IDX_1_PH DT_N_S_test_S_enum_3
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, phs_or, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, phs_or, 1)
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, phs_or, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, phs_or, 1)
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, phs_or, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, phs_or, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, phs_or, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, phs_or, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_phs_or_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_0_VAL_pin 50
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_0_VAL_flags 60
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_1_EXISTS 0
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_2_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_2_PH DT_N_S_test_S_gpio_1234
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_2_VAL_pin 70
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_2_VAL_pin_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_3_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_3_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_3_VAL_pin 80
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_3_VAL_pin_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_3_VAL_flags 90
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_IDX_3_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 1) \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 2) \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 3)
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 3)
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 2, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 3, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pha_gpios, 3, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_LEN 4
#define DT_N_S_test_S_phandle_holder_0_P_pha_gpios_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_0_VAL_pin 10
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_0_VAL_flags 20
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_1_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_1_VAL_pin 30
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_1_VAL_pin_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_1_VAL_flags 40
#define DT_N_S_test_S_phandle_holder_0_P_gpios_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, gpios, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, gpios, 1)
#define DT_N_S_test_S_phandle_holder_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, gpios, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, gpios, 1)
#define DT_N_S_test_S_phandle_holder_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, gpios, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, gpios, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, gpios, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_gpios_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_gpios_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_0_VAL_foocell 100
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_0_VAL_foocell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_0_NAME "A"
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_a_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_a_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_a_VAL_foocell DT_N_S_test_S_phandle_holder_0_P_foos_IDX_0_VAL_foocell
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_a_VAL_foocell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_1_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_1_VAL_foocell 110
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_1_VAL_foocell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_IDX_1_NAME "b-c"
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_b_c_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_b_c_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_b_c_VAL_foocell DT_N_S_test_S_phandle_holder_0_P_foos_IDX_1_VAL_foocell
#define DT_N_S_test_S_phandle_holder_0_P_foos_NAME_b_c_VAL_foocell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foos_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, foos, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, foos, 1)
#define DT_N_S_test_S_phandle_holder_0_P_foos_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, foos, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, foos, 1)
#define DT_N_S_test_S_phandle_holder_0_P_foos_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, foos, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, foos, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_foos_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, foos, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, foos, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_foos_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_foos_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foo_names {"A", "b-c"}
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_0 "A"
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_0_STRING_UNQUOTED A
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_0_STRING_TOKEN A
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_0_STRING_UPPER_TOKEN A
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_1 "b-c"
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_1_STRING_UNQUOTED b-c
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_1_STRING_TOKEN b_c
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_1_STRING_UPPER_TOKEN B_C
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, foo_names, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, foo_names, 1)
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, foo_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, foo_names, 1)
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, foo_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, foo_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, foo_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, foo_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_foo_names_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_PH DT_N_S_test_S_pwm_55551111
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_channel 8
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_channel_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_period 200
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_period_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_flags 3
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_NAME "red"
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_PH DT_N_S_test_S_pwm_55551111
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_VAL_channel DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_channel
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_VAL_channel_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_VAL_period DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_period
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_VAL_period_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_VAL_flags DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_0_VAL_flags
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_red_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_PH DT_N_S_test_S_pwm_55552222
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_channel 5
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_channel_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_period 100
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_period_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_flags 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_NAME "green"
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_PH DT_N_S_test_S_pwm_55552222
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_VAL_channel DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_channel
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_VAL_channel_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_VAL_period DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_period
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_VAL_period_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_VAL_flags DT_N_S_test_S_phandle_holder_0_P_pwms_IDX_1_VAL_flags
#define DT_N_S_test_S_phandle_holder_0_P_pwms_NAME_green_VAL_flags_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwms_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, pwms, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, pwms, 1)
#define DT_N_S_test_S_phandle_holder_0_P_pwms_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, pwms, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pwms, 1)
#define DT_N_S_test_S_phandle_holder_0_P_pwms_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, pwms, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, pwms, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_pwms_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, pwms, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pwms, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_pwms_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_pwms_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names {"red", "green"}
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_0 "red"
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_0_STRING_UNQUOTED red
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_0_STRING_TOKEN red
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_0_STRING_UPPER_TOKEN RED
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_1 "green"
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_1_STRING_UNQUOTED green
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_1_STRING_TOKEN green
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_1_STRING_UPPER_TOKEN GREEN
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 1)
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 1)
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, pwm_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_pwm_names_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_0_VAL_bazcell 200
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_0_VAL_bazcell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_0_NAME "john"
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_john_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_john_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_john_VAL_bazcell DT_N_S_test_S_phandle_holder_0_P_bar_IDX_0_VAL_bazcell
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_john_VAL_bazcell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_1_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_1_VAL_bazcell 210
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_1_VAL_bazcell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_IDX_1_NAME "doe"
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_doe_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_doe_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_doe_VAL_bazcell DT_N_S_test_S_phandle_holder_0_P_bar_IDX_1_VAL_bazcell
#define DT_N_S_test_S_phandle_holder_0_P_bar_NAME_doe_VAL_bazcell_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_bar_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, bar, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, bar, 1)
#define DT_N_S_test_S_phandle_holder_0_P_bar_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, bar, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, bar, 1)
#define DT_N_S_test_S_phandle_holder_0_P_bar_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, bar, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, bar, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_bar_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, bar, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, bar, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_bar_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_bar_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_baz_names {"john", "doe"}
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_0 "john"
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_0_STRING_UNQUOTED john
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_0_STRING_TOKEN john
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_0_STRING_UPPER_TOKEN JOHN
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_1 "doe"
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_1_STRING_UNQUOTED doe
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_1_STRING_TOKEN doe
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_1_STRING_UPPER_TOKEN DOE
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, baz_names, 0) \
	fn(DT_N_S_test_S_phandle_holder_0, baz_names, 1)
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, baz_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, baz_names, 1)
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, baz_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_phandle_holder_0, baz_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, baz_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_phandle_holder_0, baz_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_LEN 2
#define DT_N_S_test_S_phandle_holder_0_P_baz_names_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_compatible {"vnd,phandle-holder"}
#define DT_N_S_test_S_phandle_holder_0_P_compatible_IDX_0 "vnd,phandle-holder"
#define DT_N_S_test_S_phandle_holder_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,phandle-holder
#define DT_N_S_test_S_phandle_holder_0_P_compatible_IDX_0_STRING_TOKEN vnd_phandle_holder
#define DT_N_S_test_S_phandle_holder_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_PHANDLE_HOLDER
#define DT_N_S_test_S_phandle_holder_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_phandle_holder_0, compatible, 0)
#define DT_N_S_test_S_phandle_holder_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_phandle_holder_0, compatible, 0)
#define DT_N_S_test_S_phandle_holder_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_phandle_holder_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_phandle_holder_0_P_compatible_LEN 1
#define DT_N_S_test_S_phandle_holder_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_wakeup_source 0
#define DT_N_S_test_S_phandle_holder_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_phandle_holder_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_phandle_holder_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/reg-holder@9999aaaa
 *
 * Node identifier: DT_N_S_test_S_reg_holder_9999aaaa
 *
 * Binding (compatible = vnd,reg-holder):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,reg-holder.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_reg_holder_9999aaaa_PATH "/test/reg-holder@9999aaaa"

/* Node's name with unit-address: */
#define DT_N_S_test_S_reg_holder_9999aaaa_FULL_NAME "reg-holder@9999aaaa"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_reg_holder_9999aaaa_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_reg_holder_9999aaaa_CHILD_IDX 32

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_reg_holder_9999aaaa_ORD 68
#define DT_N_S_test_S_reg_holder_9999aaaa_ORD_STR_SORTABLE 00068

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_reg_holder_9999aaaa_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_reg_holder_9999aaaa_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_reg_holder_9999aaaa_EXISTS 1
#define DT_N_INST_0_vnd_reg_holder DT_N_S_test_S_reg_holder_9999aaaa
#define DT_N_NODELABEL_test_reg    DT_N_S_test_S_reg_holder_9999aaaa

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_NUM 2
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_0_VAL_ADDRESS 2576984746 /* 0x9999aaaa */
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_1_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_1_VAL_ADDRESS 3149647052 /* 0xbbbbcccc */
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_1_VAL_SIZE 63 /* 0x3f */
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_NAME_first_VAL_ADDRESS DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_NAME_first_VAL_SIZE DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_0_VAL_SIZE
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_NAME_second_VAL_ADDRESS DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_test_S_reg_holder_9999aaaa_REG_NAME_second_VAL_SIZE DT_N_S_test_S_reg_holder_9999aaaa_REG_IDX_1_VAL_SIZE
#define DT_N_S_test_S_reg_holder_9999aaaa_RANGES_NUM 0
#define DT_N_S_test_S_reg_holder_9999aaaa_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_reg_holder_9999aaaa_IRQ_NUM 0
#define DT_N_S_test_S_reg_holder_9999aaaa_IRQ_LEVEL 0
#define DT_N_S_test_S_reg_holder_9999aaaa_COMPAT_MATCHES_vnd_reg_holder 1
#define DT_N_S_test_S_reg_holder_9999aaaa_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_reg_holder_9999aaaa_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg {2576984746 /* 0x9999aaaa */, 4096 /* 0x1000 */, 3149647052 /* 0xbbbbcccc */, 63 /* 0x3f */}
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_0 2576984746
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_1 4096
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_2 3149647052
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_2_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_3 63
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_IDX_3_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names {"first", "second"}
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_0 "first"
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_0_STRING_UNQUOTED first
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_0_STRING_TOKEN first
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_0_STRING_UPPER_TOKEN FIRST
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_1 "second"
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_1_STRING_UNQUOTED second
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_1_STRING_TOKEN second
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_1_STRING_UPPER_TOKEN SECOND
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 0) \
	fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 1)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 1)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_reg_holder_9999aaaa, reg_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_LEN 2
#define DT_N_S_test_S_reg_holder_9999aaaa_P_reg_names_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_misc_prop 1234
#define DT_N_S_test_S_reg_holder_9999aaaa_P_misc_prop_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status "okay"
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_IDX_0 "okay"
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_ENUM_IDX 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_reg_holder_9999aaaa, status, 0)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_reg_holder_9999aaaa, status, 0)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_reg_holder_9999aaaa, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_reg_holder_9999aaaa, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_LEN 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_status_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible {"vnd,reg-holder"}
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_IDX_0 "vnd,reg-holder"
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_IDX_0_STRING_UNQUOTED vnd,reg-holder
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_IDX_0_STRING_TOKEN vnd_reg_holder
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_REG_HOLDER
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_reg_holder_9999aaaa, compatible, 0)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_reg_holder_9999aaaa, compatible, 0)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_reg_holder_9999aaaa, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_reg_holder_9999aaaa, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_LEN 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_compatible_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_wakeup_source 0
#define DT_N_S_test_S_reg_holder_9999aaaa_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_reg_holder_9999aaaa_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_reg_holder_9999aaaa_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/reserved-node@0
 *
 * Node identifier: DT_N_S_test_S_reserved_node_0
 */

/* Node's full path: */
#define DT_N_S_test_S_reserved_node_0_PATH "/test/reserved-node@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_reserved_node_0_FULL_NAME "reserved-node@0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_reserved_node_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_reserved_node_0_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_reserved_node_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_reserved_node_0_ORD 69
#define DT_N_S_test_S_reserved_node_0_ORD_STR_SORTABLE 00069

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_reserved_node_0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_reserved_node_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_reserved_node_0_EXISTS 1
#define DT_N_INST_0_vnd_reserved_node DT_N_S_test_S_reserved_node_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_reserved_node_0_REG_NUM 1
#define DT_N_S_test_S_reserved_node_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_reserved_node_0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_reserved_node_0_RANGES_NUM 0
#define DT_N_S_test_S_reserved_node_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_reserved_node_0_IRQ_NUM 0
#define DT_N_S_test_S_reserved_node_0_IRQ_LEVEL 0
#define DT_N_S_test_S_reserved_node_0_COMPAT_MATCHES_vnd_reserved_node 1
#define DT_N_S_test_S_reserved_node_0_STATUS_reserved 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_reserved_node_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_reserved_node_0_P_compatible {"vnd,reserved-node"}
#define DT_N_S_test_S_reserved_node_0_P_compatible_IDX_0 "vnd,reserved-node"
#define DT_N_S_test_S_reserved_node_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,reserved-node
#define DT_N_S_test_S_reserved_node_0_P_compatible_IDX_0_STRING_TOKEN vnd_reserved_node
#define DT_N_S_test_S_reserved_node_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_RESERVED_NODE
#define DT_N_S_test_S_reserved_node_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_reserved_node_0, compatible, 0)
#define DT_N_S_test_S_reserved_node_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_reserved_node_0, compatible, 0)
#define DT_N_S_test_S_reserved_node_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_reserved_node_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_reserved_node_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_reserved_node_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_reserved_node_0_P_compatible_LEN 1
#define DT_N_S_test_S_reserved_node_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_P_reg {0 /* 0x0 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_reserved_node_0_P_reg_IDX_0 0
#define DT_N_S_test_S_reserved_node_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_P_reg_IDX_1 4096
#define DT_N_S_test_S_reserved_node_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_P_reg_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_P_status "reserved"
#define DT_N_S_test_S_reserved_node_0_P_status_STRING_UNQUOTED reserved
#define DT_N_S_test_S_reserved_node_0_P_status_STRING_TOKEN reserved
#define DT_N_S_test_S_reserved_node_0_P_status_STRING_UPPER_TOKEN RESERVED
#define DT_N_S_test_S_reserved_node_0_P_status_IDX_0 "reserved"
#define DT_N_S_test_S_reserved_node_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_P_status_ENUM_IDX 3
#define DT_N_S_test_S_reserved_node_0_P_status_ENUM_VAL_reserved_EXISTS 1
#define DT_N_S_test_S_reserved_node_0_P_status_ENUM_TOKEN reserved
#define DT_N_S_test_S_reserved_node_0_P_status_ENUM_UPPER_TOKEN RESERVED
#define DT_N_S_test_S_reserved_node_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_reserved_node_0, status, 0)
#define DT_N_S_test_S_reserved_node_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_reserved_node_0, status, 0)
#define DT_N_S_test_S_reserved_node_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_reserved_node_0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_reserved_node_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_reserved_node_0, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_reserved_node_0_P_status_LEN 1
#define DT_N_S_test_S_reserved_node_0_P_status_EXISTS 1

/*
 * Devicetree node: /test/string-array-token-0
 *
 * Node identifier: DT_N_S_test_S_string_array_token_0
 *
 * Binding (compatible = vnd,string-array-token):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-array-token.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_array_token_0_PATH "/test/string-array-token-0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_array_token_0_FULL_NAME "string-array-token-0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_array_token_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_array_token_0_CHILD_IDX 56

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_token_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_array_token_0_ORD 70
#define DT_N_S_test_S_string_array_token_0_ORD_STR_SORTABLE 00070

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_array_token_0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_array_token_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_array_token_0_EXISTS 1
#define DT_N_INST_0_vnd_string_array_token    DT_N_S_test_S_string_array_token_0
#define DT_N_NODELABEL_test_str_array_token_0 DT_N_S_test_S_string_array_token_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_array_token_0_REG_NUM 0
#define DT_N_S_test_S_string_array_token_0_RANGES_NUM 0
#define DT_N_S_test_S_string_array_token_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_array_token_0_IRQ_NUM 0
#define DT_N_S_test_S_string_array_token_0_IRQ_LEVEL 0
#define DT_N_S_test_S_string_array_token_0_COMPAT_MATCHES_vnd_string_array_token 1
#define DT_N_S_test_S_string_array_token_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_array_token_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_array_token_0_P_val {"token_first_idx_zero", "token_first_idx_one", "token_first_idx_two"}
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_0 "token_first_idx_zero"
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_0_STRING_UNQUOTED token_first_idx_zero
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_0_STRING_TOKEN token_first_idx_zero
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_0_STRING_UPPER_TOKEN TOKEN_FIRST_IDX_ZERO
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_1 "token_first_idx_one"
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_1_STRING_UNQUOTED token_first_idx_one
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_1_STRING_TOKEN token_first_idx_one
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_1_STRING_UPPER_TOKEN TOKEN_FIRST_IDX_ONE
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_1_EXISTS 1
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_2 "token_first_idx_two"
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_2_STRING_UNQUOTED token_first_idx_two
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_2_STRING_TOKEN token_first_idx_two
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_2_STRING_UPPER_TOKEN TOKEN_FIRST_IDX_TWO
#define DT_N_S_test_S_string_array_token_0_P_val_IDX_2_EXISTS 1
#define DT_N_S_test_S_string_array_token_0_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_array_token_0, val, 0) \
	fn(DT_N_S_test_S_string_array_token_0, val, 1) \
	fn(DT_N_S_test_S_string_array_token_0, val, 2)
#define DT_N_S_test_S_string_array_token_0_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_array_token_0, val, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_0, val, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_0, val, 2)
#define DT_N_S_test_S_string_array_token_0_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_array_token_0, val, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_token_0, val, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_token_0, val, 2, __VA_ARGS__)
#define DT_N_S_test_S_string_array_token_0_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_array_token_0, val, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_0, val, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_0, val, 2, __VA_ARGS__)
#define DT_N_S_test_S_string_array_token_0_P_val_LEN 3
#define DT_N_S_test_S_string_array_token_0_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-array-token-1
 *
 * Node identifier: DT_N_S_test_S_string_array_token_1
 *
 * Binding (compatible = vnd,string-array-token):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-array-token.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_array_token_1_PATH "/test/string-array-token-1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_array_token_1_FULL_NAME "string-array-token-1"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_array_token_1_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_array_token_1_CHILD_IDX 57

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_token_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_array_token_1_ORD 71
#define DT_N_S_test_S_string_array_token_1_ORD_STR_SORTABLE 00071

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_array_token_1_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_array_token_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_array_token_1_EXISTS 1
#define DT_N_INST_1_vnd_string_array_token    DT_N_S_test_S_string_array_token_1
#define DT_N_NODELABEL_test_str_array_token_1 DT_N_S_test_S_string_array_token_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_array_token_1_REG_NUM 0
#define DT_N_S_test_S_string_array_token_1_RANGES_NUM 0
#define DT_N_S_test_S_string_array_token_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_array_token_1_IRQ_NUM 0
#define DT_N_S_test_S_string_array_token_1_IRQ_LEVEL 0
#define DT_N_S_test_S_string_array_token_1_COMPAT_MATCHES_vnd_string_array_token 1
#define DT_N_S_test_S_string_array_token_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_array_token_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_array_token_1_P_val {"token_second_idx_zero", "token_second_idx_one", "token_second_idx_two", "token_second_idx_three"}
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_0 "token_second_idx_zero"
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_0_STRING_UNQUOTED token_second_idx_zero
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_0_STRING_TOKEN token_second_idx_zero
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_0_STRING_UPPER_TOKEN TOKEN_SECOND_IDX_ZERO
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_1 "token_second_idx_one"
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_1_STRING_UNQUOTED token_second_idx_one
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_1_STRING_TOKEN token_second_idx_one
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_1_STRING_UPPER_TOKEN TOKEN_SECOND_IDX_ONE
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_1_EXISTS 1
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_2 "token_second_idx_two"
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_2_STRING_UNQUOTED token_second_idx_two
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_2_STRING_TOKEN token_second_idx_two
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_2_STRING_UPPER_TOKEN TOKEN_SECOND_IDX_TWO
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_2_EXISTS 1
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_3 "token_second_idx_three"
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_3_STRING_UNQUOTED token_second_idx_three
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_3_STRING_TOKEN token_second_idx_three
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_3_STRING_UPPER_TOKEN TOKEN_SECOND_IDX_THREE
#define DT_N_S_test_S_string_array_token_1_P_val_IDX_3_EXISTS 1
#define DT_N_S_test_S_string_array_token_1_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_array_token_1, val, 0) \
	fn(DT_N_S_test_S_string_array_token_1, val, 1) \
	fn(DT_N_S_test_S_string_array_token_1, val, 2) \
	fn(DT_N_S_test_S_string_array_token_1, val, 3)
#define DT_N_S_test_S_string_array_token_1_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_array_token_1, val, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_1, val, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_1, val, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_1, val, 3)
#define DT_N_S_test_S_string_array_token_1_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_array_token_1, val, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_token_1, val, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_token_1, val, 2, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_token_1, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_token_1_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_array_token_1, val, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_1, val, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_1, val, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_token_1, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_token_1_P_val_LEN 4
#define DT_N_S_test_S_string_array_token_1_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-array-unquoted-f0
 *
 * Node identifier: DT_N_S_test_S_string_array_unquoted_f0
 *
 * Binding (compatible = vnd,string-array-unquoted):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-array-unquoted.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_array_unquoted_f0_PATH "/test/string-array-unquoted-f0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_array_unquoted_f0_FULL_NAME "string-array-unquoted-f0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_array_unquoted_f0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_array_unquoted_f0_CHILD_IDX 61

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_array_unquoted_f0_ORD 72
#define DT_N_S_test_S_string_array_unquoted_f0_ORD_STR_SORTABLE 00072

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_array_unquoted_f0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_array_unquoted_f0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_array_unquoted_f0_EXISTS 1
#define DT_N_INST_0_vnd_string_array_unquoted DT_N_S_test_S_string_array_unquoted_f0
#define DT_N_NODELABEL_test_stra_unquoted_f0  DT_N_S_test_S_string_array_unquoted_f0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_array_unquoted_f0_REG_NUM 0
#define DT_N_S_test_S_string_array_unquoted_f0_RANGES_NUM 0
#define DT_N_S_test_S_string_array_unquoted_f0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_array_unquoted_f0_IRQ_NUM 0
#define DT_N_S_test_S_string_array_unquoted_f0_IRQ_LEVEL 0
#define DT_N_S_test_S_string_array_unquoted_f0_COMPAT_MATCHES_vnd_string_array_unquoted 1
#define DT_N_S_test_S_string_array_unquoted_f0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_array_unquoted_f0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_array_unquoted_f0_P_val {"1.0e2", "2.0e2", "3.0e2", "4.0e2"}
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_0 "1.0e2"
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_0_STRING_UNQUOTED 1.0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_0_STRING_TOKEN 1_0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_0_STRING_UPPER_TOKEN 1_0E2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_1 "2.0e2"
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_1_STRING_UNQUOTED 2.0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_1_STRING_TOKEN 2_0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_1_STRING_UPPER_TOKEN 2_0E2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_1_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_2 "3.0e2"
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_2_STRING_UNQUOTED 3.0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_2_STRING_TOKEN 3_0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_2_STRING_UPPER_TOKEN 3_0E2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_2_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_3 "4.0e2"
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_3_STRING_UNQUOTED 4.0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_3_STRING_TOKEN 4_0e2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_3_STRING_UPPER_TOKEN 4_0E2
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_IDX_3_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_array_unquoted_f0, val, 0) \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 1) \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 2) \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 3)
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_array_unquoted_f0, val, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 3)
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_array_unquoted_f0, val, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 2, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_array_unquoted_f0, val, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f0, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_LEN 4
#define DT_N_S_test_S_string_array_unquoted_f0_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-array-unquoted-f1
 *
 * Node identifier: DT_N_S_test_S_string_array_unquoted_f1
 *
 * Binding (compatible = vnd,string-array-unquoted):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-array-unquoted.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_array_unquoted_f1_PATH "/test/string-array-unquoted-f1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_array_unquoted_f1_FULL_NAME "string-array-unquoted-f1"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_array_unquoted_f1_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_array_unquoted_f1_CHILD_IDX 62

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_array_unquoted_f1_ORD 73
#define DT_N_S_test_S_string_array_unquoted_f1_ORD_STR_SORTABLE 00073

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_array_unquoted_f1_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_array_unquoted_f1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_array_unquoted_f1_EXISTS 1
#define DT_N_INST_1_vnd_string_array_unquoted DT_N_S_test_S_string_array_unquoted_f1
#define DT_N_NODELABEL_test_stra_unquoted_f1  DT_N_S_test_S_string_array_unquoted_f1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_array_unquoted_f1_REG_NUM 0
#define DT_N_S_test_S_string_array_unquoted_f1_RANGES_NUM 0
#define DT_N_S_test_S_string_array_unquoted_f1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_array_unquoted_f1_IRQ_NUM 0
#define DT_N_S_test_S_string_array_unquoted_f1_IRQ_LEVEL 0
#define DT_N_S_test_S_string_array_unquoted_f1_COMPAT_MATCHES_vnd_string_array_unquoted 1
#define DT_N_S_test_S_string_array_unquoted_f1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_array_unquoted_f1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_array_unquoted_f1_P_val {"0.01", "0.1", "1.0", "10.0"}
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_0 "0.01"
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_0_STRING_UNQUOTED 0.01
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_0_STRING_TOKEN 0_01
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_0_STRING_UPPER_TOKEN 0_01
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_1 "0.1"
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_1_STRING_UNQUOTED 0.1
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_1_STRING_TOKEN 0_1
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_1_STRING_UPPER_TOKEN 0_1
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_1_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_2 "1.0"
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_2_STRING_UNQUOTED 1.0
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_2_STRING_TOKEN 1_0
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_2_STRING_UPPER_TOKEN 1_0
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_2_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_3 "10.0"
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_3_STRING_UNQUOTED 10.0
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_3_STRING_TOKEN 10_0
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_3_STRING_UPPER_TOKEN 10_0
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_IDX_3_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_array_unquoted_f1, val, 0) \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 1) \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 2) \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 3)
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_array_unquoted_f1, val, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 3)
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_array_unquoted_f1, val, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 2, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_array_unquoted_f1, val, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_f1, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_LEN 4
#define DT_N_S_test_S_string_array_unquoted_f1_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-array-unquoted-t
 *
 * Node identifier: DT_N_S_test_S_string_array_unquoted_t
 *
 * Binding (compatible = vnd,string-array-unquoted):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-array-unquoted.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_array_unquoted_t_PATH "/test/string-array-unquoted-t"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_array_unquoted_t_FULL_NAME "string-array-unquoted-t"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_array_unquoted_t_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_array_unquoted_t_CHILD_IDX 63

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_array_unquoted_t_ORD 74
#define DT_N_S_test_S_string_array_unquoted_t_ORD_STR_SORTABLE 00074

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_array_unquoted_t_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_array_unquoted_t_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_array_unquoted_t_EXISTS 1
#define DT_N_INST_2_vnd_string_array_unquoted DT_N_S_test_S_string_array_unquoted_t
#define DT_N_NODELABEL_test_stra_unquoted_t   DT_N_S_test_S_string_array_unquoted_t

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_array_unquoted_t_REG_NUM 0
#define DT_N_S_test_S_string_array_unquoted_t_RANGES_NUM 0
#define DT_N_S_test_S_string_array_unquoted_t_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_array_unquoted_t_IRQ_NUM 0
#define DT_N_S_test_S_string_array_unquoted_t_IRQ_LEVEL 0
#define DT_N_S_test_S_string_array_unquoted_t_COMPAT_MATCHES_vnd_string_array_unquoted 1
#define DT_N_S_test_S_string_array_unquoted_t_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_array_unquoted_t_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_array_unquoted_t_P_val {"XA XPLUS XB", "XC XPLUS XD", "XA XMINUS XB", "XC XMINUS XD"}
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_0 "XA XPLUS XB"
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_0_STRING_UNQUOTED XA XPLUS XB
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_0_STRING_TOKEN XA_XPLUS_XB
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_0_STRING_UPPER_TOKEN XA_XPLUS_XB
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_1 "XC XPLUS XD"
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_1_STRING_UNQUOTED XC XPLUS XD
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_1_STRING_TOKEN XC_XPLUS_XD
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_1_STRING_UPPER_TOKEN XC_XPLUS_XD
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_1_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_2 "XA XMINUS XB"
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_2_STRING_UNQUOTED XA XMINUS XB
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_2_STRING_TOKEN XA_XMINUS_XB
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_2_STRING_UPPER_TOKEN XA_XMINUS_XB
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_2_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_3 "XC XMINUS XD"
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_3_STRING_UNQUOTED XC XMINUS XD
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_3_STRING_TOKEN XC_XMINUS_XD
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_3_STRING_UPPER_TOKEN XC_XMINUS_XD
#define DT_N_S_test_S_string_array_unquoted_t_P_val_IDX_3_EXISTS 1
#define DT_N_S_test_S_string_array_unquoted_t_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_array_unquoted_t, val, 0) \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 1) \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 2) \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 3)
#define DT_N_S_test_S_string_array_unquoted_t_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_array_unquoted_t, val, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 3)
#define DT_N_S_test_S_string_array_unquoted_t_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_array_unquoted_t, val, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 2, __VA_ARGS__) \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_unquoted_t_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_array_unquoted_t, val, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_string_array_unquoted_t, val, 3, __VA_ARGS__)
#define DT_N_S_test_S_string_array_unquoted_t_P_val_LEN 4
#define DT_N_S_test_S_string_array_unquoted_t_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-token-0
 *
 * Node identifier: DT_N_S_test_S_string_token_0
 *
 * Binding (compatible = vnd,string-token):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-token.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_token_0_PATH "/test/string-token-0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_token_0_FULL_NAME "string-token-0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_token_0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_token_0_CHILD_IDX 53

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_token_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_token_0_ORD 75
#define DT_N_S_test_S_string_token_0_ORD_STR_SORTABLE 00075

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_token_0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_token_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_token_0_EXISTS 1
#define DT_N_INST_0_vnd_string_token       DT_N_S_test_S_string_token_0
#define DT_N_NODELABEL_test_string_token_0 DT_N_S_test_S_string_token_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_token_0_REG_NUM 0
#define DT_N_S_test_S_string_token_0_RANGES_NUM 0
#define DT_N_S_test_S_string_token_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_token_0_IRQ_NUM 0
#define DT_N_S_test_S_string_token_0_IRQ_LEVEL 0
#define DT_N_S_test_S_string_token_0_COMPAT_MATCHES_vnd_string_token 1
#define DT_N_S_test_S_string_token_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_token_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_token_0_P_val "token_zero"
#define DT_N_S_test_S_string_token_0_P_val_STRING_UNQUOTED token_zero
#define DT_N_S_test_S_string_token_0_P_val_STRING_TOKEN token_zero
#define DT_N_S_test_S_string_token_0_P_val_STRING_UPPER_TOKEN TOKEN_ZERO
#define DT_N_S_test_S_string_token_0_P_val_IDX_0 "token_zero"
#define DT_N_S_test_S_string_token_0_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_token_0_P_val_ENUM_IDX 0
#define DT_N_S_test_S_string_token_0_P_val_ENUM_VAL_token_zero_EXISTS 1
#define DT_N_S_test_S_string_token_0_P_val_ENUM_TOKEN token_zero
#define DT_N_S_test_S_string_token_0_P_val_ENUM_UPPER_TOKEN TOKEN_ZERO
#define DT_N_S_test_S_string_token_0_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_token_0, val, 0)
#define DT_N_S_test_S_string_token_0_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_token_0, val, 0)
#define DT_N_S_test_S_string_token_0_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_token_0, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_token_0_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_token_0, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_token_0_P_val_LEN 1
#define DT_N_S_test_S_string_token_0_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-token-1
 *
 * Node identifier: DT_N_S_test_S_string_token_1
 *
 * Binding (compatible = vnd,string-token):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-token.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_token_1_PATH "/test/string-token-1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_token_1_FULL_NAME "string-token-1"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_token_1_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_token_1_CHILD_IDX 54

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_token_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_token_1_ORD 76
#define DT_N_S_test_S_string_token_1_ORD_STR_SORTABLE 00076

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_token_1_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_token_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_token_1_EXISTS 1
#define DT_N_INST_1_vnd_string_token       DT_N_S_test_S_string_token_1
#define DT_N_NODELABEL_test_string_token_1 DT_N_S_test_S_string_token_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_token_1_REG_NUM 0
#define DT_N_S_test_S_string_token_1_RANGES_NUM 0
#define DT_N_S_test_S_string_token_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_token_1_IRQ_NUM 0
#define DT_N_S_test_S_string_token_1_IRQ_LEVEL 0
#define DT_N_S_test_S_string_token_1_COMPAT_MATCHES_vnd_string_token 1
#define DT_N_S_test_S_string_token_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_token_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_token_1_P_val "token_one"
#define DT_N_S_test_S_string_token_1_P_val_STRING_UNQUOTED token_one
#define DT_N_S_test_S_string_token_1_P_val_STRING_TOKEN token_one
#define DT_N_S_test_S_string_token_1_P_val_STRING_UPPER_TOKEN TOKEN_ONE
#define DT_N_S_test_S_string_token_1_P_val_IDX_0 "token_one"
#define DT_N_S_test_S_string_token_1_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_token_1_P_val_ENUM_IDX 1
#define DT_N_S_test_S_string_token_1_P_val_ENUM_VAL_token_one_EXISTS 1
#define DT_N_S_test_S_string_token_1_P_val_ENUM_TOKEN token_one
#define DT_N_S_test_S_string_token_1_P_val_ENUM_UPPER_TOKEN TOKEN_ONE
#define DT_N_S_test_S_string_token_1_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_token_1, val, 0)
#define DT_N_S_test_S_string_token_1_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_token_1, val, 0)
#define DT_N_S_test_S_string_token_1_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_token_1, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_token_1_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_token_1, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_token_1_P_val_LEN 1
#define DT_N_S_test_S_string_token_1_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-token-2
 *
 * Node identifier: DT_N_S_test_S_string_token_2
 *
 * Binding (compatible = vnd,string-token):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-token.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_token_2_PATH "/test/string-token-2"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_token_2_FULL_NAME "string-token-2"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_token_2_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_token_2_CHILD_IDX 55

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_token_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_token_2_ORD 77
#define DT_N_S_test_S_string_token_2_ORD_STR_SORTABLE 00077

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_token_2_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_token_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_token_2_EXISTS 1
#define DT_N_INST_2_vnd_string_token       DT_N_S_test_S_string_token_2
#define DT_N_NODELABEL_test_string_token_2 DT_N_S_test_S_string_token_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_token_2_REG_NUM 0
#define DT_N_S_test_S_string_token_2_RANGES_NUM 0
#define DT_N_S_test_S_string_token_2_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_token_2_IRQ_NUM 0
#define DT_N_S_test_S_string_token_2_IRQ_LEVEL 0
#define DT_N_S_test_S_string_token_2_COMPAT_MATCHES_vnd_string_token 1
#define DT_N_S_test_S_string_token_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_token_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_token_2_P_val "token_two"
#define DT_N_S_test_S_string_token_2_P_val_STRING_UNQUOTED token_two
#define DT_N_S_test_S_string_token_2_P_val_STRING_TOKEN token_two
#define DT_N_S_test_S_string_token_2_P_val_STRING_UPPER_TOKEN TOKEN_TWO
#define DT_N_S_test_S_string_token_2_P_val_IDX_0 "token_two"
#define DT_N_S_test_S_string_token_2_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_token_2_P_val_ENUM_IDX 2
#define DT_N_S_test_S_string_token_2_P_val_ENUM_VAL_token_two_EXISTS 1
#define DT_N_S_test_S_string_token_2_P_val_ENUM_TOKEN token_two
#define DT_N_S_test_S_string_token_2_P_val_ENUM_UPPER_TOKEN TOKEN_TWO
#define DT_N_S_test_S_string_token_2_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_token_2, val, 0)
#define DT_N_S_test_S_string_token_2_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_token_2, val, 0)
#define DT_N_S_test_S_string_token_2_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_token_2, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_token_2_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_token_2, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_token_2_P_val_LEN 1
#define DT_N_S_test_S_string_token_2_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-unquoted-f0
 *
 * Node identifier: DT_N_S_test_S_string_unquoted_f0
 *
 * Binding (compatible = vnd,string-unquoted):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-unquoted.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_unquoted_f0_PATH "/test/string-unquoted-f0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_unquoted_f0_FULL_NAME "string-unquoted-f0"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_unquoted_f0_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_unquoted_f0_CHILD_IDX 58

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_unquoted_f0_ORD 78
#define DT_N_S_test_S_string_unquoted_f0_ORD_STR_SORTABLE 00078

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_unquoted_f0_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_unquoted_f0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_unquoted_f0_EXISTS 1
#define DT_N_INST_0_vnd_string_unquoted     DT_N_S_test_S_string_unquoted_f0
#define DT_N_NODELABEL_test_str_unquoted_f0 DT_N_S_test_S_string_unquoted_f0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_unquoted_f0_REG_NUM 0
#define DT_N_S_test_S_string_unquoted_f0_RANGES_NUM 0
#define DT_N_S_test_S_string_unquoted_f0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_unquoted_f0_IRQ_NUM 0
#define DT_N_S_test_S_string_unquoted_f0_IRQ_LEVEL 0
#define DT_N_S_test_S_string_unquoted_f0_COMPAT_MATCHES_vnd_string_unquoted 1
#define DT_N_S_test_S_string_unquoted_f0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_unquoted_f0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_unquoted_f0_P_val "0.1234"
#define DT_N_S_test_S_string_unquoted_f0_P_val_STRING_UNQUOTED 0.1234
#define DT_N_S_test_S_string_unquoted_f0_P_val_STRING_TOKEN 0_1234
#define DT_N_S_test_S_string_unquoted_f0_P_val_STRING_UPPER_TOKEN 0_1234
#define DT_N_S_test_S_string_unquoted_f0_P_val_IDX_0 "0.1234"
#define DT_N_S_test_S_string_unquoted_f0_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_unquoted_f0_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_unquoted_f0, val, 0)
#define DT_N_S_test_S_string_unquoted_f0_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_unquoted_f0, val, 0)
#define DT_N_S_test_S_string_unquoted_f0_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_unquoted_f0, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_unquoted_f0_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_unquoted_f0, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_unquoted_f0_P_val_LEN 1
#define DT_N_S_test_S_string_unquoted_f0_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-unquoted-f1
 *
 * Node identifier: DT_N_S_test_S_string_unquoted_f1
 *
 * Binding (compatible = vnd,string-unquoted):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-unquoted.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_unquoted_f1_PATH "/test/string-unquoted-f1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_unquoted_f1_FULL_NAME "string-unquoted-f1"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_unquoted_f1_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_unquoted_f1_CHILD_IDX 59

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_unquoted_f1_ORD 79
#define DT_N_S_test_S_string_unquoted_f1_ORD_STR_SORTABLE 00079

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_unquoted_f1_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_unquoted_f1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_unquoted_f1_EXISTS 1
#define DT_N_INST_1_vnd_string_unquoted     DT_N_S_test_S_string_unquoted_f1
#define DT_N_NODELABEL_test_str_unquoted_f1 DT_N_S_test_S_string_unquoted_f1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_unquoted_f1_REG_NUM 0
#define DT_N_S_test_S_string_unquoted_f1_RANGES_NUM 0
#define DT_N_S_test_S_string_unquoted_f1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_unquoted_f1_IRQ_NUM 0
#define DT_N_S_test_S_string_unquoted_f1_IRQ_LEVEL 0
#define DT_N_S_test_S_string_unquoted_f1_COMPAT_MATCHES_vnd_string_unquoted 1
#define DT_N_S_test_S_string_unquoted_f1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_unquoted_f1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_unquoted_f1_P_val "0.9e-3"
#define DT_N_S_test_S_string_unquoted_f1_P_val_STRING_UNQUOTED 0.9e-3
#define DT_N_S_test_S_string_unquoted_f1_P_val_STRING_TOKEN 0_9e_3
#define DT_N_S_test_S_string_unquoted_f1_P_val_STRING_UPPER_TOKEN 0_9E_3
#define DT_N_S_test_S_string_unquoted_f1_P_val_IDX_0 "0.9e-3"
#define DT_N_S_test_S_string_unquoted_f1_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_unquoted_f1_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_unquoted_f1, val, 0)
#define DT_N_S_test_S_string_unquoted_f1_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_unquoted_f1, val, 0)
#define DT_N_S_test_S_string_unquoted_f1_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_unquoted_f1, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_unquoted_f1_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_unquoted_f1, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_unquoted_f1_P_val_LEN 1
#define DT_N_S_test_S_string_unquoted_f1_P_val_EXISTS 1

/*
 * Devicetree node: /test/string-unquoted-t
 *
 * Node identifier: DT_N_S_test_S_string_unquoted_t
 *
 * Binding (compatible = vnd,string-unquoted):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,string-unquoted.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_string_unquoted_t_PATH "/test/string-unquoted-t"

/* Node's name with unit-address: */
#define DT_N_S_test_S_string_unquoted_t_FULL_NAME "string-unquoted-t"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_string_unquoted_t_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_string_unquoted_t_CHILD_IDX 60

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_string_unquoted_t_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_string_unquoted_t_ORD 80
#define DT_N_S_test_S_string_unquoted_t_ORD_STR_SORTABLE 00080

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_string_unquoted_t_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_string_unquoted_t_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_string_unquoted_t_EXISTS 1
#define DT_N_INST_2_vnd_string_unquoted    DT_N_S_test_S_string_unquoted_t
#define DT_N_NODELABEL_test_str_unquoted_t DT_N_S_test_S_string_unquoted_t

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_string_unquoted_t_REG_NUM 0
#define DT_N_S_test_S_string_unquoted_t_RANGES_NUM 0
#define DT_N_S_test_S_string_unquoted_t_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_string_unquoted_t_IRQ_NUM 0
#define DT_N_S_test_S_string_unquoted_t_IRQ_LEVEL 0
#define DT_N_S_test_S_string_unquoted_t_COMPAT_MATCHES_vnd_string_unquoted 1
#define DT_N_S_test_S_string_unquoted_t_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_string_unquoted_t_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_string_unquoted_t_P_val "XA XPLUS XB"
#define DT_N_S_test_S_string_unquoted_t_P_val_STRING_UNQUOTED XA XPLUS XB
#define DT_N_S_test_S_string_unquoted_t_P_val_STRING_TOKEN XA_XPLUS_XB
#define DT_N_S_test_S_string_unquoted_t_P_val_STRING_UPPER_TOKEN XA_XPLUS_XB
#define DT_N_S_test_S_string_unquoted_t_P_val_IDX_0 "XA XPLUS XB"
#define DT_N_S_test_S_string_unquoted_t_P_val_IDX_0_EXISTS 1
#define DT_N_S_test_S_string_unquoted_t_P_val_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_string_unquoted_t, val, 0)
#define DT_N_S_test_S_string_unquoted_t_P_val_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_string_unquoted_t, val, 0)
#define DT_N_S_test_S_string_unquoted_t_P_val_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_string_unquoted_t, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_unquoted_t_P_val_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_string_unquoted_t, val, 0, __VA_ARGS__)
#define DT_N_S_test_S_string_unquoted_t_P_val_LEN 1
#define DT_N_S_test_S_string_unquoted_t_P_val_EXISTS 1

/*
 * Devicetree node: /test/adc@10002000
 *
 * Node identifier: DT_N_S_test_S_adc_10002000
 *
 * Binding (compatible = vnd,adc):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_adc_10002000_PATH "/test/adc@10002000"

/* Node's name with unit-address: */
#define DT_N_S_test_S_adc_10002000_FULL_NAME "adc@10002000"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_adc_10002000_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_adc_10002000_CHILD_IDX 29

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_adc_10002000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_adc_10002000_ORD 81
#define DT_N_S_test_S_adc_10002000_ORD_STR_SORTABLE 00081

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_adc_10002000_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_adc_10002000_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_adc_10002000_EXISTS 1
#define DT_N_INST_0_vnd_adc       DT_N_S_test_S_adc_10002000
#define DT_N_NODELABEL_test_adc_1 DT_N_S_test_S_adc_10002000

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_adc_10002000_REG_NUM 1
#define DT_N_S_test_S_adc_10002000_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10002000_REG_IDX_0_VAL_ADDRESS 268443648 /* 0x10002000 */
#define DT_N_S_test_S_adc_10002000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_adc_10002000_RANGES_NUM 0
#define DT_N_S_test_S_adc_10002000_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_adc_10002000_IRQ_NUM 0
#define DT_N_S_test_S_adc_10002000_IRQ_LEVEL 0
#define DT_N_S_test_S_adc_10002000_COMPAT_MATCHES_vnd_adc 1
#define DT_N_S_test_S_adc_10002000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_adc_10002000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_adc_10002000_P_status "okay"
#define DT_N_S_test_S_adc_10002000_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_adc_10002000_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_adc_10002000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_adc_10002000_P_status_IDX_0 "okay"
#define DT_N_S_test_S_adc_10002000_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_status_ENUM_IDX 1
#define DT_N_S_test_S_adc_10002000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_adc_10002000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_adc_10002000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_adc_10002000, status, 0)
#define DT_N_S_test_S_adc_10002000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_adc_10002000, status, 0)
#define DT_N_S_test_S_adc_10002000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_adc_10002000, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10002000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_adc_10002000, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10002000_P_status_LEN 1
#define DT_N_S_test_S_adc_10002000_P_status_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_compatible {"vnd,adc"}
#define DT_N_S_test_S_adc_10002000_P_compatible_IDX_0 "vnd,adc"
#define DT_N_S_test_S_adc_10002000_P_compatible_IDX_0_STRING_UNQUOTED vnd,adc
#define DT_N_S_test_S_adc_10002000_P_compatible_IDX_0_STRING_TOKEN vnd_adc
#define DT_N_S_test_S_adc_10002000_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ADC
#define DT_N_S_test_S_adc_10002000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_adc_10002000, compatible, 0)
#define DT_N_S_test_S_adc_10002000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_adc_10002000, compatible, 0)
#define DT_N_S_test_S_adc_10002000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_adc_10002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10002000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_adc_10002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10002000_P_compatible_LEN 1
#define DT_N_S_test_S_adc_10002000_P_compatible_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_reg {268443648 /* 0x10002000 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_adc_10002000_P_reg_IDX_0 268443648
#define DT_N_S_test_S_adc_10002000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_reg_IDX_1 4096
#define DT_N_S_test_S_adc_10002000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_reg_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_wakeup_source 0
#define DT_N_S_test_S_adc_10002000_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_adc_10002000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_adc_10002000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/adc@10003000
 *
 * Node identifier: DT_N_S_test_S_adc_10003000
 *
 * Binding (compatible = vnd,adc):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_adc_10003000_PATH "/test/adc@10003000"

/* Node's name with unit-address: */
#define DT_N_S_test_S_adc_10003000_FULL_NAME "adc@10003000"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_adc_10003000_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_adc_10003000_CHILD_IDX 30

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_adc_10003000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_adc_10003000_ORD 82
#define DT_N_S_test_S_adc_10003000_ORD_STR_SORTABLE 00082

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_adc_10003000_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_adc_10003000_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_adc_10003000_EXISTS 1
#define DT_N_INST_1_vnd_adc       DT_N_S_test_S_adc_10003000
#define DT_N_NODELABEL_test_adc_2 DT_N_S_test_S_adc_10003000

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_adc_10003000_REG_NUM 1
#define DT_N_S_test_S_adc_10003000_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10003000_REG_IDX_0_VAL_ADDRESS 268447744 /* 0x10003000 */
#define DT_N_S_test_S_adc_10003000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_adc_10003000_RANGES_NUM 0
#define DT_N_S_test_S_adc_10003000_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_adc_10003000_IRQ_NUM 0
#define DT_N_S_test_S_adc_10003000_IRQ_LEVEL 0
#define DT_N_S_test_S_adc_10003000_COMPAT_MATCHES_vnd_adc 1
#define DT_N_S_test_S_adc_10003000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_adc_10003000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_adc_10003000_P_status "okay"
#define DT_N_S_test_S_adc_10003000_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_adc_10003000_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_adc_10003000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_adc_10003000_P_status_IDX_0 "okay"
#define DT_N_S_test_S_adc_10003000_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_status_ENUM_IDX 1
#define DT_N_S_test_S_adc_10003000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_adc_10003000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_adc_10003000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_adc_10003000, status, 0)
#define DT_N_S_test_S_adc_10003000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_adc_10003000, status, 0)
#define DT_N_S_test_S_adc_10003000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_adc_10003000, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10003000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_adc_10003000, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10003000_P_status_LEN 1
#define DT_N_S_test_S_adc_10003000_P_status_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_compatible {"vnd,adc"}
#define DT_N_S_test_S_adc_10003000_P_compatible_IDX_0 "vnd,adc"
#define DT_N_S_test_S_adc_10003000_P_compatible_IDX_0_STRING_UNQUOTED vnd,adc
#define DT_N_S_test_S_adc_10003000_P_compatible_IDX_0_STRING_TOKEN vnd_adc
#define DT_N_S_test_S_adc_10003000_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ADC
#define DT_N_S_test_S_adc_10003000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_adc_10003000, compatible, 0)
#define DT_N_S_test_S_adc_10003000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_adc_10003000, compatible, 0)
#define DT_N_S_test_S_adc_10003000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_adc_10003000, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10003000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_adc_10003000, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_adc_10003000_P_compatible_LEN 1
#define DT_N_S_test_S_adc_10003000_P_compatible_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_reg {268447744 /* 0x10003000 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_adc_10003000_P_reg_IDX_0 268447744
#define DT_N_S_test_S_adc_10003000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_reg_IDX_1 4096
#define DT_N_S_test_S_adc_10003000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_reg_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_wakeup_source 0
#define DT_N_S_test_S_adc_10003000_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_adc_10003000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_adc_10003000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/dma@44442222
 *
 * Node identifier: DT_N_S_test_S_dma_44442222
 *
 * Binding (compatible = vnd,dma):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,dma.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_dma_44442222_PATH "/test/dma@44442222"

/* Node's name with unit-address: */
#define DT_N_S_test_S_dma_44442222_FULL_NAME "dma@44442222"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_dma_44442222_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_dma_44442222_CHILD_IDX 41

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_dma_44442222_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_dma_44442222_ORD 83
#define DT_N_S_test_S_dma_44442222_ORD_STR_SORTABLE 00083

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_dma_44442222_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_dma_44442222_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_dma_44442222_EXISTS 1
#define DT_N_INST_1_vnd_dma      DT_N_S_test_S_dma_44442222
#define DT_N_NODELABEL_test_dma2 DT_N_S_test_S_dma_44442222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_dma_44442222_REG_NUM 1
#define DT_N_S_test_S_dma_44442222_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44442222_REG_IDX_0_VAL_ADDRESS 1145315874 /* 0x44442222 */
#define DT_N_S_test_S_dma_44442222_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_dma_44442222_RANGES_NUM 0
#define DT_N_S_test_S_dma_44442222_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_dma_44442222_IRQ_NUM 1
#define DT_N_S_test_S_dma_44442222_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44442222_IRQ_IDX_0_VAL_irq 12
#define DT_N_S_test_S_dma_44442222_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_dma_44442222_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44442222_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_test_S_dma_44442222_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_dma_44442222_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_dma_44442222_IRQ_LEVEL 2
#define DT_N_S_test_S_dma_44442222_COMPAT_MATCHES_vnd_dma 1
#define DT_N_S_test_S_dma_44442222_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_dma_44442222_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_dma_44442222_P_reg {1145315874 /* 0x44442222 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_dma_44442222_P_reg_IDX_0 1145315874
#define DT_N_S_test_S_dma_44442222_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_reg_IDX_1 4096
#define DT_N_S_test_S_dma_44442222_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_reg_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_interrupts {12 /* 0xc */, 3 /* 0x3 */}
#define DT_N_S_test_S_dma_44442222_P_interrupts_IDX_0 12
#define DT_N_S_test_S_dma_44442222_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_interrupts_IDX_1 3
#define DT_N_S_test_S_dma_44442222_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_interrupts_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_status "okay"
#define DT_N_S_test_S_dma_44442222_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_dma_44442222_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_dma_44442222_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_dma_44442222_P_status_IDX_0 "okay"
#define DT_N_S_test_S_dma_44442222_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_status_ENUM_IDX 1
#define DT_N_S_test_S_dma_44442222_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_dma_44442222_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_dma_44442222_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_dma_44442222, status, 0)
#define DT_N_S_test_S_dma_44442222_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_dma_44442222, status, 0)
#define DT_N_S_test_S_dma_44442222_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_dma_44442222, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44442222_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_dma_44442222, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44442222_P_status_LEN 1
#define DT_N_S_test_S_dma_44442222_P_status_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_compatible {"vnd,dma"}
#define DT_N_S_test_S_dma_44442222_P_compatible_IDX_0 "vnd,dma"
#define DT_N_S_test_S_dma_44442222_P_compatible_IDX_0_STRING_UNQUOTED vnd,dma
#define DT_N_S_test_S_dma_44442222_P_compatible_IDX_0_STRING_TOKEN vnd_dma
#define DT_N_S_test_S_dma_44442222_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_DMA
#define DT_N_S_test_S_dma_44442222_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_dma_44442222, compatible, 0)
#define DT_N_S_test_S_dma_44442222_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_dma_44442222, compatible, 0)
#define DT_N_S_test_S_dma_44442222_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_dma_44442222, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44442222_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_dma_44442222, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44442222_P_compatible_LEN 1
#define DT_N_S_test_S_dma_44442222_P_compatible_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_wakeup_source 0
#define DT_N_S_test_S_dma_44442222_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_dma_44442222_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_dma_44442222_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/dma@44443333
 *
 * Node identifier: DT_N_S_test_S_dma_44443333
 *
 * Binding (compatible = vnd,dma):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,dma.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_dma_44443333_PATH "/test/dma@44443333"

/* Node's name with unit-address: */
#define DT_N_S_test_S_dma_44443333_FULL_NAME "dma@44443333"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_dma_44443333_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_dma_44443333_CHILD_IDX 40

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_dma_44443333_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_dma_44443333_ORD 84
#define DT_N_S_test_S_dma_44443333_ORD_STR_SORTABLE 00084

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_dma_44443333_REQUIRES_ORDS \
	21, /* /test */ \
	23, /* /test/interrupt-controller@bbbbcccc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_dma_44443333_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_dma_44443333_EXISTS 1
#define DT_N_INST_0_vnd_dma      DT_N_S_test_S_dma_44443333
#define DT_N_NODELABEL_test_dma1 DT_N_S_test_S_dma_44443333

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_dma_44443333_REG_NUM 1
#define DT_N_S_test_S_dma_44443333_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44443333_REG_IDX_0_VAL_ADDRESS 1145320243 /* 0x44443333 */
#define DT_N_S_test_S_dma_44443333_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_dma_44443333_RANGES_NUM 0
#define DT_N_S_test_S_dma_44443333_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_dma_44443333_IRQ_NUM 1
#define DT_N_S_test_S_dma_44443333_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44443333_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_test_S_dma_44443333_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_test_S_dma_44443333_IRQ_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44443333_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_test_S_dma_44443333_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_test_S_dma_44443333_IRQ_IDX_0_CONTROLLER DT_N_S_test_S_interrupt_controller_bbbbcccc
#define DT_N_S_test_S_dma_44443333_IRQ_LEVEL 2
#define DT_N_S_test_S_dma_44443333_COMPAT_MATCHES_vnd_dma 1
#define DT_N_S_test_S_dma_44443333_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_dma_44443333_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_dma_44443333_P_reg {1145320243 /* 0x44443333 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_dma_44443333_P_reg_IDX_0 1145320243
#define DT_N_S_test_S_dma_44443333_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_reg_IDX_1 4096
#define DT_N_S_test_S_dma_44443333_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_reg_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_interrupts {11 /* 0xb */, 3 /* 0x3 */}
#define DT_N_S_test_S_dma_44443333_P_interrupts_IDX_0 11
#define DT_N_S_test_S_dma_44443333_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_interrupts_IDX_1 3
#define DT_N_S_test_S_dma_44443333_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_interrupts_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_status "okay"
#define DT_N_S_test_S_dma_44443333_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_dma_44443333_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_dma_44443333_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_dma_44443333_P_status_IDX_0 "okay"
#define DT_N_S_test_S_dma_44443333_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_status_ENUM_IDX 1
#define DT_N_S_test_S_dma_44443333_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_dma_44443333_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_dma_44443333_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_dma_44443333, status, 0)
#define DT_N_S_test_S_dma_44443333_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_dma_44443333, status, 0)
#define DT_N_S_test_S_dma_44443333_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_dma_44443333, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44443333_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_dma_44443333, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44443333_P_status_LEN 1
#define DT_N_S_test_S_dma_44443333_P_status_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_compatible {"vnd,dma"}
#define DT_N_S_test_S_dma_44443333_P_compatible_IDX_0 "vnd,dma"
#define DT_N_S_test_S_dma_44443333_P_compatible_IDX_0_STRING_UNQUOTED vnd,dma
#define DT_N_S_test_S_dma_44443333_P_compatible_IDX_0_STRING_TOKEN vnd_dma
#define DT_N_S_test_S_dma_44443333_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_DMA
#define DT_N_S_test_S_dma_44443333_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_dma_44443333, compatible, 0)
#define DT_N_S_test_S_dma_44443333_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_dma_44443333, compatible, 0)
#define DT_N_S_test_S_dma_44443333_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_dma_44443333, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44443333_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_dma_44443333, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_dma_44443333_P_compatible_LEN 1
#define DT_N_S_test_S_dma_44443333_P_compatible_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_wakeup_source 0
#define DT_N_S_test_S_dma_44443333_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_dma_44443333_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_dma_44443333_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/mbox
 *
 * Node identifier: DT_N_S_test_S_mbox
 *
 * Binding (compatible = vnd,mbox):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,mbox.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_mbox_PATH "/test/mbox"

/* Node's name with unit-address: */
#define DT_N_S_test_S_mbox_FULL_NAME "mbox"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_mbox_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_mbox_CHILD_IDX 24

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_mbox_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_mbox_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_mbox_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_mbox_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_mbox_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_mbox_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_mbox_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_mbox_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_mbox_ORD 85
#define DT_N_S_test_S_mbox_ORD_STR_SORTABLE 00085

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_mbox_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_mbox_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_mbox_EXISTS 1
#define DT_N_INST_0_vnd_mbox     DT_N_S_test_S_mbox
#define DT_N_NODELABEL_test_mbox DT_N_S_test_S_mbox

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_mbox_REG_NUM 0
#define DT_N_S_test_S_mbox_RANGES_NUM 0
#define DT_N_S_test_S_mbox_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_mbox_IRQ_NUM 0
#define DT_N_S_test_S_mbox_IRQ_LEVEL 0
#define DT_N_S_test_S_mbox_COMPAT_MATCHES_vnd_mbox 1
#define DT_N_S_test_S_mbox_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_mbox_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/mbox_zero_cell
 *
 * Node identifier: DT_N_S_test_S_mbox_zero_cell
 *
 * Binding (compatible = vnd,mbox-zero-cell):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,mbox-zero-cell.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_mbox_zero_cell_PATH "/test/mbox_zero_cell"

/* Node's name with unit-address: */
#define DT_N_S_test_S_mbox_zero_cell_FULL_NAME "mbox_zero_cell"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_mbox_zero_cell_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_mbox_zero_cell_CHILD_IDX 25

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_mbox_zero_cell_ORD 86
#define DT_N_S_test_S_mbox_zero_cell_ORD_STR_SORTABLE 00086

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_mbox_zero_cell_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_mbox_zero_cell_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_mbox_zero_cell_EXISTS 1
#define DT_N_INST_0_vnd_mbox_zero_cell     DT_N_S_test_S_mbox_zero_cell
#define DT_N_NODELABEL_test_mbox_zero_cell DT_N_S_test_S_mbox_zero_cell

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_mbox_zero_cell_REG_NUM 0
#define DT_N_S_test_S_mbox_zero_cell_RANGES_NUM 0
#define DT_N_S_test_S_mbox_zero_cell_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_mbox_zero_cell_IRQ_NUM 0
#define DT_N_S_test_S_mbox_zero_cell_IRQ_LEVEL 0
#define DT_N_S_test_S_mbox_zero_cell_COMPAT_MATCHES_vnd_mbox_zero_cell 1
#define DT_N_S_test_S_mbox_zero_cell_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_mbox_zero_cell_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_mbox_zero_cell_P_compatible {"vnd,mbox-zero-cell"}
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_IDX_0 "vnd,mbox-zero-cell"
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_IDX_0_STRING_UNQUOTED vnd,mbox-zero-cell
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_IDX_0_STRING_TOKEN vnd_mbox_zero_cell
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_MBOX_ZERO_CELL
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_mbox_zero_cell, compatible, 0)
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_mbox_zero_cell, compatible, 0)
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_mbox_zero_cell, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_mbox_zero_cell, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_LEN 1
#define DT_N_S_test_S_mbox_zero_cell_P_compatible_EXISTS 1
#define DT_N_S_test_S_mbox_zero_cell_P_status "okay"
#define DT_N_S_test_S_mbox_zero_cell_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_mbox_zero_cell_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_mbox_zero_cell_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_mbox_zero_cell_P_status_IDX_0 "okay"
#define DT_N_S_test_S_mbox_zero_cell_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_mbox_zero_cell_P_status_ENUM_IDX 1
#define DT_N_S_test_S_mbox_zero_cell_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_mbox_zero_cell_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_mbox_zero_cell_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_mbox_zero_cell_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_mbox_zero_cell, status, 0)
#define DT_N_S_test_S_mbox_zero_cell_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_mbox_zero_cell, status, 0)
#define DT_N_S_test_S_mbox_zero_cell_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_mbox_zero_cell, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_mbox_zero_cell_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_mbox_zero_cell, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_mbox_zero_cell_P_status_LEN 1
#define DT_N_S_test_S_mbox_zero_cell_P_status_EXISTS 1

/*
 * Devicetree node: /test/test-clock
 *
 * Node identifier: DT_N_S_test_S_test_clock
 *
 * Binding (compatible = vnd,clock):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_clock_PATH "/test/test-clock"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_clock_FULL_NAME "test-clock"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_clock_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_clock_CHILD_IDX 38

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_clock_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_clock_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_clock_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_clock_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_clock_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_clock_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_clock_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_clock_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_clock_ORD 87
#define DT_N_S_test_S_test_clock_ORD_STR_SORTABLE 00087

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_clock_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_clock_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_clock_EXISTS 1
#define DT_N_INST_0_vnd_clock   DT_N_S_test_S_test_clock
#define DT_N_NODELABEL_test_clk DT_N_S_test_S_test_clock

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_clock_REG_NUM 0
#define DT_N_S_test_S_test_clock_RANGES_NUM 0
#define DT_N_S_test_S_test_clock_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_clock_IRQ_NUM 0
#define DT_N_S_test_S_test_clock_IRQ_LEVEL 0
#define DT_N_S_test_S_test_clock_COMPAT_MATCHES_vnd_clock 1
#define DT_N_S_test_S_test_clock_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_clock_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_clock_P_compatible {"vnd,clock"}
#define DT_N_S_test_S_test_clock_P_compatible_IDX_0 "vnd,clock"
#define DT_N_S_test_S_test_clock_P_compatible_IDX_0_STRING_UNQUOTED vnd,clock
#define DT_N_S_test_S_test_clock_P_compatible_IDX_0_STRING_TOKEN vnd_clock
#define DT_N_S_test_S_test_clock_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_CLOCK
#define DT_N_S_test_S_test_clock_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_clock_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_clock, compatible, 0)
#define DT_N_S_test_S_test_clock_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_clock, compatible, 0)
#define DT_N_S_test_S_test_clock_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_clock, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_clock_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_clock, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_clock_P_compatible_LEN 1
#define DT_N_S_test_S_test_clock_P_compatible_EXISTS 1
#define DT_N_S_test_S_test_clock_P_wakeup_source 0
#define DT_N_S_test_S_test_clock_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_test_clock_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_test_clock_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/test-fixed-clock
 *
 * Node identifier: DT_N_S_test_S_test_fixed_clock
 *
 * Binding (compatible = fixed-clock):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/clock/fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_fixed_clock_PATH "/test/test-fixed-clock"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_fixed_clock_FULL_NAME "test-fixed-clock"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_fixed_clock_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_fixed_clock_CHILD_IDX 37

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_fixed_clock_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_fixed_clock_ORD 88
#define DT_N_S_test_S_test_fixed_clock_ORD_STR_SORTABLE 00088

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_fixed_clock_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_fixed_clock_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_fixed_clock_EXISTS 1
#define DT_N_INST_0_fixed_clock       DT_N_S_test_S_test_fixed_clock
#define DT_N_NODELABEL_test_fixed_clk DT_N_S_test_S_test_fixed_clock

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_fixed_clock_REG_NUM 0
#define DT_N_S_test_S_test_fixed_clock_RANGES_NUM 0
#define DT_N_S_test_S_test_fixed_clock_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_fixed_clock_IRQ_NUM 0
#define DT_N_S_test_S_test_fixed_clock_IRQ_LEVEL 0
#define DT_N_S_test_S_test_fixed_clock_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_test_S_test_fixed_clock_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_fixed_clock_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_fixed_clock_P_clock_frequency 25000000
#define DT_N_S_test_S_test_fixed_clock_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /test/test-reset@abcd1234
 *
 * Node identifier: DT_N_S_test_S_test_reset_abcd1234
 *
 * Binding (compatible = vnd,reset):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,reset.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_reset_abcd1234_PATH "/test/test-reset@abcd1234"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_reset_abcd1234_FULL_NAME "test-reset@abcd1234"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_reset_abcd1234_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_reset_abcd1234_CHILD_IDX 39

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_reset_abcd1234_ORD 89
#define DT_N_S_test_S_test_reset_abcd1234_ORD_STR_SORTABLE 00089

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_reset_abcd1234_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_reset_abcd1234_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_reset_abcd1234_EXISTS 1
#define DT_N_INST_0_vnd_reset     DT_N_S_test_S_test_reset_abcd1234
#define DT_N_NODELABEL_test_reset DT_N_S_test_S_test_reset_abcd1234

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_reset_abcd1234_REG_NUM 1
#define DT_N_S_test_S_test_reset_abcd1234_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_REG_IDX_0_VAL_ADDRESS 2882343476 /* 0xabcd1234 */
#define DT_N_S_test_S_test_reset_abcd1234_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_test_S_test_reset_abcd1234_RANGES_NUM 0
#define DT_N_S_test_S_test_reset_abcd1234_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_reset_abcd1234_IRQ_NUM 0
#define DT_N_S_test_S_test_reset_abcd1234_IRQ_LEVEL 0
#define DT_N_S_test_S_test_reset_abcd1234_COMPAT_MATCHES_vnd_reset 1
#define DT_N_S_test_S_test_reset_abcd1234_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_reset_abcd1234_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_reset_abcd1234_P_reg_width 4
#define DT_N_S_test_S_test_reset_abcd1234_P_reg_width_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible {"vnd,reset"}
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_IDX_0 "vnd,reset"
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_IDX_0_STRING_UNQUOTED vnd,reset
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_IDX_0_STRING_TOKEN vnd_reset
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_RESET
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_reset_abcd1234, compatible, 0)
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_reset_abcd1234, compatible, 0)
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_reset_abcd1234, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_reset_abcd1234, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_LEN 1
#define DT_N_S_test_S_test_reset_abcd1234_P_compatible_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_P_reg {2882343476 /* 0xabcd1234 */, 256 /* 0x100 */}
#define DT_N_S_test_S_test_reset_abcd1234_P_reg_IDX_0 2882343476
#define DT_N_S_test_S_test_reset_abcd1234_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_P_reg_IDX_1 256
#define DT_N_S_test_S_test_reset_abcd1234_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_P_reg_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_P_wakeup_source 0
#define DT_N_S_test_S_test_reset_abcd1234_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_test_reset_abcd1234_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_test_reset_abcd1234_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/pin-controller
 *
 * Node identifier: DT_N_S_test_S_pin_controller
 *
 * Binding (compatible = vnd,pinctrl):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_pin_controller_PATH "/test/pin-controller"

/* Node's name with unit-address: */
#define DT_N_S_test_S_pin_controller_FULL_NAME "pin-controller"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_pin_controller_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_pin_controller_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD(fn) fn(DT_N_S_test_S_pin_controller_S_pincfg_a) fn(DT_N_S_test_S_pin_controller_S_pincfg_b) fn(DT_N_S_test_S_pin_controller_S_pincfg_c) fn(DT_N_S_test_S_pin_controller_S_pincfg_d)
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_pin_controller_S_pincfg_a) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_b) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_d)
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_pin_controller_S_pincfg_a, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_b, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_c, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_d, __VA_ARGS__)
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_pin_controller_S_pincfg_a, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_b, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_d, __VA_ARGS__)
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_pin_controller_S_pincfg_a) fn(DT_N_S_test_S_pin_controller_S_pincfg_b) fn(DT_N_S_test_S_pin_controller_S_pincfg_c) fn(DT_N_S_test_S_pin_controller_S_pincfg_d)
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_pin_controller_S_pincfg_a) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_b) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_d)
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_pin_controller_S_pincfg_a, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_b, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_c, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_d, __VA_ARGS__)
#define DT_N_S_test_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_pin_controller_S_pincfg_a, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_b, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_pin_controller_S_pincfg_d, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_pin_controller_ORD 90
#define DT_N_S_test_S_pin_controller_ORD_STR_SORTABLE 00090

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_pin_controller_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_pin_controller_SUPPORTS_ORDS \
	91, /* /test/pin-controller/pincfg-a */ \
	92, /* /test/pin-controller/pincfg-b */ \
	93, /* /test/pin-controller/pincfg-c */ \
	94, /* /test/pin-controller/pincfg-d */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_pin_controller_EXISTS 1
#define DT_N_INST_0_vnd_pinctrl     DT_N_S_test_S_pin_controller
#define DT_N_NODELABEL_test_pinctrl DT_N_S_test_S_pin_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_pin_controller_REG_NUM 0
#define DT_N_S_test_S_pin_controller_RANGES_NUM 0
#define DT_N_S_test_S_pin_controller_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_pin_controller_IRQ_NUM 0
#define DT_N_S_test_S_pin_controller_IRQ_LEVEL 0
#define DT_N_S_test_S_pin_controller_COMPAT_MATCHES_vnd_pinctrl 1
#define DT_N_S_test_S_pin_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_pin_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_pin_controller_P_bias_disable 0
#define DT_N_S_test_S_pin_controller_P_bias_disable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_bias_high_impedance 0
#define DT_N_S_test_S_pin_controller_P_bias_high_impedance_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_bias_bus_hold 0
#define DT_N_S_test_S_pin_controller_P_bias_bus_hold_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_bias_pull_up 0
#define DT_N_S_test_S_pin_controller_P_bias_pull_up_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_bias_pull_down 0
#define DT_N_S_test_S_pin_controller_P_bias_pull_down_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_bias_pull_pin_default 0
#define DT_N_S_test_S_pin_controller_P_bias_pull_pin_default_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_drive_push_pull 0
#define DT_N_S_test_S_pin_controller_P_drive_push_pull_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_drive_open_drain 0
#define DT_N_S_test_S_pin_controller_P_drive_open_drain_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_drive_open_source 0
#define DT_N_S_test_S_pin_controller_P_drive_open_source_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_input_enable 0
#define DT_N_S_test_S_pin_controller_P_input_enable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_input_disable 0
#define DT_N_S_test_S_pin_controller_P_input_disable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_input_schmitt_enable 0
#define DT_N_S_test_S_pin_controller_P_input_schmitt_enable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_input_schmitt_disable 0
#define DT_N_S_test_S_pin_controller_P_input_schmitt_disable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_low_power_enable 0
#define DT_N_S_test_S_pin_controller_P_low_power_enable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_low_power_disable 0
#define DT_N_S_test_S_pin_controller_P_low_power_disable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_output_disable 0
#define DT_N_S_test_S_pin_controller_P_output_disable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_output_enable 0
#define DT_N_S_test_S_pin_controller_P_output_enable_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_output_low 0
#define DT_N_S_test_S_pin_controller_P_output_low_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_output_high 0
#define DT_N_S_test_S_pin_controller_P_output_high_EXISTS 1
#define DT_N_S_test_S_pin_controller_P_sleep_hardware_state 0
#define DT_N_S_test_S_pin_controller_P_sleep_hardware_state_EXISTS 1

/*
 * Devicetree node: /test/pin-controller/pincfg-a
 *
 * Node identifier: DT_N_S_test_S_pin_controller_S_pincfg_a
 */

/* Node's full path: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_PATH "/test/pin-controller/pincfg-a"

/* Node's name with unit-address: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FULL_NAME "pincfg-a"

/* Node parent (/test/pin-controller) identifier: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_PARENT DT_N_S_test_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_ORD 91
#define DT_N_S_test_S_pin_controller_S_pincfg_a_ORD_STR_SORTABLE 00091

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_REQUIRES_ORDS \
	90, /* /test/pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_EXISTS 1
#define DT_N_NODELABEL_test_pincfg_a DT_N_S_test_S_pin_controller_S_pincfg_a

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_REG_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_a_RANGES_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_a_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_a_IRQ_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_a_IRQ_LEVEL 0
#define DT_N_S_test_S_pin_controller_S_pincfg_a_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_pin_controller_S_pincfg_a_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/pin-controller/pincfg-b
 *
 * Node identifier: DT_N_S_test_S_pin_controller_S_pincfg_b
 */

/* Node's full path: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_PATH "/test/pin-controller/pincfg-b"

/* Node's name with unit-address: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FULL_NAME "pincfg-b"

/* Node parent (/test/pin-controller) identifier: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_PARENT DT_N_S_test_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_ORD 92
#define DT_N_S_test_S_pin_controller_S_pincfg_b_ORD_STR_SORTABLE 00092

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_REQUIRES_ORDS \
	90, /* /test/pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_EXISTS 1
#define DT_N_NODELABEL_test_pincfg_b DT_N_S_test_S_pin_controller_S_pincfg_b

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_REG_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_b_RANGES_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_b_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_b_IRQ_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_b_IRQ_LEVEL 0
#define DT_N_S_test_S_pin_controller_S_pincfg_b_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_pin_controller_S_pincfg_b_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/pin-controller/pincfg-c
 *
 * Node identifier: DT_N_S_test_S_pin_controller_S_pincfg_c
 */

/* Node's full path: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_PATH "/test/pin-controller/pincfg-c"

/* Node's name with unit-address: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FULL_NAME "pincfg-c"

/* Node parent (/test/pin-controller) identifier: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_PARENT DT_N_S_test_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_ORD 93
#define DT_N_S_test_S_pin_controller_S_pincfg_c_ORD_STR_SORTABLE 00093

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_REQUIRES_ORDS \
	90, /* /test/pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_EXISTS 1
#define DT_N_NODELABEL_test_pincfg_c DT_N_S_test_S_pin_controller_S_pincfg_c

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_REG_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_c_RANGES_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_c_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_c_IRQ_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_c_IRQ_LEVEL 0
#define DT_N_S_test_S_pin_controller_S_pincfg_c_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_pin_controller_S_pincfg_c_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/pin-controller/pincfg-d
 *
 * Node identifier: DT_N_S_test_S_pin_controller_S_pincfg_d
 */

/* Node's full path: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_PATH "/test/pin-controller/pincfg-d"

/* Node's name with unit-address: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FULL_NAME "pincfg-d"

/* Node parent (/test/pin-controller) identifier: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_PARENT DT_N_S_test_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_ORD 94
#define DT_N_S_test_S_pin_controller_S_pincfg_d_ORD_STR_SORTABLE 00094

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_REQUIRES_ORDS \
	90, /* /test/pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_SUPPORTS_ORDS \
	95, /* /test/temperature-sensor */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_EXISTS 1
#define DT_N_NODELABEL_test_pincfg_d DT_N_S_test_S_pin_controller_S_pincfg_d

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_REG_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_d_RANGES_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_d_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_pin_controller_S_pincfg_d_IRQ_NUM 0
#define DT_N_S_test_S_pin_controller_S_pincfg_d_IRQ_LEVEL 0
#define DT_N_S_test_S_pin_controller_S_pincfg_d_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_pin_controller_S_pincfg_d_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/temperature-sensor
 *
 * Node identifier: DT_N_S_test_S_temperature_sensor
 *
 * Binding (compatible = vnd,adc-temp-sensor):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,adc-temp-sensor.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_temperature_sensor_PATH "/test/temperature-sensor"

/* Node's name with unit-address: */
#define DT_N_S_test_S_temperature_sensor_FULL_NAME "temperature-sensor"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_temperature_sensor_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_temperature_sensor_CHILD_IDX 31

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_temperature_sensor_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_temperature_sensor_ORD 95
#define DT_N_S_test_S_temperature_sensor_ORD_STR_SORTABLE 00095

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_temperature_sensor_REQUIRES_ORDS \
	21, /* /test */ \
	81, /* /test/adc@10002000 */ \
	82, /* /test/adc@10003000 */ \
	83, /* /test/dma@44442222 */ \
	84, /* /test/dma@44443333 */ \
	85, /* /test/mbox */ \
	86, /* /test/mbox_zero_cell */ \
	87, /* /test/test-clock */ \
	88, /* /test/test-fixed-clock */ \
	89, /* /test/test-reset@abcd1234 */ \
	91, /* /test/pin-controller/pincfg-a */ \
	92, /* /test/pin-controller/pincfg-b */ \
	93, /* /test/pin-controller/pincfg-c */ \
	94, /* /test/pin-controller/pincfg-d */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_temperature_sensor_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_temperature_sensor_EXISTS 1
#define DT_N_INST_0_vnd_adc_temp_sensor DT_N_S_test_S_temperature_sensor
#define DT_N_NODELABEL_test_temp_sensor DT_N_S_test_S_temperature_sensor

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_temperature_sensor_REG_NUM 0
#define DT_N_S_test_S_temperature_sensor_RANGES_NUM 0
#define DT_N_S_test_S_temperature_sensor_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_temperature_sensor_IRQ_NUM 0
#define DT_N_S_test_S_temperature_sensor_IRQ_LEVEL 0
#define DT_N_S_test_S_temperature_sensor_COMPAT_MATCHES_vnd_adc_temp_sensor 1
#define DT_N_S_test_S_temperature_sensor_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NUM 3
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_default_IDX 0
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_default_IDX_0_PH DT_N_S_test_S_pin_controller_S_pincfg_a
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_default_IDX_1_PH DT_N_S_test_S_pin_controller_S_pincfg_b
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_1_TOKEN sleep
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_1_UPPER_TOKEN SLEEP
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_sleep_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_sleep_IDX 1
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_sleep_IDX_0_PH DT_N_S_test_S_pin_controller_S_pincfg_c
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_sleep_IDX_1_PH DT_N_S_test_S_pin_controller_S_pincfg_d
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_2_TOKEN f_o_o2
#define DT_N_S_test_S_temperature_sensor_PINCTRL_IDX_2_UPPER_TOKEN F_O_O2
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_f_o_o2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_f_o_o2_IDX 2
#define DT_N_S_test_S_temperature_sensor_PINCTRL_NAME_f_o_o2_IDX_0_PH DT_N_S_test_S_pin_controller_S_pincfg_d

/* Generic property macros: */
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_0_PH DT_N_S_test_S_adc_10002000
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_0_VAL_input 10
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_0_VAL_input_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_0_NAME "ch1"
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch1_PH DT_N_S_test_S_adc_10002000
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch1_VAL_input DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_0_VAL_input
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch1_VAL_input_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_1_PH DT_N_S_test_S_adc_10003000
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_1_VAL_input 20
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_1_VAL_input_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_1_NAME "ch2"
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch2_PH DT_N_S_test_S_adc_10003000
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch2_VAL_input DT_N_S_test_S_temperature_sensor_P_io_channels_IDX_1_VAL_input
#define DT_N_S_test_S_temperature_sensor_P_io_channels_NAME_ch2_VAL_input_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channels_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, io_channels, 0) \
	fn(DT_N_S_test_S_temperature_sensor, io_channels, 1)
#define DT_N_S_test_S_temperature_sensor_P_io_channels_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, io_channels, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, io_channels, 1)
#define DT_N_S_test_S_temperature_sensor_P_io_channels_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, io_channels, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, io_channels, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_io_channels_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, io_channels, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, io_channels, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_io_channels_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_io_channels_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names {"ch1", "ch2"}
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_0 "ch1"
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_0_STRING_UNQUOTED ch1
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_0_STRING_TOKEN ch1
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_0_STRING_UPPER_TOKEN CH1
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_1 "ch2"
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_1_STRING_UNQUOTED ch2
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_1_STRING_TOKEN ch2
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_1_STRING_UPPER_TOKEN CH2
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 0) \
	fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 1)
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 1)
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, io_channel_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_io_channel_names_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_PH DT_N_S_test_S_test_clock
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_VAL_bus 3
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_VAL_bus_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_VAL_bits 7
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_NAME "clk-a"
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_a_PH DT_N_S_test_S_test_clock
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_a_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_a_VAL_bus DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_VAL_bus
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_a_VAL_bus_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_a_VAL_bits DT_N_S_test_S_temperature_sensor_P_clocks_IDX_0_VAL_bits
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_a_VAL_bits_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_1_PH DT_N_S_test_S_test_fixed_clock
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_1_NAME "clk-fixed"
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_fixed_PH DT_N_S_test_S_test_fixed_clock
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_fixed_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_PH DT_N_S_test_S_test_clock
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_VAL_bus 8
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_VAL_bus_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_VAL_bits 2
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_VAL_bits_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_NAME "clk-b"
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_b_PH DT_N_S_test_S_test_clock
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_b_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_b_VAL_bus DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_VAL_bus
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_b_VAL_bus_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_b_VAL_bits DT_N_S_test_S_temperature_sensor_P_clocks_IDX_2_VAL_bits
#define DT_N_S_test_S_temperature_sensor_P_clocks_NAME_clk_b_VAL_bits_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, clocks, 0) \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 1) \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 2)
#define DT_N_S_test_S_temperature_sensor_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, clocks, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 2)
#define DT_N_S_test_S_temperature_sensor_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, clocks, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, clocks, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clocks, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_clocks_LEN 3
#define DT_N_S_test_S_temperature_sensor_P_clocks_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_compatible {"vnd,adc-temp-sensor"}
#define DT_N_S_test_S_temperature_sensor_P_compatible_IDX_0 "vnd,adc-temp-sensor"
#define DT_N_S_test_S_temperature_sensor_P_compatible_IDX_0_STRING_UNQUOTED vnd,adc-temp-sensor
#define DT_N_S_test_S_temperature_sensor_P_compatible_IDX_0_STRING_TOKEN vnd_adc_temp_sensor
#define DT_N_S_test_S_temperature_sensor_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_ADC_TEMP_SENSOR
#define DT_N_S_test_S_temperature_sensor_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, compatible, 0)
#define DT_N_S_test_S_temperature_sensor_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, compatible, 0)
#define DT_N_S_test_S_temperature_sensor_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_compatible_LEN 1
#define DT_N_S_test_S_temperature_sensor_P_compatible_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clock_names {"clk-a", "clk-fixed", "clk-b"}
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_0 "clk-a"
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_0_STRING_UNQUOTED clk-a
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_0_STRING_TOKEN clk_a
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_0_STRING_UPPER_TOKEN CLK_A
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_1 "clk-fixed"
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_1_STRING_UNQUOTED clk-fixed
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_1_STRING_TOKEN clk_fixed
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_1_STRING_UPPER_TOKEN CLK_FIXED
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_2 "clk-b"
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_2_STRING_UNQUOTED clk-b
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_2_STRING_TOKEN clk_b
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_2_STRING_UPPER_TOKEN CLK_B
#define DT_N_S_test_S_temperature_sensor_P_clock_names_IDX_2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_clock_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, clock_names, 0) \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 1) \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 2)
#define DT_N_S_test_S_temperature_sensor_P_clock_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, clock_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 2)
#define DT_N_S_test_S_temperature_sensor_P_clock_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, clock_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_clock_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, clock_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, clock_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_clock_names_LEN 3
#define DT_N_S_test_S_temperature_sensor_P_clock_names_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_PH DT_N_S_test_S_dma_44443333
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_VAL_channel 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_VAL_slot 2
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_VAL_slot_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_NAME "tx"
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_tx_PH DT_N_S_test_S_dma_44443333
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_tx_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_tx_VAL_channel DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_VAL_channel
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_tx_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_tx_VAL_slot DT_N_S_test_S_temperature_sensor_P_dmas_IDX_0_VAL_slot
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_tx_VAL_slot_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_PH DT_N_S_test_S_dma_44442222
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_VAL_channel 3
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_VAL_slot 4
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_VAL_slot_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_NAME "rx"
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_rx_PH DT_N_S_test_S_dma_44442222
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_rx_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_rx_VAL_channel DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_VAL_channel
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_rx_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_rx_VAL_slot DT_N_S_test_S_temperature_sensor_P_dmas_IDX_1_VAL_slot
#define DT_N_S_test_S_temperature_sensor_P_dmas_NAME_rx_VAL_slot_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dmas_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, dmas, 0) \
	fn(DT_N_S_test_S_temperature_sensor, dmas, 1)
#define DT_N_S_test_S_temperature_sensor_P_dmas_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, dmas, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, dmas, 1)
#define DT_N_S_test_S_temperature_sensor_P_dmas_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, dmas, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, dmas, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_dmas_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, dmas, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, dmas, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_dmas_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_dmas_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dma_names {"tx", "rx"}
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_0 "tx"
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_0_STRING_UNQUOTED tx
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_0_STRING_TOKEN tx
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_0_STRING_UPPER_TOKEN TX
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_1 "rx"
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_1_STRING_UNQUOTED rx
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_1_STRING_TOKEN rx
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_1_STRING_UPPER_TOKEN RX
#define DT_N_S_test_S_temperature_sensor_P_dma_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_dma_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, dma_names, 0) \
	fn(DT_N_S_test_S_temperature_sensor, dma_names, 1)
#define DT_N_S_test_S_temperature_sensor_P_dma_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, dma_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, dma_names, 1)
#define DT_N_S_test_S_temperature_sensor_P_dma_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, dma_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, dma_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_dma_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, dma_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, dma_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_dma_names_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_dma_names_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_0_PH DT_N_S_test_S_mbox
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_0_VAL_channel 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_0_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_0_NAME "tx"
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_tx_PH DT_N_S_test_S_mbox
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_tx_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_tx_VAL_channel DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_0_VAL_channel
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_tx_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_1_PH DT_N_S_test_S_mbox
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_1_VAL_channel 2
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_1_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_1_NAME "rx"
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_rx_PH DT_N_S_test_S_mbox
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_rx_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_rx_VAL_channel DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_1_VAL_channel
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_rx_VAL_channel_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_2_PH DT_N_S_test_S_mbox_zero_cell
#define DT_N_S_test_S_temperature_sensor_P_mboxes_IDX_2_NAME "zero"
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_zero_PH DT_N_S_test_S_mbox_zero_cell
#define DT_N_S_test_S_temperature_sensor_P_mboxes_NAME_zero_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mboxes_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, mboxes, 0) \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 1) \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 2)
#define DT_N_S_test_S_temperature_sensor_P_mboxes_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, mboxes, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 2)
#define DT_N_S_test_S_temperature_sensor_P_mboxes_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, mboxes, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_mboxes_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, mboxes, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mboxes, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_mboxes_LEN 3
#define DT_N_S_test_S_temperature_sensor_P_mboxes_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mbox_names {"tx", "rx", "zero"}
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_0 "tx"
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_0_STRING_UNQUOTED tx
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_0_STRING_TOKEN tx
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_0_STRING_UPPER_TOKEN TX
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_1 "rx"
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_1_STRING_UNQUOTED rx
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_1_STRING_TOKEN rx
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_1_STRING_UPPER_TOKEN RX
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_2 "zero"
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_2_STRING_UNQUOTED zero
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_2_STRING_TOKEN zero
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_2_STRING_UPPER_TOKEN ZERO
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_IDX_2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, mbox_names, 0) \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 1) \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 2)
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, mbox_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 2)
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, mbox_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, mbox_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, mbox_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_LEN 3
#define DT_N_S_test_S_temperature_sensor_P_mbox_names_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_wakeup_source 0
#define DT_N_S_test_S_temperature_sensor_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_temperature_sensor_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_IDX_0 DT_N_S_test_S_pin_controller_S_pincfg_a
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_IDX_0_PH DT_N_S_test_S_pin_controller_S_pincfg_a
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_IDX_1 DT_N_S_test_S_pin_controller_S_pincfg_b
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_IDX_1_PH DT_N_S_test_S_pin_controller_S_pincfg_b
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 0) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 1)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 1)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_0, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_IDX_0 DT_N_S_test_S_pin_controller_S_pincfg_c
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_IDX_0_PH DT_N_S_test_S_pin_controller_S_pincfg_c
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_IDX_1 DT_N_S_test_S_pin_controller_S_pincfg_d
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_IDX_1_PH DT_N_S_test_S_pin_controller_S_pincfg_d
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 0) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 1)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 1)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_1, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_IDX_0 DT_N_S_test_S_pin_controller_S_pincfg_d
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_IDX_0_PH DT_N_S_test_S_pin_controller_S_pincfg_d
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, pinctrl_2, 0)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, pinctrl_2, 0)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_2, 0, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_2, 0, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_LEN 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names {"default", "sleep", "f.o.o2"}
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_1 "sleep"
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_1_STRING_UNQUOTED sleep
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_1_STRING_TOKEN sleep
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_1_STRING_UPPER_TOKEN SLEEP
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_2 "f.o.o2"
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_2_STRING_UNQUOTED f.o.o2
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_2_STRING_TOKEN f_o_o2
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_2_STRING_UPPER_TOKEN F_O_O2
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_IDX_2_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 0) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 1) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 2)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 2)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, pinctrl_names, 2, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_LEN 3
#define DT_N_S_test_S_temperature_sensor_P_pinctrl_names_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_0_PH DT_N_S_test_S_test_reset_abcd1234
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_0_VAL_id 10
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_0_NAME "reset-a"
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_a_PH DT_N_S_test_S_test_reset_abcd1234
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_a_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_a_VAL_id DT_N_S_test_S_temperature_sensor_P_resets_IDX_0_VAL_id
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_a_VAL_id_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_1_PH DT_N_S_test_S_test_reset_abcd1234
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_1_VAL_id 20
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_1_VAL_id_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_IDX_1_NAME "reset-b"
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_b_PH DT_N_S_test_S_test_reset_abcd1234
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_b_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_b_VAL_id DT_N_S_test_S_temperature_sensor_P_resets_IDX_1_VAL_id
#define DT_N_S_test_S_temperature_sensor_P_resets_NAME_reset_b_VAL_id_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, resets, 0) \
	fn(DT_N_S_test_S_temperature_sensor, resets, 1)
#define DT_N_S_test_S_temperature_sensor_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, resets, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, resets, 1)
#define DT_N_S_test_S_temperature_sensor_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, resets, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, resets, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, resets, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, resets, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_resets_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_resets_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_reset_names {"reset-a", "reset-b"}
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_0 "reset-a"
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_0_STRING_UNQUOTED reset-a
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_0_STRING_TOKEN reset_a
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_0_STRING_UPPER_TOKEN RESET_A
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_0_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_1 "reset-b"
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_1_STRING_UNQUOTED reset-b
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_1_STRING_TOKEN reset_b
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_1_STRING_UPPER_TOKEN RESET_B
#define DT_N_S_test_S_temperature_sensor_P_reset_names_IDX_1_EXISTS 1
#define DT_N_S_test_S_temperature_sensor_P_reset_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_temperature_sensor, reset_names, 0) \
	fn(DT_N_S_test_S_temperature_sensor, reset_names, 1)
#define DT_N_S_test_S_temperature_sensor_P_reset_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_temperature_sensor, reset_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, reset_names, 1)
#define DT_N_S_test_S_temperature_sensor_P_reset_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_temperature_sensor, reset_names, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_temperature_sensor, reset_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_reset_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_temperature_sensor, reset_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_temperature_sensor, reset_names, 1, __VA_ARGS__)
#define DT_N_S_test_S_temperature_sensor_P_reset_names_LEN 2
#define DT_N_S_test_S_temperature_sensor_P_reset_names_EXISTS 1

/*
 * Devicetree node: /test/vendor
 *
 * Node identifier: DT_N_S_test_S_vendor
 */

/* Node's full path: */
#define DT_N_S_test_S_vendor_PATH "/test/vendor"

/* Node's name with unit-address: */
#define DT_N_S_test_S_vendor_FULL_NAME "vendor"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_vendor_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_vendor_CHILD_IDX 33

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_vendor_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_vendor_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_vendor_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_vendor_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_vendor_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_vendor_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_vendor_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_vendor_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_vendor_ORD 96
#define DT_N_S_test_S_vendor_ORD_STR_SORTABLE 00096

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_vendor_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_vendor_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_vendor_EXISTS 1
#define DT_N_INST_0_vnd_model1     DT_N_S_test_S_vendor
#define DT_N_INST_0_gpio           DT_N_S_test_S_vendor
#define DT_N_INST_0_zephyr_model2  DT_N_S_test_S_vendor
#define DT_N_NODELABEL_test_vendor DT_N_S_test_S_vendor

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_vendor_REG_NUM 0
#define DT_N_S_test_S_vendor_RANGES_NUM 0
#define DT_N_S_test_S_vendor_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_vendor_IRQ_NUM 0
#define DT_N_S_test_S_vendor_IRQ_LEVEL 0
#define DT_N_S_test_S_vendor_COMPAT_MATCHES_vnd_model1 1
#define DT_N_S_test_S_vendor_COMPAT_MATCHES_gpio 1
#define DT_N_S_test_S_vendor_COMPAT_MATCHES_zephyr_model2 1
#define DT_N_S_test_S_vendor_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_vendor_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_vendor_P_compatible {"vnd,model1", "gpio", "zephyr,model2"}
#define DT_N_S_test_S_vendor_P_compatible_IDX_0 "vnd,model1"
#define DT_N_S_test_S_vendor_P_compatible_IDX_0_STRING_UNQUOTED vnd,model1
#define DT_N_S_test_S_vendor_P_compatible_IDX_0_STRING_TOKEN vnd_model1
#define DT_N_S_test_S_vendor_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_MODEL1
#define DT_N_S_test_S_vendor_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_vendor_P_compatible_IDX_1 "gpio"
#define DT_N_S_test_S_vendor_P_compatible_IDX_1_STRING_UNQUOTED gpio
#define DT_N_S_test_S_vendor_P_compatible_IDX_1_STRING_TOKEN gpio
#define DT_N_S_test_S_vendor_P_compatible_IDX_1_STRING_UPPER_TOKEN GPIO
#define DT_N_S_test_S_vendor_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_test_S_vendor_P_compatible_IDX_2 "zephyr,model2"
#define DT_N_S_test_S_vendor_P_compatible_IDX_2_STRING_UNQUOTED zephyr,model2
#define DT_N_S_test_S_vendor_P_compatible_IDX_2_STRING_TOKEN zephyr_model2
#define DT_N_S_test_S_vendor_P_compatible_IDX_2_STRING_UPPER_TOKEN ZEPHYR_MODEL2
#define DT_N_S_test_S_vendor_P_compatible_IDX_2_EXISTS 1
#define DT_N_S_test_S_vendor_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_vendor, compatible, 0) \
	fn(DT_N_S_test_S_vendor, compatible, 1) \
	fn(DT_N_S_test_S_vendor, compatible, 2)
#define DT_N_S_test_S_vendor_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_vendor, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_vendor, compatible, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_vendor, compatible, 2)
#define DT_N_S_test_S_vendor_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_vendor, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_vendor, compatible, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_vendor, compatible, 2, __VA_ARGS__)
#define DT_N_S_test_S_vendor_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_vendor, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_vendor, compatible, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_vendor, compatible, 2, __VA_ARGS__)
#define DT_N_S_test_S_vendor_P_compatible_LEN 3
#define DT_N_S_test_S_vendor_P_compatible_EXISTS 1
#define DT_N_S_test_S_vendor_P_status "okay"
#define DT_N_S_test_S_vendor_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_vendor_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_vendor_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_vendor_P_status_IDX_0 "okay"
#define DT_N_S_test_S_vendor_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_vendor_P_status_ENUM_IDX 1
#define DT_N_S_test_S_vendor_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_vendor_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_vendor_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_vendor_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_vendor, status, 0)
#define DT_N_S_test_S_vendor_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_vendor, status, 0)
#define DT_N_S_test_S_vendor_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_vendor, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_vendor_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_vendor, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_vendor_P_status_LEN 1
#define DT_N_S_test_S_vendor_P_status_EXISTS 1

/*
 * Devicetree node: /test/can@55554444
 *
 * Node identifier: DT_N_S_test_S_can_55554444
 *
 * Binding (compatible = vnd,can-controller):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,can-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_can_55554444_PATH "/test/can@55554444"

/* Node's name with unit-address: */
#define DT_N_S_test_S_can_55554444_FULL_NAME "can@55554444"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_can_55554444_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_can_55554444_CHILD_IDX 46

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD(fn) fn(DT_N_S_test_S_can_55554444_S_can_transceiver)
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_can_55554444_S_can_transceiver)
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_can_55554444_S_can_transceiver, __VA_ARGS__)
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_55554444_S_can_transceiver, __VA_ARGS__)
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_can_55554444_S_can_transceiver)
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_can_55554444_S_can_transceiver)
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_can_55554444_S_can_transceiver, __VA_ARGS__)
#define DT_N_S_test_S_can_55554444_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_55554444_S_can_transceiver, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_can_55554444_ORD 97
#define DT_N_S_test_S_can_55554444_ORD_STR_SORTABLE 00097

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_can_55554444_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_can_55554444_SUPPORTS_ORDS \
	98, /* /test/can@55554444/can-transceiver */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_can_55554444_EXISTS 1
#define DT_N_INST_1_vnd_can_controller DT_N_S_test_S_can_55554444
#define DT_N_NODELABEL_test_can1       DT_N_S_test_S_can_55554444

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_can_55554444_REG_NUM 1
#define DT_N_S_test_S_can_55554444_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55554444_REG_IDX_0_VAL_ADDRESS 1431651396 /* 0x55554444 */
#define DT_N_S_test_S_can_55554444_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_can_55554444_RANGES_NUM 0
#define DT_N_S_test_S_can_55554444_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_can_55554444_IRQ_NUM 0
#define DT_N_S_test_S_can_55554444_IRQ_LEVEL 0
#define DT_N_S_test_S_can_55554444_COMPAT_MATCHES_vnd_can_controller 1
#define DT_N_S_test_S_can_55554444_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_can_55554444_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_can_55554444_P_bus_speed 125000
#define DT_N_S_test_S_can_55554444_P_bus_speed_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_sample_point 875
#define DT_N_S_test_S_can_55554444_P_sample_point_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_sjw 1
#define DT_N_S_test_S_can_55554444_P_sjw_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_status "okay"
#define DT_N_S_test_S_can_55554444_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_can_55554444_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_can_55554444_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_can_55554444_P_status_IDX_0 "okay"
#define DT_N_S_test_S_can_55554444_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_status_ENUM_IDX 1
#define DT_N_S_test_S_can_55554444_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_can_55554444_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_can_55554444_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_can_55554444, status, 0)
#define DT_N_S_test_S_can_55554444_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_can_55554444, status, 0)
#define DT_N_S_test_S_can_55554444_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_can_55554444, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55554444_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_55554444, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55554444_P_status_LEN 1
#define DT_N_S_test_S_can_55554444_P_status_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_compatible {"vnd,can-controller"}
#define DT_N_S_test_S_can_55554444_P_compatible_IDX_0 "vnd,can-controller"
#define DT_N_S_test_S_can_55554444_P_compatible_IDX_0_STRING_UNQUOTED vnd,can-controller
#define DT_N_S_test_S_can_55554444_P_compatible_IDX_0_STRING_TOKEN vnd_can_controller
#define DT_N_S_test_S_can_55554444_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_CAN_CONTROLLER
#define DT_N_S_test_S_can_55554444_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_can_55554444, compatible, 0)
#define DT_N_S_test_S_can_55554444_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_can_55554444, compatible, 0)
#define DT_N_S_test_S_can_55554444_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_can_55554444, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55554444_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_can_55554444, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_can_55554444_P_compatible_LEN 1
#define DT_N_S_test_S_can_55554444_P_compatible_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_reg {1431651396 /* 0x55554444 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_can_55554444_P_reg_IDX_0 1431651396
#define DT_N_S_test_S_can_55554444_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_reg_IDX_1 4096
#define DT_N_S_test_S_can_55554444_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_reg_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_wakeup_source 0
#define DT_N_S_test_S_can_55554444_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_can_55554444_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_can_55554444_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/can@55554444/can-transceiver
 *
 * Node identifier: DT_N_S_test_S_can_55554444_S_can_transceiver
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_PATH "/test/can@55554444/can-transceiver"

/* Node's name with unit-address: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FULL_NAME "can-transceiver"

/* Node parent (/test/can@55554444) identifier: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_PARENT DT_N_S_test_S_can_55554444

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_ORD 98
#define DT_N_S_test_S_can_55554444_S_can_transceiver_ORD_STR_SORTABLE 00098

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_REQUIRES_ORDS \
	97, /* /test/can@55554444 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_REG_NUM 0
#define DT_N_S_test_S_can_55554444_S_can_transceiver_RANGES_NUM 0
#define DT_N_S_test_S_can_55554444_S_can_transceiver_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_can_55554444_S_can_transceiver_IRQ_NUM 0
#define DT_N_S_test_S_can_55554444_S_can_transceiver_IRQ_LEVEL 0
#define DT_N_S_test_S_can_55554444_S_can_transceiver_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_can_55554444_S_can_transceiver_P_max_bitrate 2000000
#define DT_N_S_test_S_can_55554444_S_can_transceiver_P_max_bitrate_EXISTS 1

/*
 * Devicetree node: /test/gpio@abcd1234/test_gpio_hog_3
 *
 * Node identifier: DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_PATH "/test/gpio@abcd1234/test_gpio_hog_3"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FULL_NAME "test_gpio_hog_3"

/* Node parent (/test/gpio@abcd1234) identifier: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_PARENT DT_N_S_test_S_gpio_abcd1234

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_ORD 99
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_ORD_STR_SORTABLE 00099

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_REQUIRES_ORDS \
	62, /* /test/gpio@abcd1234 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_REG_NUM 0
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_RANGES_NUM 0
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_IRQ_NUM 0
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_IRQ_LEVEL 0
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_PINCTRL_NUM 0

/* GPIO hog properties: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_NUM 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_IDX_0_PH DT_N_S_test_S_gpio_abcd1234
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_IDX_0_VAL_pin 4
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_IDX_0_VAL_flags 48
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_GPIO_HOGS_IDX_0_VAL_flags_EXISTS 1

/* Generic property macros: */
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpio_hog 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpio_hog_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios {4 /* 0x4 */, 48 /* 0x30 */}
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_IDX_0 4
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_IDX_1 48
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 0) \
	fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 1)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 1)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 1, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, gpios, 1, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_LEN 2
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_gpios_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_input 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_input_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_output_low 0
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_output_low_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_output_high 0
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_output_high_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name "TEST_GPIO_HOG_3"
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_STRING_UNQUOTED TEST_GPIO_HOG_3
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_STRING_TOKEN TEST_GPIO_HOG_3
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_STRING_UPPER_TOKEN TEST_GPIO_HOG_3
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_IDX_0 "TEST_GPIO_HOG_3"
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, line_name, 0)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, line_name, 0)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, line_name, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, line_name, 0, __VA_ARGS__)
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_LEN 1
#define DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3_P_line_name_EXISTS 1

/*
 * Devicetree node: /test/gpio@deadbeef/test_gpio_hog_1
 *
 * Node identifier: DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_PATH "/test/gpio@deadbeef/test_gpio_hog_1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FULL_NAME "test_gpio_hog_1"

/* Node parent (/test/gpio@deadbeef) identifier: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_PARENT DT_N_S_test_S_gpio_deadbeef

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_ORD 100
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_ORD_STR_SORTABLE 00100

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_REQUIRES_ORDS \
	24, /* /test/gpio@deadbeef */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_REG_NUM 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_RANGES_NUM 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_IRQ_NUM 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_IRQ_LEVEL 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_PINCTRL_NUM 0

/* GPIO hog properties: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_NUM 2
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_0_VAL_pin 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_0_VAL_flags 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_1_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_1_VAL_pin 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_1_VAL_pin_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_1_VAL_flags 16
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_GPIO_HOGS_IDX_1_VAL_flags_EXISTS 1

/* Generic property macros: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpio_hog 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpio_hog_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios {0 /* 0x0 */, 0 /* 0x0 */, 1 /* 0x1 */, 16 /* 0x10 */}
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_0 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_1 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_2 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_2_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_3 16
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_IDX_3_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 0) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 1) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 2) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 3)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 3)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 1, __VA_ARGS__) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 2, __VA_ARGS__) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 3, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, gpios, 3, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_LEN 4
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_gpios_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_input 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_input_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_output_low 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_output_low_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_output_high 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1_P_output_high_EXISTS 1

/*
 * Devicetree node: /test/gpio@deadbeef/test_gpio_hog_2
 *
 * Node identifier: DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_PATH "/test/gpio@deadbeef/test_gpio_hog_2"

/* Node's name with unit-address: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FULL_NAME "test_gpio_hog_2"

/* Node parent (/test/gpio@deadbeef) identifier: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_PARENT DT_N_S_test_S_gpio_deadbeef

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_ORD 101
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_ORD_STR_SORTABLE 00101

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_REQUIRES_ORDS \
	24, /* /test/gpio@deadbeef */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_REG_NUM 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_RANGES_NUM 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_IRQ_NUM 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_IRQ_LEVEL 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_PINCTRL_NUM 0

/* GPIO hog properties: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_NUM 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_IDX_0_PH DT_N_S_test_S_gpio_deadbeef
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_IDX_0_VAL_pin 3
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_IDX_0_VAL_flags 32
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_GPIO_HOGS_IDX_0_VAL_flags_EXISTS 1

/* Generic property macros: */
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpio_hog 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpio_hog_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios {3 /* 0x3 */, 32 /* 0x20 */}
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_IDX_0 3
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_IDX_1 32
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_IDX_1_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 0) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 1)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 1)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 1, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, gpios, 1, __VA_ARGS__)
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_LEN 2
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_gpios_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_input 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_input_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_output_low 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_output_low_EXISTS 1
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_output_high 0
#define DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2_P_output_high_EXISTS 1

/*
 * Devicetree node: /test/i2c
 *
 * Node identifier: DT_N_S_test_S_i2c
 *
 * Binding (compatible = vnd,i2c):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_PATH "/test/i2c"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_FULL_NAME "i2c"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_i2c_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_CHILD_IDX 22

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_FOREACH_CHILD(fn) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12)
#define DT_N_S_test_S_i2c_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12)
#define DT_N_S_test_S_i2c_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, __VA_ARGS__)
#define DT_N_S_test_S_i2c_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, __VA_ARGS__)
#define DT_N_S_test_S_i2c_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12)
#define DT_N_S_test_S_i2c_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12)
#define DT_N_S_test_S_i2c_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, __VA_ARGS__)
#define DT_N_S_test_S_i2c_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_ORD 102
#define DT_N_S_test_S_i2c_ORD_STR_SORTABLE 00102

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_SUPPORTS_ORDS \
	103, /* /test/i2c/test-i2c-dev@12 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_EXISTS 1
#define DT_N_INST_1_vnd_i2c            DT_N_S_test_S_i2c
#define DT_N_NODELABEL_test_i2c_no_reg DT_N_S_test_S_i2c

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_REG_NUM 0
#define DT_N_S_test_S_i2c_RANGES_NUM 0
#define DT_N_S_test_S_i2c_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_IRQ_NUM 0
#define DT_N_S_test_S_i2c_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_COMPAT_MATCHES_vnd_i2c 1
#define DT_N_S_test_S_i2c_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_P_clock_frequency 100000
#define DT_N_S_test_S_i2c_P_clock_frequency_EXISTS 1
#define DT_N_S_test_S_i2c_P_status "okay"
#define DT_N_S_test_S_i2c_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_i2c_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_i2c_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i2c_P_status_IDX_0 "okay"
#define DT_N_S_test_S_i2c_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_P_status_ENUM_IDX 1
#define DT_N_S_test_S_i2c_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_i2c_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_i2c_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i2c_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c, status, 0)
#define DT_N_S_test_S_i2c_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c, status, 0)
#define DT_N_S_test_S_i2c_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_P_status_LEN 1
#define DT_N_S_test_S_i2c_P_status_EXISTS 1
#define DT_N_S_test_S_i2c_P_compatible {"vnd,i2c"}
#define DT_N_S_test_S_i2c_P_compatible_IDX_0 "vnd,i2c"
#define DT_N_S_test_S_i2c_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c
#define DT_N_S_test_S_i2c_P_compatible_IDX_0_STRING_TOKEN vnd_i2c
#define DT_N_S_test_S_i2c_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C
#define DT_N_S_test_S_i2c_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c, compatible, 0)
#define DT_N_S_test_S_i2c_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c, compatible, 0)
#define DT_N_S_test_S_i2c_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_P_wakeup_source 0
#define DT_N_S_test_S_i2c_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c/test-i2c-dev@12
 *
 * Node identifier: DT_N_S_test_S_i2c_S_test_i2c_dev_12
 *
 * Binding (compatible = vnd,i2c-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_PATH "/test/i2c/test-i2c-dev@12"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FULL_NAME "test-i2c-dev@12"

/* Node parent (/test/i2c) identifier: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_PARENT DT_N_S_test_S_i2c

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_ORD 103
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_ORD_STR_SORTABLE 00103

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_REQUIRES_ORDS \
	102, /* /test/i2c */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_EXISTS 1
#define DT_N_INST_1_vnd_i2c_device DT_N_S_test_S_i2c_S_test_i2c_dev_12

/* Bus info (controller: '/test/i2c', type: '['i2c']') */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_BUS_i2c 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_BUS DT_N_S_test_S_i2c

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_REG_NUM 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_REG_IDX_0_VAL_ADDRESS 18 /* 0x12 */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_RANGES_NUM 0
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_IRQ_NUM 0
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_COMPAT_MATCHES_vnd_i2c_device 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_reg {18 /* 0x12 */}
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_reg_IDX_0 18
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible {"vnd,i2c-device"}
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_IDX_0 "vnd,i2c-device"
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c-device
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_IDX_0_STRING_TOKEN vnd_i2c_device
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C_DEVICE
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, compatible, 0)
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, compatible, 0)
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_wakeup_source 0
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_S_test_i2c_dev_12_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222/gpio@11
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222_S_gpio_11
 *
 * Binding (compatible = vnd,gpio-expander):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-expander-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_PATH "/test/i2c@11112222/gpio@11"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FULL_NAME "gpio@11"

/* Node parent (/test/i2c@11112222) identifier: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_PARENT DT_N_S_test_S_i2c_11112222

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_ORD 104
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_ORD_STR_SORTABLE 00104

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_REQUIRES_ORDS \
	63, /* /test/i2c@11112222 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_EXISTS 1
#define DT_N_INST_0_vnd_gpio_expander DT_N_S_test_S_i2c_11112222_S_gpio_11

/* Bus info (controller: '/test/i2c@11112222', type: '['i2c']') */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_BUS_i2c 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_BUS DT_N_S_test_S_i2c_11112222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_REG_NUM 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_REG_IDX_0_VAL_ADDRESS 17 /* 0x11 */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_IRQ_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_COMPAT_MATCHES_vnd_gpio_expander 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_reg {17 /* 0x11 */}
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_reg_IDX_0 17
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_gpio_controller 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_ngpios 32
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_ngpios_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible {"vnd,gpio-expander"}
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_IDX_0 "vnd,gpio-expander"
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-expander
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_expander
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_EXPANDER
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_S_gpio_11_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222/test-i2c-dev@10
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10
 *
 * Binding (compatible = vnd,i2c-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_PATH "/test/i2c@11112222/test-i2c-dev@10"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FULL_NAME "test-i2c-dev@10"

/* Node parent (/test/i2c@11112222) identifier: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_PARENT DT_N_S_test_S_i2c_11112222

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_ORD 105
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_ORD_STR_SORTABLE 00105

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_REQUIRES_ORDS \
	63, /* /test/i2c@11112222 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_EXISTS 1
#define DT_N_INST_0_vnd_i2c_device DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10

/* Bus info (controller: '/test/i2c@11112222', type: '['i2c']') */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_BUS_i2c 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_BUS DT_N_S_test_S_i2c_11112222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_REG_NUM 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_REG_IDX_0_VAL_ADDRESS 16 /* 0x10 */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_IRQ_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_COMPAT_MATCHES_vnd_i2c_device 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label "TEST_I2C_DEV_10"
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_STRING_UNQUOTED TEST_I2C_DEV_10
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_STRING_TOKEN TEST_I2C_DEV_10
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_STRING_UPPER_TOKEN TEST_I2C_DEV_10
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_IDX_0 "TEST_I2C_DEV_10"
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, label, 0)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, label, 0)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_label_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_reg {16 /* 0x10 */}
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_reg_IDX_0 16
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible {"vnd,i2c-device"}
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_IDX_0 "vnd,i2c-device"
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c-device
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_IDX_0_STRING_TOKEN vnd_i2c_device
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C_DEVICE
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222/i2c-mux@12
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222_S_i2c_mux_12
 *
 * Binding (compatible = vnd,i2c-mux):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c-mux.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_PATH "/test/i2c@11112222/i2c-mux@12"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FULL_NAME "i2c-mux@12"

/* Node parent (/test/i2c@11112222) identifier: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_PARENT DT_N_S_test_S_i2c_11112222

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_ORD 106
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_ORD_STR_SORTABLE 00106

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_REQUIRES_ORDS \
	63, /* /test/i2c@11112222 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_SUPPORTS_ORDS \
	107, /* /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1 */ \
	109, /* /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_EXISTS 1
#define DT_N_INST_0_vnd_i2c_mux     DT_N_S_test_S_i2c_11112222_S_i2c_mux_12
#define DT_N_NODELABEL_test_i2c_mux DT_N_S_test_S_i2c_11112222_S_i2c_mux_12

/* Bus info (controller: '/test/i2c@11112222', type: '['i2c']') */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_BUS_i2c 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_BUS DT_N_S_test_S_i2c_11112222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_REG_NUM 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_REG_IDX_0_VAL_ADDRESS 18 /* 0x12 */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_IRQ_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_COMPAT_MATCHES_vnd_i2c_mux 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_reg {18 /* 0x12 */}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_reg_IDX_0 18
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible {"vnd,i2c-mux"}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_IDX_0 "vnd,i2c-mux"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c-mux
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_IDX_0_STRING_TOKEN vnd_i2c_mux
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C_MUX
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1
 *
 * Binding (compatible = vnd,i2c-mux-controller):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c-mux.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_PATH "/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FULL_NAME "i2c-mux-ctlr-1"

/* Node parent (/test/i2c@11112222/i2c-mux@12) identifier: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_PARENT DT_N_S_test_S_i2c_11112222_S_i2c_mux_12

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_ORD 107
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_ORD_STR_SORTABLE 00107

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_REQUIRES_ORDS \
	106, /* /test/i2c@11112222/i2c-mux@12 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_SUPPORTS_ORDS \
	108, /* /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1/muxed-i2c-dev@10 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_EXISTS 1
#define DT_N_INST_0_vnd_i2c_mux_controller DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1

/* Bus info (controller: '/test/i2c@11112222', type: '['i2c']') */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_BUS_i2c 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_BUS DT_N_S_test_S_i2c_11112222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_REG_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_IRQ_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_COMPAT_MATCHES_vnd_i2c_mux_controller 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible {"vnd,i2c-mux-controller"}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_IDX_0 "vnd,i2c-mux-controller"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c-mux-controller
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_IDX_0_STRING_TOKEN vnd_i2c_mux_controller
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C_MUX_CONTROLLER
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1/muxed-i2c-dev@10
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10
 *
 * Binding (compatible = vnd,i2c-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_PATH "/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1/muxed-i2c-dev@10"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FULL_NAME "muxed-i2c-dev@10"

/* Node parent (/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1) identifier: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_PARENT DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_ORD 108
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_ORD_STR_SORTABLE 00108

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_REQUIRES_ORDS \
	107, /* /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_EXISTS 1
#define DT_N_INST_2_vnd_i2c_device          DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10
#define DT_N_NODELABEL_test_muxed_i2c_dev_1 DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10

/* Bus info (controller: '/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-1', type: '['i2c']') */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_BUS_i2c 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_BUS DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_REG_NUM 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_REG_IDX_0_VAL_ADDRESS 16 /* 0x10 */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_IRQ_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_COMPAT_MATCHES_vnd_i2c_device 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_reg {16 /* 0x10 */}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_reg_IDX_0 16
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status "disabled"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_STRING_UNQUOTED disabled
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_STRING_TOKEN disabled
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_IDX_0 "disabled"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_ENUM_IDX 2
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_ENUM_TOKEN disabled
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, status, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, status, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_status_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible {"vnd,i2c-device"}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_IDX_0 "vnd,i2c-device"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c-device
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_IDX_0_STRING_TOKEN vnd_i2c_device
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C_DEVICE
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2
 *
 * Binding (compatible = vnd,i2c-mux-controller):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c-mux.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_PATH "/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FULL_NAME "i2c-mux-ctlr-2"

/* Node parent (/test/i2c@11112222/i2c-mux@12) identifier: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_PARENT DT_N_S_test_S_i2c_11112222_S_i2c_mux_12

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_ORD 109
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_ORD_STR_SORTABLE 00109

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_REQUIRES_ORDS \
	106, /* /test/i2c@11112222/i2c-mux@12 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_SUPPORTS_ORDS \
	110, /* /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2/muxed-i2c-dev@10 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_EXISTS 1
#define DT_N_INST_1_vnd_i2c_mux_controller DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2

/* Bus info (controller: '/test/i2c@11112222', type: '['i2c']') */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_BUS_i2c 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_BUS DT_N_S_test_S_i2c_11112222

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_REG_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_IRQ_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_COMPAT_MATCHES_vnd_i2c_mux_controller 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible {"vnd,i2c-mux-controller"}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_IDX_0 "vnd,i2c-mux-controller"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c-mux-controller
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_IDX_0_STRING_TOKEN vnd_i2c_mux_controller
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C_MUX_CONTROLLER
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2/muxed-i2c-dev@10
 *
 * Node identifier: DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10
 *
 * Binding (compatible = vnd,i2c-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i2c-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_PATH "/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2/muxed-i2c-dev@10"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FULL_NAME "muxed-i2c-dev@10"

/* Node parent (/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2) identifier: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_PARENT DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_ORD 110
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_ORD_STR_SORTABLE 00110

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_REQUIRES_ORDS \
	109, /* /test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_EXISTS 1
#define DT_N_INST_3_vnd_i2c_device          DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10
#define DT_N_NODELABEL_test_muxed_i2c_dev_2 DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10

/* Bus info (controller: '/test/i2c@11112222/i2c-mux@12/i2c-mux-ctlr-2', type: '['i2c']') */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_BUS_i2c 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_BUS DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_REG_NUM 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_REG_IDX_0_VAL_ADDRESS 16 /* 0x10 */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_RANGES_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_IRQ_NUM 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_IRQ_LEVEL 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_COMPAT_MATCHES_vnd_i2c_device 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_reg {16 /* 0x10 */}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_reg_IDX_0 16
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_reg_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status "disabled"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_STRING_UNQUOTED disabled
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_STRING_TOKEN disabled
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_IDX_0 "disabled"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_ENUM_IDX 2
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_ENUM_TOKEN disabled
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, status, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, status, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_status_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible {"vnd,i2c-device"}
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_IDX_0 "vnd,i2c-device"
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_IDX_0_STRING_UNQUOTED vnd,i2c-device
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_IDX_0_STRING_TOKEN vnd_i2c_device
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I2C_DEVICE
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, compatible, 0)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_LEN 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_compatible_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_wakeup_source 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i3c@88889999
 *
 * Node identifier: DT_N_S_test_S_i3c_88889999
 *
 * Binding (compatible = vnd,i3c):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i3c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i3c_88889999_PATH "/test/i3c@88889999"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i3c_88889999_FULL_NAME "i3c@88889999"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_i3c_88889999_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i3c_88889999_CHILD_IDX 23

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050)
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050)
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050)
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050)
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i3c_88889999_ORD 111
#define DT_N_S_test_S_i3c_88889999_ORD_STR_SORTABLE 00111

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i3c_88889999_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i3c_88889999_SUPPORTS_ORDS \
	112, /* /test/i3c@88889999/test-i3c-dev@420000ABCD12345678 */ \
	113, /* /test/i3c@88889999/test-i3c-i2c-dev@380000000000000050 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i3c_88889999_EXISTS 1
#define DT_N_INST_0_vnd_i3c     DT_N_S_test_S_i3c_88889999
#define DT_N_NODELABEL_test_i3c DT_N_S_test_S_i3c_88889999

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i3c_88889999_REG_NUM 1
#define DT_N_S_test_S_i3c_88889999_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_REG_IDX_0_VAL_ADDRESS 2290653593 /* 0x88889999 */
#define DT_N_S_test_S_i3c_88889999_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_i3c_88889999_RANGES_NUM 0
#define DT_N_S_test_S_i3c_88889999_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i3c_88889999_IRQ_NUM 0
#define DT_N_S_test_S_i3c_88889999_IRQ_LEVEL 0
#define DT_N_S_test_S_i3c_88889999_COMPAT_MATCHES_vnd_i3c 1
#define DT_N_S_test_S_i3c_88889999_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i3c_88889999_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i3c_88889999_P_label "TEST_I3C_CTLR"
#define DT_N_S_test_S_i3c_88889999_P_label_STRING_UNQUOTED TEST_I3C_CTLR
#define DT_N_S_test_S_i3c_88889999_P_label_STRING_TOKEN TEST_I3C_CTLR
#define DT_N_S_test_S_i3c_88889999_P_label_STRING_UPPER_TOKEN TEST_I3C_CTLR
#define DT_N_S_test_S_i3c_88889999_P_label_IDX_0 "TEST_I3C_CTLR"
#define DT_N_S_test_S_i3c_88889999_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i3c_88889999, label, 0)
#define DT_N_S_test_S_i3c_88889999_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999, label, 0)
#define DT_N_S_test_S_i3c_88889999_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_P_label_LEN 1
#define DT_N_S_test_S_i3c_88889999_P_label_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_status "okay"
#define DT_N_S_test_S_i3c_88889999_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_i3c_88889999_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_i3c_88889999_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i3c_88889999_P_status_IDX_0 "okay"
#define DT_N_S_test_S_i3c_88889999_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_status_ENUM_IDX 1
#define DT_N_S_test_S_i3c_88889999_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_i3c_88889999_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_i3c_88889999_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i3c_88889999, status, 0)
#define DT_N_S_test_S_i3c_88889999_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999, status, 0)
#define DT_N_S_test_S_i3c_88889999_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_P_status_LEN 1
#define DT_N_S_test_S_i3c_88889999_P_status_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_compatible {"vnd,i3c"}
#define DT_N_S_test_S_i3c_88889999_P_compatible_IDX_0 "vnd,i3c"
#define DT_N_S_test_S_i3c_88889999_P_compatible_IDX_0_STRING_UNQUOTED vnd,i3c
#define DT_N_S_test_S_i3c_88889999_P_compatible_IDX_0_STRING_TOKEN vnd_i3c
#define DT_N_S_test_S_i3c_88889999_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I3C
#define DT_N_S_test_S_i3c_88889999_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i3c_88889999, compatible, 0)
#define DT_N_S_test_S_i3c_88889999_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999, compatible, 0)
#define DT_N_S_test_S_i3c_88889999_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_P_compatible_LEN 1
#define DT_N_S_test_S_i3c_88889999_P_compatible_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_reg {2290653593 /* 0x88889999 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_i3c_88889999_P_reg_IDX_0 2290653593
#define DT_N_S_test_S_i3c_88889999_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_reg_IDX_1 4096
#define DT_N_S_test_S_i3c_88889999_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_reg_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_wakeup_source 0
#define DT_N_S_test_S_i3c_88889999_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i3c_88889999_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i3c@88889999/test-i3c-dev@420000ABCD12345678
 *
 * Node identifier: DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678
 *
 * Binding (compatible = vnd,i3c-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i3c-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_PATH "/test/i3c@88889999/test-i3c-dev@420000ABCD12345678"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FULL_NAME "test-i3c-dev@420000ABCD12345678"

/* Node parent (/test/i3c@88889999) identifier: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_PARENT DT_N_S_test_S_i3c_88889999

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_ORD 112
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_ORD_STR_SORTABLE 00112

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_REQUIRES_ORDS \
	111, /* /test/i3c@88889999 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_EXISTS 1
#define DT_N_INST_0_vnd_i3c_device DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678

/* Bus info (controller: '/test/i3c@88889999', type: '['i3c', 'i2c']') */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_BUS_i3c 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_BUS_i2c 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_BUS DT_N_S_test_S_i3c_88889999

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_REG_NUM 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_REG_IDX_0_VAL_ADDRESS 1217485297762092471928 /* 0x420000abcd12345678 */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_RANGES_NUM 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_IRQ_NUM 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_IRQ_LEVEL 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_COMPAT_MATCHES_vnd_i3c_device 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label "TEST_I3C_DEV_42"
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_STRING_UNQUOTED TEST_I3C_DEV_42
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_STRING_TOKEN TEST_I3C_DEV_42
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_STRING_UPPER_TOKEN TEST_I3C_DEV_42
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_IDX_0 "TEST_I3C_DEV_42"
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, label, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, label, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_LEN 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_label_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg {66 /* 0x42 */, 43981 /* 0xabcd */, 305419896 /* 0x12345678 */}
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg_IDX_0 66
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg_IDX_1 43981
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg_IDX_2 305419896
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg_IDX_2_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_reg_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible {"vnd,i3c-device"}
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_IDX_0 "vnd,i3c-device"
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_IDX_0_STRING_UNQUOTED vnd,i3c-device
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_IDX_0_STRING_TOKEN vnd_i3c_device
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I3C_DEVICE
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, compatible, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, compatible, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_LEN 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_compatible_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_wakeup_source 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/i3c@88889999/test-i3c-i2c-dev@380000000000000050
 *
 * Node identifier: DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050
 *
 * Binding (compatible = vnd,i3c-i2c-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,i3c-i2c-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_PATH "/test/i3c@88889999/test-i3c-i2c-dev@380000000000000050"

/* Node's name with unit-address: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FULL_NAME "test-i3c-i2c-dev@380000000000000050"

/* Node parent (/test/i3c@88889999) identifier: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_PARENT DT_N_S_test_S_i3c_88889999

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_ORD 113
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_ORD_STR_SORTABLE 00113

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_REQUIRES_ORDS \
	111, /* /test/i3c@88889999 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_EXISTS 1
#define DT_N_INST_0_vnd_i3c_i2c_device DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050

/* Bus info (controller: '/test/i3c@88889999', type: '['i3c', 'i2c']') */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_BUS_i3c 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_BUS_i2c 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_BUS DT_N_S_test_S_i3c_88889999

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_REG_NUM 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_REG_IDX_0_VAL_ADDRESS 1033017668127734890576 /* 0x380000000000000050 */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_RANGES_NUM 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_IRQ_NUM 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_IRQ_LEVEL 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_COMPAT_MATCHES_vnd_i3c_i2c_device 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label "TEST_I3C_I2C_DEV_38"
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_STRING_UNQUOTED TEST_I3C_I2C_DEV_38
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_STRING_TOKEN TEST_I3C_I2C_DEV_38
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_STRING_UPPER_TOKEN TEST_I3C_I2C_DEV_38
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_IDX_0 "TEST_I3C_I2C_DEV_38"
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, label, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, label, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_LEN 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_label_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg {56 /* 0x38 */, 0 /* 0x0 */, 80 /* 0x50 */}
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg_IDX_0 56
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg_IDX_1 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg_IDX_2 80
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg_IDX_2_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_reg_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible {"vnd,i3c-i2c-device"}
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_IDX_0 "vnd,i3c-i2c-device"
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_IDX_0_STRING_UNQUOTED vnd,i3c-i2c-device
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_IDX_0_STRING_TOKEN vnd_i3c_i2c_device
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_I3C_I2C_DEVICE
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, compatible, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, compatible, 0)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_LEN 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_compatible_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_wakeup_source 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/spi@33334444/gpio@2
 *
 * Node identifier: DT_N_S_test_S_spi_33334444_S_gpio_2
 *
 * Binding (compatible = vnd,gpio-expander):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,gpio-expander-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_PATH "/test/spi@33334444/gpio@2"

/* Node's name with unit-address: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FULL_NAME "gpio@2"

/* Node parent (/test/spi@33334444) identifier: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_PARENT DT_N_S_test_S_spi_33334444

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_ORD 114
#define DT_N_S_test_S_spi_33334444_S_gpio_2_ORD_STR_SORTABLE 00114

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_REQUIRES_ORDS \
	66, /* /test/spi@33334444 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_EXISTS 1
#define DT_N_INST_1_vnd_gpio_expander DT_N_S_test_S_spi_33334444_S_gpio_2

/* Bus info (controller: '/test/spi@33334444', type: '['spi']') */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_BUS_spi 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_BUS DT_N_S_test_S_spi_33334444

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_REG_NUM 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_REG_IDX_0_VAL_ADDRESS 2 /* 0x2 */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_RANGES_NUM 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_spi_33334444_S_gpio_2_IRQ_NUM 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_IRQ_LEVEL 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_COMPAT_MATCHES_vnd_gpio_expander 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_reg {2 /* 0x2 */}
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_reg_IDX_0 2
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_reg_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_gpio_controller 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_gpio_controller_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_ngpios 32
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_ngpios_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible {"vnd,gpio-expander"}
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_IDX_0 "vnd,gpio-expander"
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_IDX_0_STRING_UNQUOTED vnd,gpio-expander
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_IDX_0_STRING_TOKEN vnd_gpio_expander
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GPIO_EXPANDER
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, compatible, 0)
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, compatible, 0)
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_LEN 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_compatible_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_wakeup_source 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_max_frequency 1000000
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_max_frequency_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_duplex 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_duplex_ENUM_IDX 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_duplex_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_duplex_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_frame_format 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_frame_format_ENUM_IDX 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_frame_format_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_frame_format_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_cpol 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_cpol_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_cpha 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_cpha_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_hold_cs 0
#define DT_N_S_test_S_spi_33334444_S_gpio_2_P_spi_hold_cs_EXISTS 1

/*
 * Devicetree node: /test/spi@33334444/test-spi-dev@0
 *
 * Node identifier: DT_N_S_test_S_spi_33334444_S_test_spi_dev_0
 *
 * Binding (compatible = vnd,spi-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,spi-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_PATH "/test/spi@33334444/test-spi-dev@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FULL_NAME "test-spi-dev@0"

/* Node parent (/test/spi@33334444) identifier: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_PARENT DT_N_S_test_S_spi_33334444

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_ORD 115
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_ORD_STR_SORTABLE 00115

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_REQUIRES_ORDS \
	66, /* /test/spi@33334444 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_EXISTS 1
#define DT_N_INST_0_vnd_spi_device DT_N_S_test_S_spi_33334444_S_test_spi_dev_0

/* Bus info (controller: '/test/spi@33334444', type: '['spi']') */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_BUS_spi 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_BUS DT_N_S_test_S_spi_33334444

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_REG_NUM 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_RANGES_NUM 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_IRQ_NUM 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_IRQ_LEVEL 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_COMPAT_MATCHES_vnd_spi_device 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label "TEST_SPI_DEV_0"
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_STRING_UNQUOTED TEST_SPI_DEV_0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_STRING_TOKEN TEST_SPI_DEV_0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_STRING_UPPER_TOKEN TEST_SPI_DEV_0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_IDX_0 "TEST_SPI_DEV_0"
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, label, 0)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, label, 0)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_LEN 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_label_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_reg {0 /* 0x0 */}
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_reg_IDX_0 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_reg_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_max_frequency 2000000
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_max_frequency_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_duplex 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_duplex_ENUM_IDX 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_duplex_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_duplex_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_frame_format 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_frame_format_ENUM_IDX 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_frame_format_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_frame_format_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_cpol 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_cpol_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_cpha 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_cpha_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_hold_cs 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_spi_hold_cs_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible {"vnd,spi-device"}
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_IDX_0 "vnd,spi-device"
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,spi-device
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_IDX_0_STRING_TOKEN vnd_spi_device
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_SPI_DEVICE
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, compatible, 0)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, compatible, 0)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_LEN 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_wakeup_source 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/spi@33334444/test-spi-dev@1
 *
 * Node identifier: DT_N_S_test_S_spi_33334444_S_test_spi_dev_1
 *
 * Binding (compatible = vnd,spi-device):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,spi-device.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_PATH "/test/spi@33334444/test-spi-dev@1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FULL_NAME "test-spi-dev@1"

/* Node parent (/test/spi@33334444) identifier: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_PARENT DT_N_S_test_S_spi_33334444

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_ORD 116
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_ORD_STR_SORTABLE 00116

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_REQUIRES_ORDS \
	66, /* /test/spi@33334444 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_EXISTS 1
#define DT_N_INST_1_vnd_spi_device DT_N_S_test_S_spi_33334444_S_test_spi_dev_1

/* Bus info (controller: '/test/spi@33334444', type: '['spi']') */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_BUS_spi 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_BUS DT_N_S_test_S_spi_33334444

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_REG_NUM 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_RANGES_NUM 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_IRQ_NUM 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_IRQ_LEVEL 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_COMPAT_MATCHES_vnd_spi_device 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_reg {1 /* 0x1 */}
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_reg_IDX_0 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_reg_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_max_frequency 2000000
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_max_frequency_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_duplex 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_duplex_ENUM_IDX 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_duplex_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_duplex_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_frame_format 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_frame_format_ENUM_IDX 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_frame_format_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_frame_format_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_cpol 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_cpol_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_cpha 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_cpha_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_hold_cs 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_spi_hold_cs_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible {"vnd,spi-device"}
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_IDX_0 "vnd,spi-device"
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_IDX_0_STRING_UNQUOTED vnd,spi-device
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_IDX_0_STRING_TOKEN vnd_spi_device
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_SPI_DEVICE
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, compatible, 0)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, compatible, 0)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_LEN 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_compatible_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_wakeup_source 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_spi_33334444_S_test_spi_dev_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/spi@55556666
 *
 * Node identifier: DT_N_S_test_S_spi_55556666
 *
 * Binding (compatible = vnd,spi):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_spi_55556666_PATH "/test/spi@55556666"

/* Node's name with unit-address: */
#define DT_N_S_test_S_spi_55556666_FULL_NAME "spi@55556666"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_spi_55556666_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_spi_55556666_CHILD_IDX 27

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD(fn) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0)
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0)
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0)
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0)
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_spi_55556666_ORD 117
#define DT_N_S_test_S_spi_55556666_ORD_STR_SORTABLE 00117

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_spi_55556666_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_spi_55556666_SUPPORTS_ORDS \
	118, /* /test/spi@55556666/test-spi-dev@0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_spi_55556666_EXISTS 1
#define DT_N_INST_1_vnd_spi           DT_N_S_test_S_spi_55556666
#define DT_N_NODELABEL_test_spi_no_cs DT_N_S_test_S_spi_55556666

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_spi_55556666_REG_NUM 1
#define DT_N_S_test_S_spi_55556666_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_REG_IDX_0_VAL_ADDRESS 1431660134 /* 0x55556666 */
#define DT_N_S_test_S_spi_55556666_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_spi_55556666_RANGES_NUM 0
#define DT_N_S_test_S_spi_55556666_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_spi_55556666_IRQ_NUM 0
#define DT_N_S_test_S_spi_55556666_IRQ_LEVEL 0
#define DT_N_S_test_S_spi_55556666_COMPAT_MATCHES_vnd_spi 1
#define DT_N_S_test_S_spi_55556666_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_spi_55556666_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_spi_55556666_P_clock_frequency 2000000
#define DT_N_S_test_S_spi_55556666_P_clock_frequency_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_status "okay"
#define DT_N_S_test_S_spi_55556666_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_S_spi_55556666_P_status_STRING_TOKEN okay
#define DT_N_S_test_S_spi_55556666_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_S_spi_55556666_P_status_IDX_0 "okay"
#define DT_N_S_test_S_spi_55556666_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_status_ENUM_IDX 1
#define DT_N_S_test_S_spi_55556666_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_status_ENUM_TOKEN okay
#define DT_N_S_test_S_spi_55556666_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_S_spi_55556666_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_55556666, status, 0)
#define DT_N_S_test_S_spi_55556666_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_55556666, status, 0)
#define DT_N_S_test_S_spi_55556666_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_55556666, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_55556666, status, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_P_status_LEN 1
#define DT_N_S_test_S_spi_55556666_P_status_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_compatible {"vnd,spi"}
#define DT_N_S_test_S_spi_55556666_P_compatible_IDX_0 "vnd,spi"
#define DT_N_S_test_S_spi_55556666_P_compatible_IDX_0_STRING_UNQUOTED vnd,spi
#define DT_N_S_test_S_spi_55556666_P_compatible_IDX_0_STRING_TOKEN vnd_spi
#define DT_N_S_test_S_spi_55556666_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_SPI
#define DT_N_S_test_S_spi_55556666_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_55556666, compatible, 0)
#define DT_N_S_test_S_spi_55556666_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_55556666, compatible, 0)
#define DT_N_S_test_S_spi_55556666_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_55556666, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_55556666, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_P_compatible_LEN 1
#define DT_N_S_test_S_spi_55556666_P_compatible_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_reg {1431660134 /* 0x55556666 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_spi_55556666_P_reg_IDX_0 1431660134
#define DT_N_S_test_S_spi_55556666_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_reg_IDX_1 4096
#define DT_N_S_test_S_spi_55556666_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_reg_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_wakeup_source 0
#define DT_N_S_test_S_spi_55556666_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_spi_55556666_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_spi_55556666_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/spi@55556666/test-spi-dev@0
 *
 * Node identifier: DT_N_S_test_S_spi_55556666_S_test_spi_dev_0
 *
 * Binding (compatible = vnd,spi-device-2):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,spi-device-2.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_PATH "/test/spi@55556666/test-spi-dev@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FULL_NAME "test-spi-dev@0"

/* Node parent (/test/spi@55556666) identifier: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_PARENT DT_N_S_test_S_spi_55556666

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_ORD 118
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_ORD_STR_SORTABLE 00118

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_REQUIRES_ORDS \
	117, /* /test/spi@55556666 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_EXISTS 1
#define DT_N_INST_0_vnd_spi_device_2      DT_N_S_test_S_spi_55556666_S_test_spi_dev_0
#define DT_N_NODELABEL_test_spi_dev_no_cs DT_N_S_test_S_spi_55556666_S_test_spi_dev_0

/* Bus info (controller: '/test/spi@55556666', type: '['spi']') */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_BUS_spi 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_BUS DT_N_S_test_S_spi_55556666

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_REG_NUM 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_RANGES_NUM 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_IRQ_NUM 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_IRQ_LEVEL 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_COMPAT_MATCHES_vnd_spi_device_2 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_reg {0 /* 0x0 */}
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_reg_IDX_0 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_reg_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_max_frequency 2000000
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_max_frequency_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_duplex 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_duplex_ENUM_IDX 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_duplex_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_duplex_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_frame_format 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_frame_format_ENUM_IDX 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_frame_format_ENUM_VAL_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_frame_format_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_cpol 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_cpol_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_cpha 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_cpha_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_hold_cs 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_spi_hold_cs_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible {"vnd,spi-device-2"}
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_IDX_0 "vnd,spi-device-2"
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,spi-device-2
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_IDX_0_STRING_TOKEN vnd_spi_device_2
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_SPI_DEVICE_2
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, compatible, 0)
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, compatible, 0)
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_LEN 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_wakeup_source 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_spi_55556666_S_test_spi_dev_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/test-children
 *
 * Node identifier: DT_N_S_test_S_test_children
 *
 * Binding (compatible = vnd,child-bindings):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,child-bindings.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_children_PATH "/test/test-children"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_children_FULL_NAME "test-children"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_children_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_children_CHILD_IDX 47

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_children_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_children_S_child_a) fn(DT_N_S_test_S_test_children_S_child_b) fn(DT_N_S_test_S_test_children_S_child_c)
#define DT_N_S_test_S_test_children_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_children_S_child_a) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children_S_child_b) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children_S_child_c)
#define DT_N_S_test_S_test_children_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_children_S_child_a, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_b, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_c, __VA_ARGS__)
#define DT_N_S_test_S_test_children_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_children_S_child_a, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children_S_child_b, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children_S_child_c, __VA_ARGS__)
#define DT_N_S_test_S_test_children_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_children_S_child_a) fn(DT_N_S_test_S_test_children_S_child_b)
#define DT_N_S_test_S_test_children_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_children_S_child_a) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children_S_child_b)
#define DT_N_S_test_S_test_children_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_children_S_child_a, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_b, __VA_ARGS__)
#define DT_N_S_test_S_test_children_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_children_S_child_a, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_children_S_child_b, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_children_ORD 119
#define DT_N_S_test_S_test_children_ORD_STR_SORTABLE 00119

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_children_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_children_SUPPORTS_ORDS \
	120, /* /test/test-children/child-a */ \
	121, /* /test/test-children/child-b */ \
	122, /* /test/test-children/child-c */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_children_EXISTS 1
#define DT_N_INST_0_vnd_child_bindings DT_N_S_test_S_test_children
#define DT_N_NODELABEL_test_children   DT_N_S_test_S_test_children

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_children_REG_NUM 0
#define DT_N_S_test_S_test_children_RANGES_NUM 0
#define DT_N_S_test_S_test_children_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_children_IRQ_NUM 0
#define DT_N_S_test_S_test_children_IRQ_LEVEL 0
#define DT_N_S_test_S_test_children_COMPAT_MATCHES_vnd_child_bindings 1
#define DT_N_S_test_S_test_children_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_children_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_children_P_compatible {"vnd,child-bindings"}
#define DT_N_S_test_S_test_children_P_compatible_IDX_0 "vnd,child-bindings"
#define DT_N_S_test_S_test_children_P_compatible_IDX_0_STRING_UNQUOTED vnd,child-bindings
#define DT_N_S_test_S_test_children_P_compatible_IDX_0_STRING_TOKEN vnd_child_bindings
#define DT_N_S_test_S_test_children_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_CHILD_BINDINGS
#define DT_N_S_test_S_test_children_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_children_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_children, compatible, 0)
#define DT_N_S_test_S_test_children_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_children, compatible, 0)
#define DT_N_S_test_S_test_children_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_children, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_children_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_children, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_children_P_compatible_LEN 1
#define DT_N_S_test_S_test_children_P_compatible_EXISTS 1
#define DT_N_S_test_S_test_children_P_wakeup_source 0
#define DT_N_S_test_S_test_children_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_test_children_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_test_children_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/test-children/child-a
 *
 * Node identifier: DT_N_S_test_S_test_children_S_child_a
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_children_S_child_a_PATH "/test/test-children/child-a"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_children_S_child_a_FULL_NAME "child-a"

/* Node parent (/test/test-children) identifier: */
#define DT_N_S_test_S_test_children_S_child_a_PARENT DT_N_S_test_S_test_children

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_children_S_child_a_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_children_S_child_a_ORD 120
#define DT_N_S_test_S_test_children_S_child_a_ORD_STR_SORTABLE 00120

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_children_S_child_a_REQUIRES_ORDS \
	119, /* /test/test-children */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_children_S_child_a_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_children_S_child_a_EXISTS 1
#define DT_N_NODELABEL_test_child_a DT_N_S_test_S_test_children_S_child_a

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_children_S_child_a_REG_NUM 0
#define DT_N_S_test_S_test_children_S_child_a_RANGES_NUM 0
#define DT_N_S_test_S_test_children_S_child_a_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_children_S_child_a_IRQ_NUM 0
#define DT_N_S_test_S_test_children_S_child_a_IRQ_LEVEL 0
#define DT_N_S_test_S_test_children_S_child_a_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_children_S_child_a_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_children_S_child_a_P_val 0
#define DT_N_S_test_S_test_children_S_child_a_P_val_EXISTS 1

/*
 * Devicetree node: /test/test-children/child-b
 *
 * Node identifier: DT_N_S_test_S_test_children_S_child_b
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_children_S_child_b_PATH "/test/test-children/child-b"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_children_S_child_b_FULL_NAME "child-b"

/* Node parent (/test/test-children) identifier: */
#define DT_N_S_test_S_test_children_S_child_b_PARENT DT_N_S_test_S_test_children

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_children_S_child_b_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_children_S_child_b_ORD 121
#define DT_N_S_test_S_test_children_S_child_b_ORD_STR_SORTABLE 00121

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_children_S_child_b_REQUIRES_ORDS \
	119, /* /test/test-children */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_children_S_child_b_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_children_S_child_b_EXISTS 1
#define DT_N_NODELABEL_test_child_b DT_N_S_test_S_test_children_S_child_b

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_children_S_child_b_REG_NUM 0
#define DT_N_S_test_S_test_children_S_child_b_RANGES_NUM 0
#define DT_N_S_test_S_test_children_S_child_b_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_children_S_child_b_IRQ_NUM 0
#define DT_N_S_test_S_test_children_S_child_b_IRQ_LEVEL 0
#define DT_N_S_test_S_test_children_S_child_b_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_children_S_child_b_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_children_S_child_b_P_val 1
#define DT_N_S_test_S_test_children_S_child_b_P_val_EXISTS 1

/*
 * Devicetree node: /test/test-children/child-c
 *
 * Node identifier: DT_N_S_test_S_test_children_S_child_c
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_children_S_child_c_PATH "/test/test-children/child-c"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_children_S_child_c_FULL_NAME "child-c"

/* Node parent (/test/test-children) identifier: */
#define DT_N_S_test_S_test_children_S_child_c_PARENT DT_N_S_test_S_test_children

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_children_S_child_c_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_children_S_child_c_ORD 122
#define DT_N_S_test_S_test_children_S_child_c_ORD_STR_SORTABLE 00122

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_children_S_child_c_REQUIRES_ORDS \
	119, /* /test/test-children */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_children_S_child_c_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_children_S_child_c_EXISTS 1
#define DT_N_NODELABEL_test_child_c DT_N_S_test_S_test_children_S_child_c

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_children_S_child_c_REG_NUM 0
#define DT_N_S_test_S_test_children_S_child_c_RANGES_NUM 0
#define DT_N_S_test_S_test_children_S_child_c_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_children_S_child_c_IRQ_NUM 0
#define DT_N_S_test_S_test_children_S_child_c_IRQ_LEVEL 0
#define DT_N_S_test_S_test_children_S_child_c_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_children_S_child_c_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_children_S_child_c_P_val 2
#define DT_N_S_test_S_test_children_S_child_c_P_val_EXISTS 1

/*
 * Devicetree node: /test/test-great-grandchildren
 *
 * Node identifier: DT_N_S_test_S_test_great_grandchildren
 *
 * Binding (compatible = vnd,great-grandchild-bindings):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,great-grandchild-bindings.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_great_grandchildren_PATH "/test/test-great-grandchildren"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_great_grandchildren_FULL_NAME "test-great-grandchildren"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_great_grandchildren_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_great_grandchildren_CHILD_IDX 48

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_great_grandchildren_S_child)
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_great_grandchildren_S_child)
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_great_grandchildren_S_child)
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_great_grandchildren_S_child)
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_great_grandchildren_ORD 123
#define DT_N_S_test_S_test_great_grandchildren_ORD_STR_SORTABLE 00123

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_great_grandchildren_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_great_grandchildren_SUPPORTS_ORDS \
	124, /* /test/test-great-grandchildren/child */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_great_grandchildren_EXISTS 1
#define DT_N_INST_0_vnd_great_grandchild_bindings DT_N_S_test_S_test_great_grandchildren

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_great_grandchildren_REG_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_RANGES_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_great_grandchildren_IRQ_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_IRQ_LEVEL 0
#define DT_N_S_test_S_test_great_grandchildren_COMPAT_MATCHES_vnd_great_grandchild_bindings 1
#define DT_N_S_test_S_test_great_grandchildren_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_great_grandchildren_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_great_grandchildren_P_compatible {"vnd,great-grandchild-bindings"}
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_IDX_0 "vnd,great-grandchild-bindings"
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_IDX_0_STRING_UNQUOTED vnd,great-grandchild-bindings
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_IDX_0_STRING_TOKEN vnd_great_grandchild_bindings
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_GREAT_GRANDCHILD_BINDINGS
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_great_grandchildren, compatible, 0)
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_great_grandchildren, compatible, 0)
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_great_grandchildren, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_LEN 1
#define DT_N_S_test_S_test_great_grandchildren_P_compatible_EXISTS 1
#define DT_N_S_test_S_test_great_grandchildren_P_wakeup_source 0
#define DT_N_S_test_S_test_great_grandchildren_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_test_great_grandchildren_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_test_great_grandchildren_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/test-great-grandchildren/child
 *
 * Node identifier: DT_N_S_test_S_test_great_grandchildren_S_child
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_PATH "/test/test-great-grandchildren/child"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_FULL_NAME "child"

/* Node parent (/test/test-great-grandchildren) identifier: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_PARENT DT_N_S_test_S_test_great_grandchildren

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_ORD 124
#define DT_N_S_test_S_test_great_grandchildren_S_child_ORD_STR_SORTABLE 00124

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_REQUIRES_ORDS \
	123, /* /test/test-great-grandchildren */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_SUPPORTS_ORDS \
	125, /* /test/test-great-grandchildren/child/grandchild */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_REG_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_RANGES_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_IRQ_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_IRQ_LEVEL 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/test-great-grandchildren/child/grandchild
 *
 * Node identifier: DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_PATH "/test/test-great-grandchildren/child/grandchild"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FULL_NAME "grandchild"

/* Node parent (/test/test-great-grandchildren/child) identifier: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_PARENT DT_N_S_test_S_test_great_grandchildren_S_child

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild)
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild, __VA_ARGS__)
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_ORD 125
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_ORD_STR_SORTABLE 00125

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_REQUIRES_ORDS \
	124, /* /test/test-great-grandchildren/child */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_SUPPORTS_ORDS \
	126, /* /test/test-great-grandchildren/child/grandchild/great-grandchild */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_REG_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_RANGES_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_IRQ_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_IRQ_LEVEL 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/test-great-grandchildren/child/grandchild/great-grandchild
 *
 * Node identifier: DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_PATH "/test/test-great-grandchildren/child/grandchild/great-grandchild"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FULL_NAME "great-grandchild"

/* Node parent (/test/test-great-grandchildren/child/grandchild) identifier: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_PARENT DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_ORD 126
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_ORD_STR_SORTABLE 00126

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_REQUIRES_ORDS \
	125, /* /test/test-great-grandchildren/child/grandchild */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_EXISTS 1
#define DT_N_NODELABEL_test_ggc DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_REG_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_RANGES_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_IRQ_NUM 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_IRQ_LEVEL 0
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_P_ggc_prop 42
#define DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild_P_ggc_prop_EXISTS 1

/*
 * Devicetree node: /test/test-mtd@33221100
 *
 * Node identifier: DT_N_S_test_S_test_mtd_33221100
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_33221100_PATH "/test/test-mtd@33221100"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_33221100_FULL_NAME "test-mtd@33221100"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_mtd_33221100_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_33221100_CHILD_IDX 65

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions)
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions)
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions)
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions)
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_33221100_ORD 127
#define DT_N_S_test_S_test_mtd_33221100_ORD_STR_SORTABLE 00127

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_33221100_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_33221100_SUPPORTS_ORDS \
	128, /* /test/test-mtd@33221100/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_33221100_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_33221100_REG_NUM 1
#define DT_N_S_test_S_test_mtd_33221100_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_REG_IDX_0_VAL_ADDRESS 857870592 /* 0x33221100 */
#define DT_N_S_test_S_test_mtd_33221100_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_test_mtd_33221100_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_33221100_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_33221100_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_33221100_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_33221100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_33221100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_mtd_33221100_P_reg {857870592 /* 0x33221100 */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_test_mtd_33221100_P_reg_IDX_0 857870592
#define DT_N_S_test_S_test_mtd_33221100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_P_reg_IDX_1 4096
#define DT_N_S_test_S_test_mtd_33221100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_P_reg_EXISTS 1

/*
 * Devicetree node: /test/test-mtd@33221100/partitions
 *
 * Node identifier: DT_N_S_test_S_test_mtd_33221100_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_PATH "/test/test-mtd@33221100/partitions"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FULL_NAME "partitions"

/* Node parent (/test/test-mtd@33221100) identifier: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_PARENT DT_N_S_test_S_test_mtd_33221100

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_ORD 128
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_ORD_STR_SORTABLE 00128

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_REQUIRES_ORDS \
	127, /* /test/test-mtd@33221100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_SUPPORTS_ORDS \
	129, /* /test/test-mtd@33221100/partitions/partition@6ff80 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_EXISTS 1
#define DT_N_INST_2_fixed_partitions DT_N_S_test_S_test_mtd_33221100_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_REG_NUM 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/test-mtd@33221100/partitions/partition@6ff80
 *
 * Node identifier: DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_PATH "/test/test-mtd@33221100/partitions/partition@6ff80"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FULL_NAME "partition@6ff80"

/* Node parent (/test/test-mtd@33221100/partitions) identifier: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_PARENT DT_N_S_test_S_test_mtd_33221100_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_ORD 129
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_ORD_STR_SORTABLE 00129

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_REQUIRES_ORDS \
	128, /* /test/test-mtd@33221100/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_REG_NUM 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_REG_IDX_0_VAL_ADDRESS 458624 /* 0x6ff80 */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_REG_IDX_0_VAL_SIZE 128 /* 0x80 */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_PARTITION_ID 5

/* Generic property macros: */
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label "test-partition-2"
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_STRING_UNQUOTED test-partition-2
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_STRING_TOKEN test_partition_2
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_STRING_UPPER_TOKEN TEST_PARTITION_2
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_IDX_0 "test-partition-2"
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, label, 0)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, label, 0)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_LEN 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_label_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_read_only 0
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_read_only_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_reg {458624 /* 0x6ff80 */, 128 /* 0x80 */}
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_reg_IDX_0 458624
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_reg_IDX_1 128
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80_P_reg_EXISTS 1

/*
 * Devicetree node: /test/test-mtd@ffeeddcc
 *
 * Node identifier: DT_N_S_test_S_test_mtd_ffeeddcc
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_PATH "/test/test-mtd@ffeeddcc"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_FULL_NAME "test-mtd@ffeeddcc"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_CHILD_IDX 64

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000)
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000)
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000)
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000)
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_ORD 130
#define DT_N_S_test_S_test_mtd_ffeeddcc_ORD_STR_SORTABLE 00130

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_SUPPORTS_ORDS \
	131, /* /test/test-mtd@ffeeddcc/flash@20000000 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_REG_NUM 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_REG_IDX_0_VAL_ADDRESS 4293844428 /* 0xffeeddcc */
#define DT_N_S_test_S_test_mtd_ffeeddcc_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_test_S_test_mtd_ffeeddcc_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_P_reg {4293844428 /* 0xffeeddcc */, 4096 /* 0x1000 */}
#define DT_N_S_test_S_test_mtd_ffeeddcc_P_reg_IDX_0 4293844428
#define DT_N_S_test_S_test_mtd_ffeeddcc_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_P_reg_IDX_1 4096
#define DT_N_S_test_S_test_mtd_ffeeddcc_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_P_reg_EXISTS 1

/*
 * Devicetree node: /test/test-mtd@ffeeddcc/flash@20000000
 *
 * Node identifier: DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000
 *
 * Binding (compatible = soc-nv-flash):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_PATH "/test/test-mtd@ffeeddcc/flash@20000000"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FULL_NAME "flash@20000000"

/* Node parent (/test/test-mtd@ffeeddcc) identifier: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_PARENT DT_N_S_test_S_test_mtd_ffeeddcc

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_ORD 131
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_ORD_STR_SORTABLE 00131

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_REQUIRES_ORDS \
	130, /* /test/test-mtd@ffeeddcc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_SUPPORTS_ORDS \
	132, /* /test/test-mtd@ffeeddcc/flash@20000000/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_EXISTS 1
#define DT_N_INST_1_soc_nv_flash DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_REG_NUM 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible {"soc-nv-flash"}
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, compatible, 0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, compatible, 0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_LEN 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_compatible_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_reg {536870912 /* 0x20000000 */, 256 /* 0x100 */}
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_reg_IDX_0 536870912
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_reg_IDX_1 256
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_reg_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_wakeup_source 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test/test-mtd@ffeeddcc/flash@20000000/partitions
 *
 * Node identifier: DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_PATH "/test/test-mtd@ffeeddcc/flash@20000000/partitions"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FULL_NAME "partitions"

/* Node parent (/test/test-mtd@ffeeddcc/flash@20000000) identifier: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_PARENT DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_ORD 132
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_ORD_STR_SORTABLE 00132

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_REQUIRES_ORDS \
	131, /* /test/test-mtd@ffeeddcc/flash@20000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_SUPPORTS_ORDS \
	133, /* /test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@0 */ \
	134, /* /test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@c0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_EXISTS 1
#define DT_N_INST_1_fixed_partitions DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_REG_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@0
 *
 * Node identifier: DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_PATH "/test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FULL_NAME "partition@0"

/* Node parent (/test/test-mtd@ffeeddcc/flash@20000000/partitions) identifier: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_PARENT DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_ORD 133
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_ORD_STR_SORTABLE 00133

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_REQUIRES_ORDS \
	132, /* /test/test-mtd@ffeeddcc/flash@20000000/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 192 /* 0xc0 */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_PARTITION_ID 6

/* Generic property macros: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label "test-partition-0"
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_STRING_UNQUOTED test-partition-0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_STRING_TOKEN test_partition_0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN TEST_PARTITION_0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_IDX_0 "test-partition-0"
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, label, 0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, label, 0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_LEN 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_read_only 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 192 /* 0xc0 */}
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_reg_IDX_1 192
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@c0
 *
 * Node identifier: DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_PATH "/test/test-mtd@ffeeddcc/flash@20000000/partitions/partition@c0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FULL_NAME "partition@c0"

/* Node parent (/test/test-mtd@ffeeddcc/flash@20000000/partitions) identifier: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_PARENT DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_ORD 134
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_ORD_STR_SORTABLE 00134

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_REQUIRES_ORDS \
	132, /* /test/test-mtd@ffeeddcc/flash@20000000/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_REG_NUM 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_REG_IDX_0_VAL_ADDRESS 192 /* 0xc0 */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_REG_IDX_0_VAL_SIZE 64 /* 0x40 */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_RANGES_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_IRQ_NUM 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_IRQ_LEVEL 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_PARTITION_ID 7

/* Generic property macros: */
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label "test-partition-1"
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_STRING_UNQUOTED test-partition-1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_STRING_TOKEN test_partition_1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_STRING_UPPER_TOKEN TEST_PARTITION_1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_IDX_0 "test-partition-1"
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, label, 0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, label, 0)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, label, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_LEN 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_label_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_read_only 0
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_read_only_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_reg {192 /* 0xc0 */, 64 /* 0x40 */}
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_reg_IDX_0 192
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_reg_IDX_1 64
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0_P_reg_EXISTS 1

/*
 * Devicetree node: /test/test-ranges
 *
 * Node identifier: DT_N_S_test_S_test_ranges
 */

/* Node's full path: */
#define DT_N_S_test_S_test_ranges_PATH "/test/test-ranges"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_ranges_FULL_NAME "test-ranges"

/* Node parent (/test) identifier: */
#define DT_N_S_test_S_test_ranges_PARENT DT_N_S_test

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_ranges_CHILD_IDX 49

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD(fn) fn(DT_N_S_test_S_test_ranges_S_pcie_0) fn(DT_N_S_test_S_test_ranges_S_other_1) fn(DT_N_S_test_S_test_ranges_S_empty_2)
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_S_test_ranges_S_pcie_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_other_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_empty_2)
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_S_test_ranges_S_pcie_0, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_other_1, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_empty_2, __VA_ARGS__)
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_ranges_S_pcie_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_other_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_empty_2, __VA_ARGS__)
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_S_test_ranges_S_pcie_0) fn(DT_N_S_test_S_test_ranges_S_other_1) fn(DT_N_S_test_S_test_ranges_S_empty_2)
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_S_test_ranges_S_pcie_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_other_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_empty_2)
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_S_test_ranges_S_pcie_0, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_other_1, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_empty_2, __VA_ARGS__)
#define DT_N_S_test_S_test_ranges_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_ranges_S_pcie_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_other_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_test_S_test_ranges_S_empty_2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_ranges_ORD 135
#define DT_N_S_test_S_test_ranges_ORD_STR_SORTABLE 00135

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_ranges_REQUIRES_ORDS \
	21, /* /test */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_ranges_SUPPORTS_ORDS \
	136, /* /test/test-ranges/empty@2 */ \
	137, /* /test/test-ranges/other@1 */ \
	138, /* /test/test-ranges/pcie@0 */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_ranges_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_ranges_REG_NUM 0
#define DT_N_S_test_S_test_ranges_RANGES_NUM 0
#define DT_N_S_test_S_test_ranges_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_ranges_IRQ_NUM 0
#define DT_N_S_test_S_test_ranges_IRQ_LEVEL 0
#define DT_N_S_test_S_test_ranges_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_ranges_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test/test-ranges/empty@2
 *
 * Node identifier: DT_N_S_test_S_test_ranges_S_empty_2
 */

/* Node's full path: */
#define DT_N_S_test_S_test_ranges_S_empty_2_PATH "/test/test-ranges/empty@2"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_ranges_S_empty_2_FULL_NAME "empty@2"

/* Node parent (/test/test-ranges) identifier: */
#define DT_N_S_test_S_test_ranges_S_empty_2_PARENT DT_N_S_test_S_test_ranges

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_ranges_S_empty_2_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_ranges_S_empty_2_ORD 136
#define DT_N_S_test_S_test_ranges_S_empty_2_ORD_STR_SORTABLE 00136

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_ranges_S_empty_2_REQUIRES_ORDS \
	135, /* /test/test-ranges */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_ranges_S_empty_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_ranges_S_empty_2_EXISTS 1
#define DT_N_NODELABEL_test_ranges_empty DT_N_S_test_S_test_ranges_S_empty_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_ranges_S_empty_2_REG_NUM 1
#define DT_N_S_test_S_test_ranges_S_empty_2_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_empty_2_REG_IDX_0_VAL_ADDRESS 2 /* 0x2 */
#define DT_N_S_test_S_test_ranges_S_empty_2_REG_IDX_0_VAL_SIZE 1 /* 0x1 */
#define DT_N_S_test_S_test_ranges_S_empty_2_RANGES_NUM 0
#define DT_N_S_test_S_test_ranges_S_empty_2_FOREACH_RANGE(fn) 
#define DT_N_S_test_S_test_ranges_S_empty_2_IRQ_NUM 0
#define DT_N_S_test_S_test_ranges_S_empty_2_IRQ_LEVEL 0
#define DT_N_S_test_S_test_ranges_S_empty_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_ranges_S_empty_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg {0 /* 0x0 */, 2 /* 0x2 */, 1 /* 0x1 */}
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg_IDX_0 0
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg_IDX_1 2
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg_IDX_2 1
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg_IDX_2_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_empty_2_P_reg_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_empty_2_P_ranges_EXISTS 1

/*
 * Devicetree node: /test/test-ranges/other@1
 *
 * Node identifier: DT_N_S_test_S_test_ranges_S_other_1
 */

/* Node's full path: */
#define DT_N_S_test_S_test_ranges_S_other_1_PATH "/test/test-ranges/other@1"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_ranges_S_other_1_FULL_NAME "other@1"

/* Node parent (/test/test-ranges) identifier: */
#define DT_N_S_test_S_test_ranges_S_other_1_PARENT DT_N_S_test_S_test_ranges

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_ranges_S_other_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_ranges_S_other_1_ORD 137
#define DT_N_S_test_S_test_ranges_S_other_1_ORD_STR_SORTABLE 00137

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_ranges_S_other_1_REQUIRES_ORDS \
	135, /* /test/test-ranges */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_ranges_S_other_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_ranges_S_other_1_EXISTS 1
#define DT_N_NODELABEL_test_ranges_other DT_N_S_test_S_test_ranges_S_other_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_ranges_S_other_1_REG_NUM 1
#define DT_N_S_test_S_test_ranges_S_other_1_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_other_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_test_S_test_ranges_S_other_1_REG_IDX_0_VAL_SIZE 1 /* 0x1 */
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_NUM 2
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_0_VAL_CHILD_BUS_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_0_VAL_PARENT_BUS_ADDRESS 1056899072 /* 0x3eff0000 */
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_0_VAL_LENGTH 65536 /* 0x10000 */
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_1_VAL_CHILD_BUS_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_1_VAL_PARENT_BUS_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_test_S_test_ranges_S_other_1_RANGES_IDX_1_VAL_LENGTH 788463616 /* 0x2eff0000 */
#define DT_N_S_test_S_test_ranges_S_other_1_FOREACH_RANGE(fn) fn(DT_N_S_test_S_test_ranges_S_other_1, 0) fn(DT_N_S_test_S_test_ranges_S_other_1, 1)
#define DT_N_S_test_S_test_ranges_S_other_1_IRQ_NUM 0
#define DT_N_S_test_S_test_ranges_S_other_1_IRQ_LEVEL 0
#define DT_N_S_test_S_test_ranges_S_other_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_ranges_S_other_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg {0 /* 0x0 */, 1 /* 0x1 */, 1 /* 0x1 */}
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg_IDX_0 0
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg_IDX_1 1
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg_IDX_2 1
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg_IDX_2_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_other_1_P_reg_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_other_1_P_ranges_EXISTS 1

/*
 * Devicetree node: /test/test-ranges/pcie@0
 *
 * Node identifier: DT_N_S_test_S_test_ranges_S_pcie_0
 *
 * Binding (compatible = vnd,pcie):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,pcie.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_PATH "/test/test-ranges/pcie@0"

/* Node's name with unit-address: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_FULL_NAME "pcie@0"

/* Node parent (/test/test-ranges) identifier: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_PARENT DT_N_S_test_S_test_ranges

/* Node's index in its parent's list of children: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD(fn) 
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_ORD 138
#define DT_N_S_test_S_test_ranges_S_pcie_0_ORD_STR_SORTABLE 00138

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_REQUIRES_ORDS \
	135, /* /test/test-ranges */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_EXISTS 1
#define DT_N_INST_0_vnd_pcie            DT_N_S_test_S_test_ranges_S_pcie_0
#define DT_N_NODELABEL_test_ranges_pcie DT_N_S_test_S_test_ranges_S_pcie_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_REG_NUM 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_REG_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_REG_IDX_0_VAL_SIZE 1 /* 0x1 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_NUM 3
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_0_VAL_CHILD_BUS_FLAGS_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_0_VAL_CHILD_BUS_FLAGS 16777216 /* 0x1000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_0_VAL_CHILD_BUS_ADDRESS 0 /* 0x0 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_0_VAL_PARENT_BUS_ADDRESS 1056899072 /* 0x3eff0000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_0_VAL_LENGTH 65536 /* 0x10000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_1_VAL_CHILD_BUS_FLAGS_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_1_VAL_CHILD_BUS_FLAGS 33554432 /* 0x2000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_1_VAL_CHILD_BUS_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_1_VAL_PARENT_BUS_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_1_VAL_LENGTH 788463616 /* 0x2eff0000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_2_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_2_VAL_CHILD_BUS_FLAGS_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_2_VAL_CHILD_BUS_FLAGS 50331648 /* 0x3000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_2_VAL_CHILD_BUS_ADDRESS 549755813888 /* 0x8000000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_2_VAL_PARENT_BUS_ADDRESS 549755813888 /* 0x8000000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_RANGES_IDX_2_VAL_LENGTH 549755813888 /* 0x8000000000 */
#define DT_N_S_test_S_test_ranges_S_pcie_0_FOREACH_RANGE(fn) fn(DT_N_S_test_S_test_ranges_S_pcie_0, 0) fn(DT_N_S_test_S_test_ranges_S_pcie_0, 1) fn(DT_N_S_test_S_test_ranges_S_pcie_0, 2)
#define DT_N_S_test_S_test_ranges_S_pcie_0_IRQ_NUM 0
#define DT_N_S_test_S_test_ranges_S_pcie_0_IRQ_LEVEL 0
#define DT_N_S_test_S_test_ranges_S_pcie_0_COMPAT_MATCHES_vnd_pcie 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible {"vnd,pcie"}
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_IDX_0 "vnd,pcie"
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_IDX_0_STRING_UNQUOTED vnd,pcie
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_IDX_0_STRING_TOKEN vnd_pcie
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_PCIE
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_S_test_ranges_S_pcie_0, compatible, 0)
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_S_test_ranges_S_pcie_0, compatible, 0)
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_S_test_ranges_S_pcie_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_S_test_ranges_S_pcie_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_LEN 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_compatible_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg {0 /* 0x0 */, 0 /* 0x0 */, 1 /* 0x1 */}
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg_IDX_0 0
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg_IDX_1 0
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg_IDX_2 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg_IDX_2_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_reg_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_wakeup_source 0
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_wakeup_source_EXISTS 1
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_S_test_ranges_S_pcie_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /test_64
 *
 * Node identifier: DT_N_S_test_64
 */

/* Node's full path: */
#define DT_N_S_test_64_PATH "/test_64"

/* Node's name with unit-address: */
#define DT_N_S_test_64_FULL_NAME "test_64"

/* Node parent (/) identifier: */
#define DT_N_S_test_64_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_test_64_CHILD_IDX 25

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_64_FOREACH_CHILD(fn) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344)
#define DT_N_S_test_64_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344)
#define DT_N_S_test_64_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, __VA_ARGS__)
#define DT_N_S_test_64_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, __VA_ARGS__)
#define DT_N_S_test_64_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344)
#define DT_N_S_test_64_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344)
#define DT_N_S_test_64_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, __VA_ARGS__)
#define DT_N_S_test_64_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_test_64_ORD 139
#define DT_N_S_test_64_ORD_STR_SORTABLE 00139

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_64_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_64_SUPPORTS_ORDS \
	140, /* /test_64/reg-holder-64@ffffffff11223344 */

/* Existence and alternate IDs: */
#define DT_N_S_test_64_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_64_REG_NUM 0
#define DT_N_S_test_64_RANGES_NUM 0
#define DT_N_S_test_64_FOREACH_RANGE(fn) 
#define DT_N_S_test_64_IRQ_NUM 0
#define DT_N_S_test_64_IRQ_LEVEL 0
#define DT_N_S_test_64_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_64_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /test_64/reg-holder-64@ffffffff11223344
 *
 * Node identifier: DT_N_S_test_64_S_reg_holder_64_ffffffff11223344
 *
 * Binding (compatible = vnd,reg-holder-64):
 *   /usr/local/google/home/sergiosoares/betty-mcu/third_party/zephyr/dts/bindings/test/vnd,reg-holder-64.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_PATH "/test_64/reg-holder-64@ffffffff11223344"

/* Node's name with unit-address: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FULL_NAME "reg-holder-64@ffffffff11223344"

/* Node parent (/test_64) identifier: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_PARENT DT_N_S_test_64

/* Node's index in its parent's list of children: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD(fn) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_ORD 140
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_ORD_STR_SORTABLE 00140

/* Ordinals for what this node depends on directly: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_REQUIRES_ORDS \
	139, /* /test_64 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_EXISTS 1
#define DT_N_INST_0_vnd_reg_holder_64 DT_N_S_test_64_S_reg_holder_64_ffffffff11223344
#define DT_N_NODELABEL_test_reg_64    DT_N_S_test_64_S_reg_holder_64_ffffffff11223344

/* Macros for properties that are special in the specification: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_REG_NUM 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_REG_IDX_0_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_REG_IDX_0_VAL_ADDRESS 18446744069702038340 /* 0xffffffff11223344 */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_REG_NAME_test_name_VAL_ADDRESS DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_RANGES_NUM 0
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_FOREACH_RANGE(fn) 
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_IRQ_NUM 0
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_IRQ_LEVEL 0
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_COMPAT_MATCHES_vnd_reg_holder_64 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg {4294967295 /* 0xffffffff */, 287454020 /* 0x11223344 */}
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_IDX_0 4294967295
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_IDX_0_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_IDX_1 287454020
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_IDX_1_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names {"test_name"}
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_IDX_0 "test_name"
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_IDX_0_STRING_UNQUOTED test_name
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_IDX_0_STRING_TOKEN test_name
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_IDX_0_STRING_UPPER_TOKEN TEST_NAME
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, reg_names, 0)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, reg_names, 0)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, reg_names, 0, __VA_ARGS__)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, reg_names, 0, __VA_ARGS__)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_LEN 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_reg_names_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status "okay"
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_STRING_UNQUOTED okay
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_STRING_TOKEN okay
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_IDX_0 "okay"
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_IDX_0_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_ENUM_IDX 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_ENUM_TOKEN okay
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, status, 0)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, status, 0)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, status, 0, __VA_ARGS__)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, status, 0, __VA_ARGS__)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_LEN 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_status_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible {"vnd,reg-holder-64"}
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_IDX_0 "vnd,reg-holder-64"
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_IDX_0_STRING_UNQUOTED vnd,reg-holder-64
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_IDX_0_STRING_TOKEN vnd_reg_holder_64
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_IDX_0_STRING_UPPER_TOKEN VND_REG_HOLDER_64
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, compatible, 0)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, compatible, 0)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, compatible, 0, __VA_ARGS__)
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_LEN 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_compatible_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_wakeup_source 0
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_wakeup_source_EXISTS 1
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_test_64_S_reg_holder_64_ffffffff11223344_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_console                 DT_N_S_uart
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_uart
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_uart_mcumgr             DT_N_S_uart
#define DT_CHOSEN_zephyr_uart_mcumgr_EXISTS      1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_flash_controller_0_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_rng
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_flash_controller_0
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_display                 DT_N_S_sdl_dc
#define DT_CHOSEN_zephyr_display_EXISTS          1
#define DT_CHOSEN_zephyr_canbus                  DT_N_S_can_loopback0
#define DT_CHOSEN_zephyr_canbus_EXISTS           1
#define DT_CHOSEN_ztest_gpio                     DT_N_S_test_S_gpio_deadbeef
#define DT_CHOSEN_ztest_gpio_EXISTS              1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_flash_controller_0) fn(DT_N_S_flash_controller_0_S_flash_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can_loopback0) fn(DT_N_S_can) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_zephyr_user) fn(DT_N_S_test) fn(DT_N_S_test_S_interrupt_controller) fn(DT_N_S_test_S_pin_controller) fn(DT_N_S_test_S_pin_controller_S_pincfg_a) fn(DT_N_S_test_S_pin_controller_S_pincfg_b) fn(DT_N_S_test_S_pin_controller_S_pincfg_c) fn(DT_N_S_test_S_pin_controller_S_pincfg_d) fn(DT_N_S_test_S_array_holder) fn(DT_N_S_test_S_phandle_holder_0) fn(DT_N_S_test_S_enum_0) fn(DT_N_S_test_S_enum_1) fn(DT_N_S_test_S_enum_2) fn(DT_N_S_test_S_enum_3) fn(DT_N_S_test_S_enum_4) fn(DT_N_S_test_S_enum_5) fn(DT_N_S_test_S_enum_6) fn(DT_N_S_test_S_enum_7) fn(DT_N_S_test_S_disabled_node_0) fn(DT_N_S_test_S_reserved_node_0) fn(DT_N_S_test_S_gpio_0) fn(DT_N_S_test_S_gpio_1) fn(DT_N_S_test_S_intc_no_status_0) fn(DT_N_S_test_S_gpio_deadbeef) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2) fn(DT_N_S_test_S_gpio_abcd1234) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3) fn(DT_N_S_test_S_gpio_1234) fn(DT_N_S_test_S_gpio_1234abcd) fn(DT_N_S_test_S_i2c_11112222) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10) fn(DT_N_S_test_S_i2c) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12) fn(DT_N_S_test_S_i3c_88889999) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050) fn(DT_N_S_test_S_mbox) fn(DT_N_S_test_S_mbox_zero_cell) fn(DT_N_S_test_S_spi_33334444) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1) fn(DT_N_S_test_S_spi_33334444_S_gpio_2) fn(DT_N_S_test_S_spi_55556666) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0) fn(DT_N_S_test_S_i2c_77778888) fn(DT_N_S_test_S_adc_10002000) fn(DT_N_S_test_S_adc_10003000) fn(DT_N_S_test_S_temperature_sensor) fn(DT_N_S_test_S_reg_holder_9999aaaa) fn(DT_N_S_test_S_vendor) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc) fn(DT_N_S_test_S_interrupt_holder) fn(DT_N_S_test_S_interrupt_holder_extended) fn(DT_N_S_test_S_test_fixed_clock) fn(DT_N_S_test_S_test_clock) fn(DT_N_S_test_S_test_reset_abcd1234) fn(DT_N_S_test_S_dma_44443333) fn(DT_N_S_test_S_dma_44442222) fn(DT_N_S_test_S_pwm_55551111) fn(DT_N_S_test_S_pwm_55552222) fn(DT_N_S_test_S_can_phy0) fn(DT_N_S_test_S_can_55553333) fn(DT_N_S_test_S_can_55554444) fn(DT_N_S_test_S_can_55554444_S_can_transceiver) fn(DT_N_S_test_S_test_children) fn(DT_N_S_test_S_test_children_S_child_a) fn(DT_N_S_test_S_test_children_S_child_b) fn(DT_N_S_test_S_test_children_S_child_c) fn(DT_N_S_test_S_test_great_grandchildren) fn(DT_N_S_test_S_test_great_grandchildren_S_child) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild) fn(DT_N_S_test_S_test_ranges) fn(DT_N_S_test_S_test_ranges_S_pcie_0) fn(DT_N_S_test_S_test_ranges_S_other_1) fn(DT_N_S_test_S_test_ranges_S_empty_2) fn(DT_N_S_test_S_device_with_props_0) fn(DT_N_S_test_S_device_with_props_1) fn(DT_N_S_test_S_device_with_props_2) fn(DT_N_S_test_S_string_token_0) fn(DT_N_S_test_S_string_token_1) fn(DT_N_S_test_S_string_token_2) fn(DT_N_S_test_S_string_array_token_0) fn(DT_N_S_test_S_string_array_token_1) fn(DT_N_S_test_S_string_unquoted_f0) fn(DT_N_S_test_S_string_unquoted_f1) fn(DT_N_S_test_S_string_unquoted_t) fn(DT_N_S_test_S_string_array_unquoted_f0) fn(DT_N_S_test_S_string_array_unquoted_f1) fn(DT_N_S_test_S_string_array_unquoted_t) fn(DT_N_S_test_S_test_mtd_ffeeddcc) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0) fn(DT_N_S_test_S_test_mtd_33221100) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80) fn(DT_N_S_test_64) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344) fn(DT_N_S_non_deprecated_label)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_flash_controller_0) fn(DT_N_S_flash_controller_0_S_flash_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can_loopback0) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_zephyr_user) fn(DT_N_S_test) fn(DT_N_S_test_S_interrupt_controller) fn(DT_N_S_test_S_pin_controller) fn(DT_N_S_test_S_pin_controller_S_pincfg_a) fn(DT_N_S_test_S_pin_controller_S_pincfg_b) fn(DT_N_S_test_S_pin_controller_S_pincfg_c) fn(DT_N_S_test_S_pin_controller_S_pincfg_d) fn(DT_N_S_test_S_array_holder) fn(DT_N_S_test_S_phandle_holder_0) fn(DT_N_S_test_S_enum_0) fn(DT_N_S_test_S_enum_1) fn(DT_N_S_test_S_enum_2) fn(DT_N_S_test_S_enum_3) fn(DT_N_S_test_S_enum_4) fn(DT_N_S_test_S_enum_5) fn(DT_N_S_test_S_enum_6) fn(DT_N_S_test_S_enum_7) fn(DT_N_S_test_S_intc_no_status_0) fn(DT_N_S_test_S_gpio_deadbeef) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2) fn(DT_N_S_test_S_gpio_abcd1234) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3) fn(DT_N_S_test_S_gpio_1234) fn(DT_N_S_test_S_gpio_1234abcd) fn(DT_N_S_test_S_i2c_11112222) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2) fn(DT_N_S_test_S_i2c) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12) fn(DT_N_S_test_S_i3c_88889999) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050) fn(DT_N_S_test_S_mbox) fn(DT_N_S_test_S_mbox_zero_cell) fn(DT_N_S_test_S_spi_33334444) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1) fn(DT_N_S_test_S_spi_33334444_S_gpio_2) fn(DT_N_S_test_S_spi_55556666) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0) fn(DT_N_S_test_S_i2c_77778888) fn(DT_N_S_test_S_adc_10002000) fn(DT_N_S_test_S_adc_10003000) fn(DT_N_S_test_S_temperature_sensor) fn(DT_N_S_test_S_reg_holder_9999aaaa) fn(DT_N_S_test_S_vendor) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc) fn(DT_N_S_test_S_interrupt_holder) fn(DT_N_S_test_S_interrupt_holder_extended) fn(DT_N_S_test_S_test_fixed_clock) fn(DT_N_S_test_S_test_clock) fn(DT_N_S_test_S_test_reset_abcd1234) fn(DT_N_S_test_S_dma_44443333) fn(DT_N_S_test_S_dma_44442222) fn(DT_N_S_test_S_pwm_55551111) fn(DT_N_S_test_S_pwm_55552222) fn(DT_N_S_test_S_can_phy0) fn(DT_N_S_test_S_can_55553333) fn(DT_N_S_test_S_can_55554444) fn(DT_N_S_test_S_can_55554444_S_can_transceiver) fn(DT_N_S_test_S_test_children) fn(DT_N_S_test_S_test_children_S_child_a) fn(DT_N_S_test_S_test_children_S_child_b) fn(DT_N_S_test_S_test_great_grandchildren) fn(DT_N_S_test_S_test_great_grandchildren_S_child) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild) fn(DT_N_S_test_S_test_ranges) fn(DT_N_S_test_S_test_ranges_S_pcie_0) fn(DT_N_S_test_S_test_ranges_S_other_1) fn(DT_N_S_test_S_test_ranges_S_empty_2) fn(DT_N_S_test_S_device_with_props_0) fn(DT_N_S_test_S_device_with_props_1) fn(DT_N_S_test_S_string_token_0) fn(DT_N_S_test_S_string_token_1) fn(DT_N_S_test_S_string_token_2) fn(DT_N_S_test_S_string_array_token_0) fn(DT_N_S_test_S_string_array_token_1) fn(DT_N_S_test_S_string_unquoted_f0) fn(DT_N_S_test_S_string_unquoted_f1) fn(DT_N_S_test_S_string_unquoted_t) fn(DT_N_S_test_S_string_array_unquoted_f0) fn(DT_N_S_test_S_string_array_unquoted_f1) fn(DT_N_S_test_S_string_array_unquoted_t) fn(DT_N_S_test_S_test_mtd_ffeeddcc) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0) fn(DT_N_S_test_S_test_mtd_33221100) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80) fn(DT_N_S_test_64) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344) fn(DT_N_S_non_deprecated_label)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can_loopback0, __VA_ARGS__) fn(DT_N_S_can, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_zephyr_user, __VA_ARGS__) fn(DT_N_S_test, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_a, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_b, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_c, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_d, __VA_ARGS__) fn(DT_N_S_test_S_array_holder, __VA_ARGS__) fn(DT_N_S_test_S_phandle_holder_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_1, __VA_ARGS__) fn(DT_N_S_test_S_enum_2, __VA_ARGS__) fn(DT_N_S_test_S_enum_3, __VA_ARGS__) fn(DT_N_S_test_S_enum_4, __VA_ARGS__) fn(DT_N_S_test_S_enum_5, __VA_ARGS__) fn(DT_N_S_test_S_enum_6, __VA_ARGS__) fn(DT_N_S_test_S_enum_7, __VA_ARGS__) fn(DT_N_S_test_S_disabled_node_0, __VA_ARGS__) fn(DT_N_S_test_S_reserved_node_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1, __VA_ARGS__) fn(DT_N_S_test_S_intc_no_status_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, __VA_ARGS__) fn(DT_N_S_test_S_gpio_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234abcd, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1_S_muxed_i2c_dev_10, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2_S_muxed_i2c_dev_10, __VA_ARGS__) fn(DT_N_S_test_S_i2c, __VA_ARGS__) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, __VA_ARGS__) fn(DT_N_S_test_S_mbox, __VA_ARGS__) fn(DT_N_S_test_S_mbox_zero_cell, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, __VA_ARGS__) fn(DT_N_S_test_S_spi_55556666, __VA_ARGS__) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, __VA_ARGS__) fn(DT_N_S_test_S_i2c_77778888, __VA_ARGS__) fn(DT_N_S_test_S_adc_10002000, __VA_ARGS__) fn(DT_N_S_test_S_adc_10003000, __VA_ARGS__) fn(DT_N_S_test_S_temperature_sensor, __VA_ARGS__) fn(DT_N_S_test_S_reg_holder_9999aaaa, __VA_ARGS__) fn(DT_N_S_test_S_vendor, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder_extended, __VA_ARGS__) fn(DT_N_S_test_S_test_fixed_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_reset_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_dma_44443333, __VA_ARGS__) fn(DT_N_S_test_S_dma_44442222, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55551111, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55552222, __VA_ARGS__) fn(DT_N_S_test_S_can_phy0, __VA_ARGS__) fn(DT_N_S_test_S_can_55553333, __VA_ARGS__) fn(DT_N_S_test_S_can_55554444, __VA_ARGS__) fn(DT_N_S_test_S_can_55554444_S_can_transceiver, __VA_ARGS__) fn(DT_N_S_test_S_test_children, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_a, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_b, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_c, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren_S_child, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_pcie_0, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_other_1, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_empty_2, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_0, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_1, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_2, __VA_ARGS__) fn(DT_N_S_test_S_string_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_token_2, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, __VA_ARGS__) fn(DT_N_S_test_64, __VA_ARGS__) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, __VA_ARGS__) fn(DT_N_S_non_deprecated_label, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can_loopback0, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_zephyr_user, __VA_ARGS__) fn(DT_N_S_test, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_a, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_b, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_c, __VA_ARGS__) fn(DT_N_S_test_S_pin_controller_S_pincfg_d, __VA_ARGS__) fn(DT_N_S_test_S_array_holder, __VA_ARGS__) fn(DT_N_S_test_S_phandle_holder_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_1, __VA_ARGS__) fn(DT_N_S_test_S_enum_2, __VA_ARGS__) fn(DT_N_S_test_S_enum_3, __VA_ARGS__) fn(DT_N_S_test_S_enum_4, __VA_ARGS__) fn(DT_N_S_test_S_enum_5, __VA_ARGS__) fn(DT_N_S_test_S_enum_6, __VA_ARGS__) fn(DT_N_S_test_S_enum_7, __VA_ARGS__) fn(DT_N_S_test_S_intc_no_status_0, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_1, __VA_ARGS__) fn(DT_N_S_test_S_gpio_deadbeef_S_test_gpio_hog_2, __VA_ARGS__) fn(DT_N_S_test_S_gpio_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_abcd1234_S_test_gpio_hog_3, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234, __VA_ARGS__) fn(DT_N_S_test_S_gpio_1234abcd, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, __VA_ARGS__) fn(DT_N_S_test_S_i2c, __VA_ARGS__) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, __VA_ARGS__) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, __VA_ARGS__) fn(DT_N_S_test_S_mbox, __VA_ARGS__) fn(DT_N_S_test_S_mbox_zero_cell, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, __VA_ARGS__) fn(DT_N_S_test_S_spi_55556666, __VA_ARGS__) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, __VA_ARGS__) fn(DT_N_S_test_S_i2c_77778888, __VA_ARGS__) fn(DT_N_S_test_S_adc_10002000, __VA_ARGS__) fn(DT_N_S_test_S_adc_10003000, __VA_ARGS__) fn(DT_N_S_test_S_temperature_sensor, __VA_ARGS__) fn(DT_N_S_test_S_reg_holder_9999aaaa, __VA_ARGS__) fn(DT_N_S_test_S_vendor, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_holder_extended, __VA_ARGS__) fn(DT_N_S_test_S_test_fixed_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_clock, __VA_ARGS__) fn(DT_N_S_test_S_test_reset_abcd1234, __VA_ARGS__) fn(DT_N_S_test_S_dma_44443333, __VA_ARGS__) fn(DT_N_S_test_S_dma_44442222, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55551111, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55552222, __VA_ARGS__) fn(DT_N_S_test_S_can_phy0, __VA_ARGS__) fn(DT_N_S_test_S_can_55553333, __VA_ARGS__) fn(DT_N_S_test_S_can_55554444, __VA_ARGS__) fn(DT_N_S_test_S_can_55554444_S_can_transceiver, __VA_ARGS__) fn(DT_N_S_test_S_test_children, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_a, __VA_ARGS__) fn(DT_N_S_test_S_test_children_S_child_b, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren_S_child, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild, __VA_ARGS__) fn(DT_N_S_test_S_test_great_grandchildren_S_child_S_grandchild_S_great_grandchild, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_pcie_0, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_other_1, __VA_ARGS__) fn(DT_N_S_test_S_test_ranges_S_empty_2, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_0, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_1, __VA_ARGS__) fn(DT_N_S_test_S_string_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_token_2, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_t, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80, __VA_ARGS__) fn(DT_N_S_test_64, __VA_ARGS__) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, __VA_ARGS__) fn(DT_N_S_non_deprecated_label, __VA_ARGS__)
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_test_partition_0 DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_test_partition_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_test_partition_1 DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions_S_partition_c0
#define DT_COMPAT_fixed_partitions_LABEL_test_partition_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_test_partition_2 DT_N_S_test_S_test_mtd_33221100_S_partitions_S_partition_6ff80
#define DT_COMPAT_fixed_partitions_LABEL_test_partition_2_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_zephyr_posix 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1
#define DT_COMPAT_HAS_OKAY_zephyr_lvgl_pointer_input 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_cpu 1
#define DT_COMPAT_HAS_OKAY_zephyr_sim_flash 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_zephyr_sim_eeprom 1
#define DT_COMPAT_HAS_OKAY_zephyr_i2c_emul_controller 1
#define DT_COMPAT_HAS_OKAY_zephyr_spi_emul_controller 1
#define DT_COMPAT_HAS_OKAY_zephyr_espi_emul_controller 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_uart 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_rng 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_counter 1
#define DT_COMPAT_HAS_OKAY_zephyr_gpio_emul 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_udc 1
#define DT_COMPAT_HAS_OKAY_zephyr_sdl_dc 1
#define DT_COMPAT_HAS_OKAY_zephyr_input_sdl_touch 1
#define DT_COMPAT_HAS_OKAY_zephyr_can_loopback 1
#define DT_COMPAT_HAS_OKAY_zephyr_rtc_emul 1
#define DT_COMPAT_HAS_OKAY_zephyr_adc_emul 1
#define DT_COMPAT_HAS_OKAY_zephyr_dma_emul 1
#define DT_COMPAT_HAS_OKAY_vnd_cpu_intc 1
#define DT_COMPAT_HAS_OKAY_vnd_pinctrl 1
#define DT_COMPAT_HAS_OKAY_vnd_array_holder 1
#define DT_COMPAT_HAS_OKAY_vnd_undefined_compat 1
#define DT_COMPAT_HAS_OKAY_vnd_phandle_holder 1
#define DT_COMPAT_HAS_OKAY_vnd_enum_holder 1
#define DT_COMPAT_HAS_OKAY_vnd_enum_required_false_holder 1
#define DT_COMPAT_HAS_OKAY_vnd_enum_int_required_false_holder 1
#define DT_COMPAT_HAS_OKAY_vnd_enum_holder_inst 1
#define DT_COMPAT_HAS_OKAY_vnd_enum_required_false_holder_inst 1
#define DT_COMPAT_HAS_OKAY_vnd_intc 1
#define DT_COMPAT_HAS_OKAY_vnd_gpio_device 1
#define DT_COMPAT_HAS_OKAY_vnd_gpio_one_cell 1
#define DT_COMPAT_HAS_OKAY_vnd_gpio_intc_device 1
#define DT_COMPAT_HAS_OKAY_vnd_i2c 1
#define DT_COMPAT_HAS_OKAY_vnd_i2c_device 1
#define DT_COMPAT_HAS_OKAY_vnd_gpio_expander 1
#define DT_COMPAT_HAS_OKAY_vnd_i2c_mux 1
#define DT_COMPAT_HAS_OKAY_vnd_i2c_mux_controller 1
#define DT_COMPAT_HAS_OKAY_vnd_i3c 1
#define DT_COMPAT_HAS_OKAY_vnd_i3c_device 1
#define DT_COMPAT_HAS_OKAY_vnd_i3c_i2c_device 1
#define DT_COMPAT_HAS_OKAY_vnd_mbox 1
#define DT_COMPAT_HAS_OKAY_vnd_mbox_zero_cell 1
#define DT_COMPAT_HAS_OKAY_vnd_spi 1
#define DT_COMPAT_HAS_OKAY_vnd_spi_device 1
#define DT_COMPAT_HAS_OKAY_vnd_spi_device_2 1
#define DT_COMPAT_HAS_OKAY_vnd_adc 1
#define DT_COMPAT_HAS_OKAY_vnd_adc_temp_sensor 1
#define DT_COMPAT_HAS_OKAY_vnd_reg_holder 1
#define DT_COMPAT_HAS_OKAY_vnd_model1 1
#define DT_COMPAT_HAS_OKAY_gpio 1
#define DT_COMPAT_HAS_OKAY_zephyr_model2 1
#define DT_COMPAT_HAS_OKAY_vnd_interrupt_holder 1
#define DT_COMPAT_HAS_OKAY_vnd_interrupt_holder_extended 1
#define DT_COMPAT_HAS_OKAY_fixed_clock 1
#define DT_COMPAT_HAS_OKAY_vnd_clock 1
#define DT_COMPAT_HAS_OKAY_vnd_reset 1
#define DT_COMPAT_HAS_OKAY_vnd_dma 1
#define DT_COMPAT_HAS_OKAY_vnd_pwm 1
#define DT_COMPAT_HAS_OKAY_vnd_can_transceiver 1
#define DT_COMPAT_HAS_OKAY_vnd_can_controller 1
#define DT_COMPAT_HAS_OKAY_vnd_child_bindings 1
#define DT_COMPAT_HAS_OKAY_vnd_great_grandchild_bindings 1
#define DT_COMPAT_HAS_OKAY_vnd_pcie 1
#define DT_COMPAT_HAS_OKAY_vnd_device_with_props 1
#define DT_COMPAT_HAS_OKAY_vnd_string_token 1
#define DT_COMPAT_HAS_OKAY_vnd_string_array_token 1
#define DT_COMPAT_HAS_OKAY_vnd_string_unquoted 1
#define DT_COMPAT_HAS_OKAY_vnd_string_array_unquoted 1
#define DT_COMPAT_HAS_OKAY_vnd_reg_holder_64 1
#define DT_COMPAT_HAS_OKAY_vnd_non_deprecated_label 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_zephyr_posix_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_N_INST_zephyr_lvgl_pointer_input_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_cpu_NUM_OKAY 1
#define DT_N_INST_zephyr_sim_flash_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 2
#define DT_N_INST_fixed_partitions_NUM_OKAY 3
#define DT_N_INST_zephyr_sim_eeprom_NUM_OKAY 1
#define DT_N_INST_zephyr_i2c_emul_controller_NUM_OKAY 1
#define DT_N_INST_zephyr_spi_emul_controller_NUM_OKAY 1
#define DT_N_INST_zephyr_espi_emul_controller_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_uart_NUM_OKAY 2
#define DT_N_INST_zephyr_native_posix_rng_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_counter_NUM_OKAY 1
#define DT_N_INST_zephyr_gpio_emul_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_udc_NUM_OKAY 1
#define DT_N_INST_zephyr_sdl_dc_NUM_OKAY 1
#define DT_N_INST_zephyr_input_sdl_touch_NUM_OKAY 1
#define DT_N_INST_zephyr_can_loopback_NUM_OKAY 1
#define DT_N_INST_zephyr_rtc_emul_NUM_OKAY 1
#define DT_N_INST_zephyr_adc_emul_NUM_OKAY 1
#define DT_N_INST_zephyr_dma_emul_NUM_OKAY 1
#define DT_N_INST_vnd_cpu_intc_NUM_OKAY 1
#define DT_N_INST_vnd_pinctrl_NUM_OKAY 1
#define DT_N_INST_vnd_array_holder_NUM_OKAY 1
#define DT_N_INST_vnd_undefined_compat_NUM_OKAY 1
#define DT_N_INST_vnd_phandle_holder_NUM_OKAY 1
#define DT_N_INST_vnd_enum_holder_NUM_OKAY 2
#define DT_N_INST_vnd_enum_required_false_holder_NUM_OKAY 2
#define DT_N_INST_vnd_enum_int_required_false_holder_NUM_OKAY 2
#define DT_N_INST_vnd_enum_holder_inst_NUM_OKAY 1
#define DT_N_INST_vnd_enum_required_false_holder_inst_NUM_OKAY 1
#define DT_N_INST_vnd_intc_NUM_OKAY 2
#define DT_N_INST_vnd_gpio_device_NUM_OKAY 2
#define DT_N_INST_vnd_gpio_one_cell_NUM_OKAY 1
#define DT_N_INST_vnd_gpio_intc_device_NUM_OKAY 1
#define DT_N_INST_vnd_i2c_NUM_OKAY 3
#define DT_N_INST_vnd_i2c_device_NUM_OKAY 2
#define DT_N_INST_vnd_gpio_expander_NUM_OKAY 2
#define DT_N_INST_vnd_i2c_mux_NUM_OKAY 1
#define DT_N_INST_vnd_i2c_mux_controller_NUM_OKAY 2
#define DT_N_INST_vnd_i3c_NUM_OKAY 1
#define DT_N_INST_vnd_i3c_device_NUM_OKAY 1
#define DT_N_INST_vnd_i3c_i2c_device_NUM_OKAY 1
#define DT_N_INST_vnd_mbox_NUM_OKAY 1
#define DT_N_INST_vnd_mbox_zero_cell_NUM_OKAY 1
#define DT_N_INST_vnd_spi_NUM_OKAY 2
#define DT_N_INST_vnd_spi_device_NUM_OKAY 2
#define DT_N_INST_vnd_spi_device_2_NUM_OKAY 1
#define DT_N_INST_vnd_adc_NUM_OKAY 2
#define DT_N_INST_vnd_adc_temp_sensor_NUM_OKAY 1
#define DT_N_INST_vnd_reg_holder_NUM_OKAY 1
#define DT_N_INST_vnd_model1_NUM_OKAY 1
#define DT_N_INST_gpio_NUM_OKAY 1
#define DT_N_INST_zephyr_model2_NUM_OKAY 1
#define DT_N_INST_vnd_interrupt_holder_NUM_OKAY 1
#define DT_N_INST_vnd_interrupt_holder_extended_NUM_OKAY 1
#define DT_N_INST_fixed_clock_NUM_OKAY 1
#define DT_N_INST_vnd_clock_NUM_OKAY 1
#define DT_N_INST_vnd_reset_NUM_OKAY 1
#define DT_N_INST_vnd_dma_NUM_OKAY 2
#define DT_N_INST_vnd_pwm_NUM_OKAY 2
#define DT_N_INST_vnd_can_transceiver_NUM_OKAY 1
#define DT_N_INST_vnd_can_controller_NUM_OKAY 2
#define DT_N_INST_vnd_child_bindings_NUM_OKAY 1
#define DT_N_INST_vnd_great_grandchild_bindings_NUM_OKAY 1
#define DT_N_INST_vnd_pcie_NUM_OKAY 1
#define DT_N_INST_vnd_device_with_props_NUM_OKAY 2
#define DT_N_INST_vnd_string_token_NUM_OKAY 3
#define DT_N_INST_vnd_string_array_token_NUM_OKAY 2
#define DT_N_INST_vnd_string_unquoted_NUM_OKAY 3
#define DT_N_INST_vnd_string_array_unquoted_NUM_OKAY 3
#define DT_N_INST_vnd_reg_holder_64_NUM_OKAY 1
#define DT_N_INST_vnd_non_deprecated_label_NUM_OKAY 1
#define DT_FOREACH_OKAY_zephyr_posix(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_zephyr_posix(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_posix(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_posix(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_lvgl_pointer_input(fn) fn(DT_N_S_lvgl_pointer)
#define DT_FOREACH_OKAY_VARGS_zephyr_lvgl_pointer_input(fn, ...) fn(DT_N_S_lvgl_pointer, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_lvgl_pointer_input(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_lvgl_pointer_input(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_cpu(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_cpu(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_cpu(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_cpu(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sim_flash(fn) fn(DT_N_S_flash_controller_0)
#define DT_FOREACH_OKAY_VARGS_zephyr_sim_flash(fn, ...) fn(DT_N_S_flash_controller_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sim_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sim_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_flash_controller_0_S_flash_0) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_ffeeddcc_S_flash_20000000_S_partitions, __VA_ARGS__) fn(DT_N_S_test_S_test_mtd_33221100_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sim_eeprom(fn) fn(DT_N_S_eeprom)
#define DT_FOREACH_OKAY_VARGS_zephyr_sim_eeprom(fn, ...) fn(DT_N_S_eeprom, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sim_eeprom(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sim_eeprom(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_i2c_emul_controller(fn) fn(DT_N_S_i2c_100)
#define DT_FOREACH_OKAY_VARGS_zephyr_i2c_emul_controller(fn, ...) fn(DT_N_S_i2c_100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_i2c_emul_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_i2c_emul_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_spi_emul_controller(fn) fn(DT_N_S_spi_200)
#define DT_FOREACH_OKAY_VARGS_zephyr_spi_emul_controller(fn, ...) fn(DT_N_S_spi_200, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_spi_emul_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_spi_emul_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_espi_emul_controller(fn) fn(DT_N_S_espi_300)
#define DT_FOREACH_OKAY_VARGS_zephyr_espi_emul_controller(fn, ...) fn(DT_N_S_espi_300, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_espi_emul_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_espi_emul_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_uart(fn) fn(DT_N_S_uart) fn(DT_N_S_uart_1)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_uart(fn, ...) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_uart(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_uart(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_rng(fn) fn(DT_N_S_rng)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_rng(fn, ...) fn(DT_N_S_rng, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_rng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_rng(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_counter(fn) fn(DT_N_S_counter)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_counter(fn, ...) fn(DT_N_S_counter, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_counter(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_counter(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_gpio_emul(fn) fn(DT_N_S_gpio_800)
#define DT_FOREACH_OKAY_VARGS_zephyr_gpio_emul(fn, ...) fn(DT_N_S_gpio_800, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_gpio_emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_gpio_emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_udc(fn) fn(DT_N_S_udc0)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_udc(fn, ...) fn(DT_N_S_udc0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_udc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_udc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sdl_dc(fn) fn(DT_N_S_sdl_dc)
#define DT_FOREACH_OKAY_VARGS_zephyr_sdl_dc(fn, ...) fn(DT_N_S_sdl_dc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sdl_dc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sdl_dc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_input_sdl_touch(fn) fn(DT_N_S_input_sdl_touch)
#define DT_FOREACH_OKAY_VARGS_zephyr_input_sdl_touch(fn, ...) fn(DT_N_S_input_sdl_touch, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_input_sdl_touch(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_input_sdl_touch(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_can_loopback(fn) fn(DT_N_S_can_loopback0)
#define DT_FOREACH_OKAY_VARGS_zephyr_can_loopback(fn, ...) fn(DT_N_S_can_loopback0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_can_loopback(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_can_loopback(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_rtc_emul(fn) fn(DT_N_S_rtc)
#define DT_FOREACH_OKAY_VARGS_zephyr_rtc_emul(fn, ...) fn(DT_N_S_rtc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_rtc_emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_rtc_emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_adc_emul(fn) fn(DT_N_S_adc)
#define DT_FOREACH_OKAY_VARGS_zephyr_adc_emul(fn, ...) fn(DT_N_S_adc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_adc_emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_adc_emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_dma_emul(fn) fn(DT_N_S_dma)
#define DT_FOREACH_OKAY_VARGS_zephyr_dma_emul(fn, ...) fn(DT_N_S_dma, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_dma_emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_dma_emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_cpu_intc(fn) fn(DT_N_S_test_S_interrupt_controller)
#define DT_FOREACH_OKAY_VARGS_vnd_cpu_intc(fn, ...) fn(DT_N_S_test_S_interrupt_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_cpu_intc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_cpu_intc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_pinctrl(fn) fn(DT_N_S_test_S_pin_controller)
#define DT_FOREACH_OKAY_VARGS_vnd_pinctrl(fn, ...) fn(DT_N_S_test_S_pin_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_array_holder(fn) fn(DT_N_S_test_S_array_holder)
#define DT_FOREACH_OKAY_VARGS_vnd_array_holder(fn, ...) fn(DT_N_S_test_S_array_holder, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_array_holder(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_array_holder(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_undefined_compat(fn) fn(DT_N_S_test_S_array_holder)
#define DT_FOREACH_OKAY_VARGS_vnd_undefined_compat(fn, ...) fn(DT_N_S_test_S_array_holder, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_undefined_compat(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_undefined_compat(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_phandle_holder(fn) fn(DT_N_S_test_S_phandle_holder_0)
#define DT_FOREACH_OKAY_VARGS_vnd_phandle_holder(fn, ...) fn(DT_N_S_test_S_phandle_holder_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_phandle_holder(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_phandle_holder(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_enum_holder(fn) fn(DT_N_S_test_S_enum_0) fn(DT_N_S_test_S_enum_1)
#define DT_FOREACH_OKAY_VARGS_vnd_enum_holder(fn, ...) fn(DT_N_S_test_S_enum_0, __VA_ARGS__) fn(DT_N_S_test_S_enum_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_enum_holder(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_enum_holder(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_enum_required_false_holder(fn) fn(DT_N_S_test_S_enum_2) fn(DT_N_S_test_S_enum_3)
#define DT_FOREACH_OKAY_VARGS_vnd_enum_required_false_holder(fn, ...) fn(DT_N_S_test_S_enum_2, __VA_ARGS__) fn(DT_N_S_test_S_enum_3, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_enum_required_false_holder(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_enum_required_false_holder(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_enum_int_required_false_holder(fn) fn(DT_N_S_test_S_enum_4) fn(DT_N_S_test_S_enum_5)
#define DT_FOREACH_OKAY_VARGS_vnd_enum_int_required_false_holder(fn, ...) fn(DT_N_S_test_S_enum_4, __VA_ARGS__) fn(DT_N_S_test_S_enum_5, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_enum_int_required_false_holder(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_enum_int_required_false_holder(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_enum_holder_inst(fn) fn(DT_N_S_test_S_enum_6)
#define DT_FOREACH_OKAY_VARGS_vnd_enum_holder_inst(fn, ...) fn(DT_N_S_test_S_enum_6, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_enum_holder_inst(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_enum_holder_inst(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_enum_required_false_holder_inst(fn) fn(DT_N_S_test_S_enum_7)
#define DT_FOREACH_OKAY_VARGS_vnd_enum_required_false_holder_inst(fn, ...) fn(DT_N_S_test_S_enum_7, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_enum_required_false_holder_inst(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_enum_required_false_holder_inst(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_intc(fn) fn(DT_N_S_test_S_intc_no_status_0) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc)
#define DT_FOREACH_OKAY_VARGS_vnd_intc(fn, ...) fn(DT_N_S_test_S_intc_no_status_0, __VA_ARGS__) fn(DT_N_S_test_S_interrupt_controller_bbbbcccc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_intc(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_intc(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_gpio_device(fn) fn(DT_N_S_test_S_gpio_deadbeef) fn(DT_N_S_test_S_gpio_abcd1234)
#define DT_FOREACH_OKAY_VARGS_vnd_gpio_device(fn, ...) fn(DT_N_S_test_S_gpio_deadbeef, __VA_ARGS__) fn(DT_N_S_test_S_gpio_abcd1234, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_gpio_device(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_gpio_device(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_gpio_one_cell(fn) fn(DT_N_S_test_S_gpio_1234)
#define DT_FOREACH_OKAY_VARGS_vnd_gpio_one_cell(fn, ...) fn(DT_N_S_test_S_gpio_1234, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_gpio_one_cell(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_gpio_one_cell(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_gpio_intc_device(fn) fn(DT_N_S_test_S_gpio_1234abcd)
#define DT_FOREACH_OKAY_VARGS_vnd_gpio_intc_device(fn, ...) fn(DT_N_S_test_S_gpio_1234abcd, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_gpio_intc_device(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_gpio_intc_device(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_i2c(fn) fn(DT_N_S_test_S_i2c_11112222) fn(DT_N_S_test_S_i2c) fn(DT_N_S_test_S_i2c_77778888)
#define DT_FOREACH_OKAY_VARGS_vnd_i2c(fn, ...) fn(DT_N_S_test_S_i2c_11112222, __VA_ARGS__) fn(DT_N_S_test_S_i2c, __VA_ARGS__) fn(DT_N_S_test_S_i2c_77778888, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_i2c(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_i2c(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_i2c_device(fn) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12)
#define DT_FOREACH_OKAY_VARGS_vnd_i2c_device(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_test_i2c_dev_10, __VA_ARGS__) fn(DT_N_S_test_S_i2c_S_test_i2c_dev_12, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_i2c_device(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_i2c_device(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_gpio_expander(fn) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11) fn(DT_N_S_test_S_spi_33334444_S_gpio_2)
#define DT_FOREACH_OKAY_VARGS_vnd_gpio_expander(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_gpio_11, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_gpio_2, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_gpio_expander(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_gpio_expander(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_i2c_mux(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12)
#define DT_FOREACH_OKAY_VARGS_vnd_i2c_mux(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_i2c_mux(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_i2c_mux(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_i2c_mux_controller(fn) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2)
#define DT_FOREACH_OKAY_VARGS_vnd_i2c_mux_controller(fn, ...) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_1, __VA_ARGS__) fn(DT_N_S_test_S_i2c_11112222_S_i2c_mux_12_S_i2c_mux_ctlr_2, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_i2c_mux_controller(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_i2c_mux_controller(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_i3c(fn) fn(DT_N_S_test_S_i3c_88889999)
#define DT_FOREACH_OKAY_VARGS_vnd_i3c(fn, ...) fn(DT_N_S_test_S_i3c_88889999, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_i3c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_i3c(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_i3c_device(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678)
#define DT_FOREACH_OKAY_VARGS_vnd_i3c_device(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_dev_420000abcd12345678, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_i3c_device(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_i3c_device(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_i3c_i2c_device(fn) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050)
#define DT_FOREACH_OKAY_VARGS_vnd_i3c_i2c_device(fn, ...) fn(DT_N_S_test_S_i3c_88889999_S_test_i3c_i2c_dev_380000000000000050, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_i3c_i2c_device(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_i3c_i2c_device(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_mbox(fn) fn(DT_N_S_test_S_mbox)
#define DT_FOREACH_OKAY_VARGS_vnd_mbox(fn, ...) fn(DT_N_S_test_S_mbox, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_mbox(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_mbox(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_mbox_zero_cell(fn) fn(DT_N_S_test_S_mbox_zero_cell)
#define DT_FOREACH_OKAY_VARGS_vnd_mbox_zero_cell(fn, ...) fn(DT_N_S_test_S_mbox_zero_cell, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_mbox_zero_cell(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_mbox_zero_cell(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_spi(fn) fn(DT_N_S_test_S_spi_33334444) fn(DT_N_S_test_S_spi_55556666)
#define DT_FOREACH_OKAY_VARGS_vnd_spi(fn, ...) fn(DT_N_S_test_S_spi_33334444, __VA_ARGS__) fn(DT_N_S_test_S_spi_55556666, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_spi(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_spi(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_spi_device(fn) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1)
#define DT_FOREACH_OKAY_VARGS_vnd_spi_device(fn, ...) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_0, __VA_ARGS__) fn(DT_N_S_test_S_spi_33334444_S_test_spi_dev_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_spi_device(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_spi_device(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_spi_device_2(fn) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0)
#define DT_FOREACH_OKAY_VARGS_vnd_spi_device_2(fn, ...) fn(DT_N_S_test_S_spi_55556666_S_test_spi_dev_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_spi_device_2(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_spi_device_2(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_adc(fn) fn(DT_N_S_test_S_adc_10002000) fn(DT_N_S_test_S_adc_10003000)
#define DT_FOREACH_OKAY_VARGS_vnd_adc(fn, ...) fn(DT_N_S_test_S_adc_10002000, __VA_ARGS__) fn(DT_N_S_test_S_adc_10003000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_adc(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_adc(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_adc_temp_sensor(fn) fn(DT_N_S_test_S_temperature_sensor)
#define DT_FOREACH_OKAY_VARGS_vnd_adc_temp_sensor(fn, ...) fn(DT_N_S_test_S_temperature_sensor, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_adc_temp_sensor(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_adc_temp_sensor(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_reg_holder(fn) fn(DT_N_S_test_S_reg_holder_9999aaaa)
#define DT_FOREACH_OKAY_VARGS_vnd_reg_holder(fn, ...) fn(DT_N_S_test_S_reg_holder_9999aaaa, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_reg_holder(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_reg_holder(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_model1(fn) fn(DT_N_S_test_S_vendor)
#define DT_FOREACH_OKAY_VARGS_vnd_model1(fn, ...) fn(DT_N_S_test_S_vendor, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_model1(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_model1(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio(fn) fn(DT_N_S_test_S_vendor)
#define DT_FOREACH_OKAY_VARGS_gpio(fn, ...) fn(DT_N_S_test_S_vendor, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_model2(fn) fn(DT_N_S_test_S_vendor)
#define DT_FOREACH_OKAY_VARGS_zephyr_model2(fn, ...) fn(DT_N_S_test_S_vendor, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_model2(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_model2(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_interrupt_holder(fn) fn(DT_N_S_test_S_interrupt_holder)
#define DT_FOREACH_OKAY_VARGS_vnd_interrupt_holder(fn, ...) fn(DT_N_S_test_S_interrupt_holder, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_interrupt_holder(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_interrupt_holder(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_interrupt_holder_extended(fn) fn(DT_N_S_test_S_interrupt_holder_extended)
#define DT_FOREACH_OKAY_VARGS_vnd_interrupt_holder_extended(fn, ...) fn(DT_N_S_test_S_interrupt_holder_extended, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_interrupt_holder_extended(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_interrupt_holder_extended(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_clock(fn) fn(DT_N_S_test_S_test_fixed_clock)
#define DT_FOREACH_OKAY_VARGS_fixed_clock(fn, ...) fn(DT_N_S_test_S_test_fixed_clock, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_clock(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_clock(fn) fn(DT_N_S_test_S_test_clock)
#define DT_FOREACH_OKAY_VARGS_vnd_clock(fn, ...) fn(DT_N_S_test_S_test_clock, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_clock(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_reset(fn) fn(DT_N_S_test_S_test_reset_abcd1234)
#define DT_FOREACH_OKAY_VARGS_vnd_reset(fn, ...) fn(DT_N_S_test_S_test_reset_abcd1234, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_reset(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_reset(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_dma(fn) fn(DT_N_S_test_S_dma_44443333) fn(DT_N_S_test_S_dma_44442222)
#define DT_FOREACH_OKAY_VARGS_vnd_dma(fn, ...) fn(DT_N_S_test_S_dma_44443333, __VA_ARGS__) fn(DT_N_S_test_S_dma_44442222, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_dma(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_dma(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_pwm(fn) fn(DT_N_S_test_S_pwm_55551111) fn(DT_N_S_test_S_pwm_55552222)
#define DT_FOREACH_OKAY_VARGS_vnd_pwm(fn, ...) fn(DT_N_S_test_S_pwm_55551111, __VA_ARGS__) fn(DT_N_S_test_S_pwm_55552222, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_pwm(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_pwm(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_can_transceiver(fn) fn(DT_N_S_test_S_can_phy0)
#define DT_FOREACH_OKAY_VARGS_vnd_can_transceiver(fn, ...) fn(DT_N_S_test_S_can_phy0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_can_transceiver(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_can_transceiver(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_can_controller(fn) fn(DT_N_S_test_S_can_55553333) fn(DT_N_S_test_S_can_55554444)
#define DT_FOREACH_OKAY_VARGS_vnd_can_controller(fn, ...) fn(DT_N_S_test_S_can_55553333, __VA_ARGS__) fn(DT_N_S_test_S_can_55554444, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_can_controller(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_can_controller(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_child_bindings(fn) fn(DT_N_S_test_S_test_children)
#define DT_FOREACH_OKAY_VARGS_vnd_child_bindings(fn, ...) fn(DT_N_S_test_S_test_children, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_child_bindings(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_child_bindings(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_great_grandchild_bindings(fn) fn(DT_N_S_test_S_test_great_grandchildren)
#define DT_FOREACH_OKAY_VARGS_vnd_great_grandchild_bindings(fn, ...) fn(DT_N_S_test_S_test_great_grandchildren, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_great_grandchild_bindings(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_great_grandchild_bindings(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_pcie(fn) fn(DT_N_S_test_S_test_ranges_S_pcie_0)
#define DT_FOREACH_OKAY_VARGS_vnd_pcie(fn, ...) fn(DT_N_S_test_S_test_ranges_S_pcie_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_pcie(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_pcie(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_device_with_props(fn) fn(DT_N_S_test_S_device_with_props_0) fn(DT_N_S_test_S_device_with_props_1)
#define DT_FOREACH_OKAY_VARGS_vnd_device_with_props(fn, ...) fn(DT_N_S_test_S_device_with_props_0, __VA_ARGS__) fn(DT_N_S_test_S_device_with_props_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_device_with_props(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_device_with_props(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_string_token(fn) fn(DT_N_S_test_S_string_token_0) fn(DT_N_S_test_S_string_token_1) fn(DT_N_S_test_S_string_token_2)
#define DT_FOREACH_OKAY_VARGS_vnd_string_token(fn, ...) fn(DT_N_S_test_S_string_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_token_1, __VA_ARGS__) fn(DT_N_S_test_S_string_token_2, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_string_token(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_string_token(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_string_array_token(fn) fn(DT_N_S_test_S_string_array_token_0) fn(DT_N_S_test_S_string_array_token_1)
#define DT_FOREACH_OKAY_VARGS_vnd_string_array_token(fn, ...) fn(DT_N_S_test_S_string_array_token_0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_token_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_string_array_token(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_string_array_token(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_string_unquoted(fn) fn(DT_N_S_test_S_string_unquoted_f0) fn(DT_N_S_test_S_string_unquoted_f1) fn(DT_N_S_test_S_string_unquoted_t)
#define DT_FOREACH_OKAY_VARGS_vnd_string_unquoted(fn, ...) fn(DT_N_S_test_S_string_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_unquoted_t, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_string_unquoted(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_string_unquoted(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_string_array_unquoted(fn) fn(DT_N_S_test_S_string_array_unquoted_f0) fn(DT_N_S_test_S_string_array_unquoted_f1) fn(DT_N_S_test_S_string_array_unquoted_t)
#define DT_FOREACH_OKAY_VARGS_vnd_string_array_unquoted(fn, ...) fn(DT_N_S_test_S_string_array_unquoted_f0, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_f1, __VA_ARGS__) fn(DT_N_S_test_S_string_array_unquoted_t, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_string_array_unquoted(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_string_array_unquoted(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_reg_holder_64(fn) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344)
#define DT_FOREACH_OKAY_VARGS_vnd_reg_holder_64(fn, ...) fn(DT_N_S_test_64_S_reg_holder_64_ffffffff11223344, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_reg_holder_64(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_reg_holder_64(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vnd_non_deprecated_label(fn) fn(DT_N_S_non_deprecated_label)
#define DT_FOREACH_OKAY_VARGS_vnd_non_deprecated_label(fn, ...) fn(DT_N_S_non_deprecated_label, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vnd_non_deprecated_label(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vnd_non_deprecated_label(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
#define DT_COMPAT_vnd_i2c_device_BUS_i2c 1
#define DT_COMPAT_vnd_gpio_expander_BUS_i2c 1
#define DT_COMPAT_vnd_gpio_expander_BUS_spi 1
#define DT_COMPAT_vnd_i2c_mux_BUS_i2c 1
#define DT_COMPAT_vnd_i2c_mux_controller_BUS_i2c 1
#define DT_COMPAT_vnd_i3c_device_BUS_i3c 1
#define DT_COMPAT_vnd_i3c_device_BUS_i2c 1
#define DT_COMPAT_vnd_i3c_i2c_device_BUS_i3c 1
#define DT_COMPAT_vnd_i3c_i2c_device_BUS_i2c 1
#define DT_COMPAT_vnd_spi_device_BUS_spi 1
#define DT_COMPAT_vnd_spi_device_2_BUS_spi 1
